<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://906571331.github.io/yx.github.io/</id>
    <title>WuXin</title>
    <updated>2020-04-08T02:28:39.528Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://906571331.github.io/yx.github.io/"/>
    <link rel="self" href="https://906571331.github.io/yx.github.io/atom.xml"/>
    <subtitle>成千上万个门口，总有一个人要先走。</subtitle>
    <logo>https://906571331.github.io/yx.github.io/images/avatar.png</logo>
    <icon>https://906571331.github.io/yx.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, WuXin</rights>
    <entry>
        <title type="html"><![CDATA[使用JavaScript实时获取系统时间]]></title>
        <id>https://906571331.github.io/yx.github.io/post/shi-yong-javascript-shi-shi-huo-qu-xi-tong-shi-jian/</id>
        <link href="https://906571331.github.io/yx.github.io/post/shi-yong-javascript-shi-shi-huo-qu-xi-tong-shi-jian/">
        </link>
        <updated>2020-04-08T02:15:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="本案例实现了使用js代码实时获取系统时间">本案例实现了使用js代码实时获取系统时间</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;meta charset=&quot;utf-8&quot;&gt;
		&lt;title&gt;实时获取系统时间&lt;/title&gt;
		&lt;script language=&quot;JavaScript&quot;&gt;
			function realSystime(clock){
				var now=new Date();//创建Date对象
				var year=now.getFullYear();//获取年份
				var month=now.getMonth();//获取月份
				var date=now.getDate();//获取日期
				var day=now.getDay();//获取星期
				var hour=now.getHours();//获取小时
				var minu=now.getMinutes();//获取分钟
				var sec=now.getSeconds();//获取秒
				month=month+1;
				var arr_week=new Array(&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;);
				var week=arr_week[day];//获取中文格式的星期，是个数组
				var time=year+&quot;年&quot;+month+&quot;月&quot;+date+&quot;日&quot; +week+&quot; &quot;+hour+&quot;:&quot;+minu+&quot;:&quot;+sec;//组合系统时间
				clock.innerHTML=&quot;当前时间：&quot;+time;//显示系统时间
			}
			window.onload=function(){
				window.setInterval(&quot;realSystime(clock)&quot;,1000);//实时获取并显示系统时间
			}
		&lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div id=&quot;clock&quot;&gt;&lt;/div&gt;
	&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django学习模板篇]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-xue-xi-mo-ban-pian/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-xue-xi-mo-ban-pian/">
        </link>
        <updated>2020-04-05T13:28:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="本篇博客是django学习中的模板篇">本篇博客是Django学习中的模板篇</h3>
<h4 id="1最简单的返回一个页面">1.最简单的返回一个页面</h4>
<p>settings.py中的设置</p>
<pre><code class="language-python">TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,&quot;templates&quot;)],
        'APP_DIRS':True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
#使用绝对路径
#'DIRS':[r&quot;C:\templates&quot;]
</code></pre>
<p>urls.py</p>
<pre><code class="language-python">path(&quot;index111/&quot;,index111),
</code></pre>
<p>views.py</p>
<pre><code class="language-python">from django.shortcuts import render
def index111(request):
    return render(request,&quot;denglu.html&quot;)
</code></pre>
<h4 id="2如果settingspy中appdirstrue则可以从app中的templates中寻找文件并且注册此appapp中的templates文件夹的名字固定否则找不到">2.如果settings.py中APP—DIRS=True，则可以从app中的templates中寻找文件,并且注册此app,app中的templates文件夹的名字固定，否则找不到</h4>
<p>views.py</p>
<pre><code class="language-python">def index222(request):
    return render(request,&quot;index222.html&quot;)
</code></pre>
<p>urls.py</p>
<pre><code class="language-python">path(&quot;index222/&quot;,index222),
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200403085633682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200403085645959.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="3测试从数据库中拿到数据">3.测试从数据库中拿到数据</h4>
<p>views.py</p>
<pre><code class="language-python">from user.models import User
def test(request):
    username=User.objects.all()
    usrss=username[0]
    print(usrss)
    return render(request,&quot;test.html&quot;,context={&quot;username&quot;:usrss})
</code></pre>
<p>urls.py</p>
<pre><code class="language-python">path(&quot;test/&quot;,test),
</code></pre>
<p>models.py</p>
<pre><code class="language-python">from django.db import models
class User(models.Model):
    name = models.CharField(max_length=50, null=False, verbose_name=&quot;姓名&quot;)
</code></pre>
<h4 id="4从views中设定一个类从类的字典中读取数据模型或者类使用keyvalue来获取">4.从views中设定一个类，从类的字典中读取数据,模型或者类使用key.value来获取</h4>
<p>viesw.py</p>
<pre><code class="language-python">class Person(object):
    def __init__(self,username11):
        self.username11=username11
def test3(request):
    p=Person(&quot;王总&quot;)
    context={
        &quot;username11&quot;:p
    }
    return render(request,&quot;test.html&quot;,context)

</code></pre>
<p>urls.py</p>
<pre><code class="language-python">path(&quot;test3/&quot;,test3),
</code></pre>
<p>test.html</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;2020年4月3号的一个测试文件&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
这个是一个测试文件，测试数据中拿到数据
{{ username11.username11}}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200403093742681.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="5如果是一个字典">5.如果是一个字典</h4>
<p>views.py</p>
<pre><code class="language-python">def test3(request):
    # p=Person(&quot;王总&quot;)
    context={
        &quot;persons&quot;:[
            '鲁班一号',
            '程咬金',
            '后羿',
        ]
    }
    return render(request,&quot;test.html&quot;,context)
</code></pre>
<p>test.html</p>
<pre><code class="language-python">{{ persons.0}}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200403094936537.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="6总结笔记">6.总结笔记</h4>
<p>1.在模板中如果要使用变量，则使用{{变量}}访问<br>
2.在模板中如果要访问对象的属性，则使用{{对象.属性名}}来进行访问</p>
<pre><code class="language-python">class Person(object):
    def __init__(self,username11):
        self.username11=username11
def test3(request):
    p=Person(&quot;王总&quot;)
    context={
        &quot;username11&quot;:p
    }
    return render(request,&quot;test.html&quot;,context)

</code></pre>
<p>访问</p>
<pre><code class="language-html">{{ persons.username}}
</code></pre>
<p>3.如果要访问字典key对应的value，则使用{{字典.key}}的方式进行访问，不能通过有[]的形式进行访问。</p>
<pre><code class="language-python">    context = {
        &quot;person&quot;:{
            &quot;username&quot;:&quot;zhihu&quot;,
        }
    }
</code></pre>
<pre><code class="language-html">{{ person.username}}
</code></pre>
<p>4.因为在访问字典key也是使用·点·的方式，因此不能在字典中定义字典本身就有的属性名当做key，否则字典中的属性就变成字典中的key</p>
<pre><code class="language-python">    context = {
        &quot;person&quot;:{
            &quot;username&quot;:&quot;zhihu&quot;,
            &quot;keys&quot;:&quot;asd&quot;
        }
    }
</code></pre>
<p>以上因为将keys作为Python字典的key，如果使用person.keys返回的是key对应的值<br>
5.如果想要访问字典或者元组，那么通过·点·的方式进行访问 ，不能通过【】进行访问，如：</p>
<pre><code class="language-html">{{ persons.0}}
</code></pre>
<h4 id="7if标签的使用">7.if标签的使用</h4>
<p>可以使用{% elif %}和{% else %}</p>
<pre><code class="language-html">{%  if &quot;张三&quot; in persons %}
&lt;p&gt;张三&lt;/p&gt;
{% else %}
&lt;p&gt;李四&lt;/p&gt;
{% endif %}
</code></pre>
<p>views.py</p>
<pre><code class="language-python">def test3(request):
    context={
        &quot;persons&quot;:[
            '鲁班一号',
            '程咬金',
            '后羿',
        ]
    }
    return render(request,&quot;test.html&quot;,context)
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200403101201778.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="8for标签">8.for标签</h4>
<pre><code class="language-html">&lt;ul&gt;
{% for person in  persons%}
{{ person }}
{% endfor %}
&lt;/ul&gt;
</code></pre>
<pre><code class="language-html">&lt;ul&gt;
{% for person in  persons%}
&lt;li&gt;
{{ person }}
&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200403184320608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
反向遍历</p>
<pre><code class="language-html">&lt;ul&gt;
{% for person in  persons reversed %}
&lt;li&gt;
{{ person }}
&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</code></pre>
<h4 id="9for循环读取key">9.for循环读取key</h4>
<p>keys可以改为value,items</p>
<pre><code class="language-html">&lt;ul&gt;
    {% for foo in book.keys %}        
        &lt;li&gt;{{ foo }}&lt;/li&gt;
    {% endfor %}
 &lt;/ul&gt;
</code></pre>
<p>views.py</p>
<pre><code class="language-python">def test3(request):
    # p=Person(&quot;王总&quot;)
    context={
        &quot;persons&quot;:[
            '鲁班一号',
            '程咬金',
            '后羿',
        ],
        &quot;book&quot;:{
            &quot;name&quot;:&quot;shuji&quot;,
            &quot;prices&quot;:&quot;21&quot;,
        }
    }
    return render(request,&quot;test.html&quot;,context)
</code></pre>
<p>改为items时</p>
<pre><code class="language-html">&lt;ul&gt;
    {% for key,value in book.items %}        
        &lt;li&gt;{{ key }}/{{ value }}&lt;/li&gt;
    {% endfor %}
 &lt;/ul&gt;
</code></pre>
<h3 id="10">10.</h3>
<p>views.py</p>
<pre><code class="language-python">class Person(object):
    def __init__(self,username11):
        self.username11=username11
def test3(request):
    # p=Person(&quot;王总&quot;)
    context={
        &quot;persons&quot;:[
            '鲁班一号',
            '程咬金',
            '后羿',
        ],
        &quot;book&quot;:{
            &quot;name&quot;:&quot;shuji&quot;,
            &quot;prices&quot;:&quot;21&quot;,
        },
        &quot;movies&quot;:[
            {
               &quot;name&quot;:&quot;西游记&quot;,
               &quot;author&quot;:&quot;施耐庵&quot;,
                &quot;price&quot;:100,
            },
            {
                &quot;name&quot;:&quot;水浒传&quot;,
                &quot;author&quot;:&quot;罗贯中&quot;,
                &quot;price&quot;:900,
            },
            {
                &quot;name&quot;: &quot;西you&quot;,
                &quot;author&quot;: &quot;施耐&quot;,
                &quot;price&quot;: 10,
            },
            {
                &quot;name&quot;: &quot;西&quot;,
                &quot;author&quot;: &quot;施&quot;,
                &quot;price&quot;: 1,
            },
        ],
    }

    return render(request,&quot;test.html&quot;,context)
</code></pre>
<p>html</p>
<pre><code class="language-html">&lt;table&gt;
    &lt;thead&gt;
    &lt;tr&gt;
        &lt;td&gt;书籍名&lt;/td&gt;
        &lt;td&gt;作者&lt;/td&gt;
        &lt;td&gt;价格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    {% for movie in movies %}
        &lt;tr&gt;
        &lt;td&gt;{{ movie.name }}&lt;/td&gt;
        &lt;td&gt;{{ movie.author }}&lt;/td&gt;
        &lt;td&gt;{{ movie.price }}&lt;/td&gt;
        &lt;/tr&gt;
    {% endfor %}
    &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200403191237320.png" alt="在这里插入图片描述" loading="lazy"><br>
加个 <td>{{ forloop.counter }}</td>,效果为在前面加了序号，forloop.counter0则序号是从0开始，recounter是反向的，recounter0则最后一个是0，first为是否是第一次遍历，last为是否是最后一次遍历<br>
html</p>
<pre><code class="language-html">&lt;table&gt;
    &lt;thead&gt;
    &lt;tr&gt;
        &lt;td&gt;书籍名&lt;/td&gt;
        &lt;td&gt;作者&lt;/td&gt;
        &lt;td&gt;价格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    {% for movie in movies %}
        &lt;tr&gt;
         &lt;td&gt;{{ forloop.counter }}&lt;/td&gt;,
        &lt;td&gt;{{ movie.name }}&lt;/td&gt;
        &lt;td&gt;{{ movie.author }}&lt;/td&gt;
        &lt;td&gt;{{ movie.price }}&lt;/td&gt;
        &lt;/tr&gt;
    {% endfor %}
    &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200403191605778.png" alt="在这里插入图片描述" loading="lazy"><br>
实现表格中的不同颜色</p>
<pre><code class="language-html">&lt;table&gt;
    &lt;thead&gt;
    &lt;tr&gt;
        &lt;td&gt;书籍名&lt;/td&gt;
        &lt;td&gt;作者&lt;/td&gt;
        &lt;td&gt;价格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    {% for movie in movies %}
        {% if forloop.first %}
        &lt;tr style=&quot;background: red;&quot;&gt;
            {% elif forloop.last %}
            &lt;tr style=&quot;background: black;&quot;&gt;
            {% else %}
            &lt;tr style=&quot;background: pink;&quot;&gt;
        {% endif %}
        &lt;td&gt;{{ forloop.first }}&lt;/td&gt;
        &lt;td&gt;{{ movie.name }}&lt;/td&gt;
        &lt;td&gt;{{ movie.author }}&lt;/td&gt;
        &lt;td&gt;{{ movie.price }}&lt;/td&gt;
        &lt;/tr&gt;
    {% endfor %}

    &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200403192556136.png" alt="在这里插入图片描述" loading="lazy"><br>
views.py</p>
<pre><code class="language-python">def test3(request):
    # p=Person(&quot;王总&quot;)
    context={
        &quot;persons&quot;:[
            '鲁班一号',
            '程咬金',
            '后羿',
        ],
        &quot;book&quot;:{
            &quot;name&quot;:&quot;shuji&quot;,
            &quot;prices&quot;:&quot;21&quot;,
        },
        &quot;movies&quot;:[
            {
               &quot;name&quot;:&quot;西游记&quot;,
               &quot;author&quot;:&quot;施耐庵&quot;,
                &quot;price&quot;:100,
            },
            {
                &quot;name&quot;:&quot;水浒传&quot;,
                &quot;author&quot;:&quot;罗贯中&quot;,
                &quot;price&quot;:900,
            },
            {
                &quot;name&quot;: &quot;西you&quot;,
                &quot;author&quot;: &quot;施耐&quot;,
                &quot;price&quot;: 10,
            },
            {
                &quot;name&quot;: &quot;西&quot;,
                &quot;author&quot;: &quot;施&quot;,
                &quot;price&quot;: 1,
            },
        ],
        &quot;comments&quot;:[
            &quot;文章真好&quot;,
            &quot;不错&quot;,
            &quot;还行&quot;
        ],
    }

    return render(request,&quot;test.html&quot;,context)
</code></pre>
<pre><code class="language-html">&lt;ul&gt;
    {% for foo in comments %}
        &lt;li&gt;{{ foo }}&lt;/li&gt;
        {% empty %}
        &lt;li&gt;没有任何评论&lt;/li&gt;
    {% endfor %}
&lt;/ul&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020040319342385.png" alt="在这里插入图片描述" loading="lazy"><br>
若为空，则显示：没有任何评论</p>
<h4 id="11with标签">11.with标签</h4>
<p>with相当于取了一个别名</p>
<pre><code class="language-python">{% with zs=persons.0  %}
{{ zs }}{{ zs }}
{% endwith %}
</code></pre>
<p>使用as的话，应该反过来写</p>
<pre><code class="language-Python">{% with persons.0 as zs  %}
{{ zs }}{{ zs }}
{% endwith %}
</code></pre>
<h4 id="12url标签">12.url标签</h4>
<pre><code class="language-html">&lt;a href=&quot;{% static 'index.html'  %}&quot;&gt;首页&lt;/a&gt;
&lt;a href=&quot;{% url 'denglu' %}&quot;&gt;登录&lt;/a&gt;
&lt;a href=&quot;{% url 'tushu' tushu_id='1' %}&quot;&gt;图书的页面&lt;/a&gt;
</code></pre>
<p>views.py</p>
<pre><code class="language-python">def tushu(request,tushu_id):
    text = &quot;您的图书的id为：%s&quot; % tushu_id
    return HttpResponse(text)
def denglu(request):
    return render(request,&quot;denglu.html&quot;)
</code></pre>
<h4 id="13自动转义">13.自动转义</h4>
<p>views.py</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;info&quot;:&quot;&lt;a href='http://www.baidu.com'&gt;百度&lt;/a&gt;&quot;
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">{% autoescape off %}
    {{ info }}
{% endautoescape %}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200403214106732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="14verbatim">14.verbatim</h4>
<pre><code class="language-html">{% verbatim %}
{{ hello }}
{% endverbatim %}
</code></pre>
<p>显示时不会自动转义，将显示原字符{{hello}}</p>
<h4 id="15返回函数值">15.返回函数值</h4>
<p>views.py</p>
<pre><code class="language-python">def greet():
    return &quot;你好&quot;
def tiaozhuan(request):
    context={
        &quot;greet&quot;:greet
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">{{ greet }}
</code></pre>
<h4 id="16dtl过滤器add添加">16.DTL过滤器add：添加</h4>
<p>单独在html文件中这样写</p>
<pre><code class="language-html">#返回结果为3
{{&quot;1&quot;|add &quot;2&quot;}}
#返回结果是个字符串
{{ &quot;1&quot; |add:&quot;2sdasdsa&quot; }}
</code></pre>
<p>传递参数时：</p>
<pre><code class="language-python">#views.py
def tiaozhuan(request):
    context={
        &quot;value1&quot;:&quot;value1&quot;,
        &quot;value2&quot;:&quot;value2&quot;,
    }
    return render(request,&quot;test.html&quot;,context=context)
#或者：
def tiaozhuan(request):
    context={
        &quot;value1&quot;:[&quot;1&quot;,2,3],
        &quot;value2&quot;:[&quot;4&quot;,&quot;5&quot;,6]
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">{{ value1 |add:value2 }}
#第一种情况显示 value1 value2
#第二种情况显示  ['1', 2, 3, '4', '5', 6]
</code></pre>
<h4 id="17dtl过滤器cut剪掉">17.DTL过滤器cut:剪掉</h4>
<pre><code class="language-html">{{value|cut:&quot;被剪掉的字符串&quot;}}
##例如
{{&quot;hello word&quot;|cut:&quot; &quot;}}
#显示 helloword
</code></pre>
<p>显示日期</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;birthday&quot;:datetime.now()
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">{{ birthday|date:&quot;Y-m-d H:i:s&quot;  }}
</code></pre>
<h4 id="18dtl过滤器defalut若判断为false则使用后面的值代替">18.DTL过滤器defalut:若判断为false，则使用后面的值代替</h4>
<p>default:</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:0
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">{{ a|default:&quot;传入的参数错误&quot; }}
#显示为传入的参数错误
</code></pre>
<p>default_if_none:</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:None
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#显示为nothing
{{ a|default_if_none:&quot;nothing&quot; }}
</code></pre>
<h4 id="19dtl过滤器last显示最后一个值-first显示第一个值">19.DTL过滤器last：显示最后一个值。first:显示第一个值</h4>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:&quot;asdfg&quot;
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#以下代码显示为g
{{ a|last }}
#以下代码显示a
{{a|first}}
</code></pre>
<h4 id="20dtl过滤器floatformat">20.DTL过滤器floatformat</h4>
<p>无参数时，显示一位小数，若四舍五入后小数点后面全为0，则默认省去小数点后面的值（用途：对评分等进行格式化）</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:&quot;90.8927655
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#以下代码显示为90.9
{{ a|floatformat }}
#以下代码显示3位小数
{{ a|floatformat：3 }}
</code></pre>
<h4 id="21dtl过滤器join">21.DTL过滤器join</h4>
<p>join,对给定的参数进行分割</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:&quot;jjjj&quot;
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#以下代码显示为j/j/j/j
{{ a|join:&quot;/&quot; }}
</code></pre>
<h4 id="22dtl过滤器length">22.DTL过滤器length</h4>
<p>lower,将全部转换为小写,upper全部转换为大写<br>
length:统计字典，数组，字符串的长度<br>
random从字典，数组，字符中随机选择一个值(点名系统)<br>
safe:关闭自动转义，可以用来执行写好的js代码</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:&quot;JJJJ&quot;,
        &quot;b&quot;:[&quot;a&quot;,&quot;2&quot;,&quot;&quot;3],
        &quot;c&quot;:{
        	&quot;a&quot;:&quot;s&quot;,
        	&quot;d&quot;:&quot;f&quot;
        },
        &quot;d&quot;:&quot;&lt;script&gt;alert('这是一个警示框')&lt;/script&gt;&quot;
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#以下代码显示为4,3,2,jjjj,弹出警示框
{{ a|length }}
{{ b|length }}
{{ c|length }}
{{a|lower}}
{{b|random}}
{{d|safe}}
</code></pre>
<h4 id="23dtl过滤器slice切片过滤器">23.DTL过滤器slice，切片过滤器</h4>
<p>striptags，清除所有html标签<br>
truncatechars，超过制定数字，则进行切割，并显示....（用于做摘要）,算上....一共的字符<br>
truncatechars_html：切割html中的字符</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:[1,2,3,4,5,6,7],
        &quot;b&quot;:&quot;&lt;script&gt;alert('这是一个警示框')&lt;/script&gt;&quot;,
        &quot;c&quot;:&quot;asdfghjkl&quot;，
        &quot;d&quot;:&quot;&lt;p&gt;北京欢迎你&lt;/p&gt;&quot;,
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#以下代码显示为[1] [2, 3, 4, 5, 6, 7] [2, 3, 4] [2, 4, 6],alert('这是一个警示框')，
{{a|slice:&quot;1&quot;}}
{{a|slice:&quot;1:&quot;}}
{{a|slice:&quot;1:4&quot;}}
{{a|slice:&quot;1:2&quot;}}
{{b|striptags}}
#as...
{{a|truncatechars:5}}
#&lt;p&gt;北...&lt;/p&gt;
{{ d|truncatechars_html:4}}
</code></pre>
<p>查看Django中有哪些默认的标签</p>
<pre><code class="language-python">from django.template import defaultfilters,defaulttags
</code></pre>
<h4 id="24自定义过滤器">24.自定义过滤器</h4>
<p>在app下新建Python package包，名字叫templatetags,在此文件夹下新建my_filter.py，并注册此app</p>
<pre><code class="language-html">#indexs.html
{% load my_filter %}
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{{ value |greet:&quot;word&quot;}}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<pre><code class="language-python">#my_fliter.py
#过滤器最多有两个参数
#过滤器的第一个参数永远为被过滤的参数，也就是|左边的值
from django import template
register=template.Library()
def greet(value,word):
    return value+word
register.filter(&quot;greet&quot;,greet)
#或者可以写成这样，效果是一样的
from django import template
register=template.Library()
@register.filter
def greet(value,word):
    return value+word
register.filter(&quot;greet&quot;,greet)
#当在@register.filter传入参数时，如：@register.filter(&quot;my_greet&quot;),则在html文件中也应该使用这个名字
</code></pre>
<pre><code class="language-python">#views.py
def index(request):
    context ={
        &quot;value&quot;:&quot;张三&quot;,
    }
    return render(request,&quot;indexs.html&quot;,context=context)
</code></pre>
<h4 id="25自定义过滤器实战时间过滤器">25.自定义过滤器实战:时间过滤器</h4>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from datetime import datetime
def index(request):
    context ={
        &quot;value&quot;:&quot;张三&quot;,
        &quot;mytime&quot;:datetime(year=2020,month=3,day=8,hour=13,minute=34)
    }
    return render(request,&quot;indexs.html&quot;,context=context)
</code></pre>
<pre><code class="language-python">#my_filter.py
@register.filter
def time_since(value):
    if not isinstance(value,datetime):
        return value
    now= datetime.now()
    #timedelay.total_seconds
    timestamp=(now - value).total_seconds()
    if timestamp&lt;60:
        return &quot;刚刚&quot;
    elif timestamp&gt;=60 and timestamp &lt;60*60:
        minutes=int(timestamp/60)
        return &quot;%s分钟前&quot; %minutes
    elif timestamp&gt;=60*60 and timestamp&lt;24*60*60:
        hour=int(timestamp/60/60)
        return &quot;%s小时前&quot; %hour
    elif timestamp&gt;=60*60*24 and timestamp&lt;24*60*60*30:
        days=int(timestamp/60/60/24)
        return &quot;%s天前&quot; %days
    else:
        return value.strftime(&quot;%Y/%m/%d %H:%M&quot;)
</code></pre>
<pre><code class="language-html">{{ mytime|time_since }}
</code></pre>
<h4 id="26模板中的include详解">26.模板中的include详解</h4>
<pre><code class="language-python">#views.py
def indexsss(request):
    context={
        &quot;username&quot;:&quot;用户名&quot;
    }
    return render(request,&quot;indexsss.html&quot;,context=context)
def company(request):
    return render(request,&quot;company.html&quot;)
def xiaoyuan(request):
    return render(request,&quot;xiaoyuan.html&quot;)
</code></pre>
<pre><code class="language-html">#indexsss.html
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{% include &quot;header.html&quot; with username=&quot;用户名2&quot;%}
&lt;div class=&quot;content&quot;&gt;
    这是中间的部分{{ username }}
&lt;/div&gt;
{% include &quot;footer.html&quot;  %}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<pre><code class="language-html">#header.html
&lt;header&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;{% url &quot;company&quot; %}&quot;&gt;公司&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;{% url &quot;xiaoyuan&quot; %}&quot;&gt;校园&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;{{ username }}&lt;/li&gt;
    &lt;/ul&gt;
&lt;/header&gt;
</code></pre>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;这是公司的首页&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{% include &quot;header.html&quot; %}
这是公司的页面
{% include &quot;footer.html&quot; %}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="27继承父模板">27.继承父模板</h4>
<pre><code class="language-html">#必须放在第一行
{% extends &quot;base.html&quot; %}
</code></pre>
<p>在base.html中开个口子</p>
<pre><code class="language-html">#base.html
    {% block content %}
    想要继承这一段，需要在index.html中添加相关内容
    {% endblock %}
</code></pre>
<p>同时在index.html中填充口子</p>
<pre><code class="language-html">#index.html
    {% block content %}
    这是首页啊
    {{ block .super}}
    {% endblock %}
</code></pre>
<h4 id="18加载静态文件">18.加载静态文件</h4>
<pre><code class="language-html">#开头加上这个标签
{% load staticfiles %}
src=&quot;{% static 'js/echarts.min.js' %}&quot;
</code></pre>
<p>在settings.py中设置如下</p>
<pre><code class="language-python">STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # 用于存放静态文件
]
</code></pre>
<p>在settiings.py中若设置为如下,则在html文件中可以不用加载{% load staticfiles %}，把static设置为一个内置的标签，如if</p>
<pre><code class="language-python">#settings.py
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,&quot;templates&quot;)],
        'APP_DIRS':True,#如果为True,则也可以到app中寻找htnl文件
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'builtins':['django.templatetags.static'],
        },
    },
]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django学习笔记URL篇]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-xue-xi-bi-ji-url-pian/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-xue-xi-bi-ji-url-pian/">
        </link>
        <updated>2020-04-02T14:33:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="本篇博客记录了博主平时django的一些学习笔记">本篇博客记录了博主平时Django的一些学习笔记：</h3>
<h4 id="1在urlpy中使用httpresponse">1.在Url.py中使用HttpResponse</h4>
<p>urls.py</p>
<pre><code class="language-bash">from django.http import HttpResponse
from django.urls import path, include
def index1(request):
    return HttpResponse(&quot;这才是首页&quot;)
def book(request):
	return HttpResponse(&quot;书籍首页&quot;)
urlpatterns = [
    path(&quot;&quot;,index1),
    path(&quot;book/&quot;,book),
]
</code></pre>
<p>开启debug模式可以在访问错误页面的时候发现运行中的错误，<br>
当Debug设置为False时，必须设置能够访问本网站的主机地址<br>
同时，在本页面出现错误时会返回Server Error (500)<br>
在生产环境中一定要关闭Debug模式，否则可能造成信息泄露<br>
<img src="https://img-blog.csdnimg.cn/20200401181539431.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="2project与app分开写视图函数">2.project与app分开写视图函数</h4>
<p>projetc/url.py</p>
<pre><code class="language-python">from book.views import book
urlpatterns = [
    path(&quot;book/&quot;,book),
]
</code></pre>
<p>book/views.py</p>
<pre><code class="language-python">from django.http import HttpResponse
def book(request):
	return HttpResponse(&quot;这是book首页&quot;)
</code></pre>
<h4 id="3url传递参数给视图函数">3.URL传递参数给视图函数</h4>
<p>一个参数views.py</p>
<pre><code class="language-python">def booklist(request,book_id):
    #可以根据数据库中的数据提取book的信息
    text = &quot;您获取的图书的id是：%s&quot; % book_id
    return HttpResponse(text)
</code></pre>
<p>一个参数urls.py</p>
<pre><code class="language-python">from book import booklist
urlpatterns = [
	path(&quot;book/&lt;book_id&gt;&quot;,booklist),
]
</code></pre>
<p>两个参数views.py</p>
<pre><code class="language-python">def booklist(request,book_id,book_name):
    #可以根据数据库中的数据提取book的信息
    text = &quot;您获取的图书的id是：%s ,您的图书的名字是：%s&quot; % (book_id,book_name)
    return HttpResponse(text)
</code></pre>
<p>两个参数urls.py</p>
<pre><code class="language-python">from book import booklist
urlpatterns = [
	path(&quot;book/&lt;book_id&gt;/&lt;book_name&gt;&quot;,booklist),
]
</code></pre>
<h4 id="4查询">4.查询</h4>
<p>views.py</p>
<pre><code class="language-python">def author(request):
	author_id=request.Get.get(&quot;id&quot;)
	text = &quot;作者的id为%s &quot; % author_id
	return HttpResponse(text)
</code></pre>
<p>urls.py</p>
<pre><code class="language-python">	path(&quot;author/&quot;,author)
</code></pre>
<p>查询时<br>
http://192.168.168.141:8000/author/?id=2<br>
<img src="https://img-blog.csdnimg.cn/2020040121074461.png" alt="在这里插入图片描述" loading="lazy"><br>
因为查询字符串使用的是GET请求，所以我们使用request.GET来获取参数，且因为GET是一个类似于字典的数类型，所以获取值跟字典的方式都是一样的</p>
<h4 id="5uuid的使用">5.uuid的使用</h4>
<p>uuid根据实际情况也可以换成int,或者str</p>
<pre><code class="language-python">from book import booklist
urlpatterns = [
	path(&quot;book/&lt;uuid:book_id&gt;&quot;,booklist),
]
</code></pre>
<p>使用uuid，只能访问uuid类型的字符串，其他的都是错误的<br>
在Python环境中导入一个uuid</p>
<pre><code class="language-python">import uuid
print(uuid.uuid4())
</code></pre>
<p>from django.urls import converters<br>
str不能加/，但是改为path就可以显示斜杠，具体使用看converters.py</p>
<h4 id="6url参数的转化器">6.url参数的转化器</h4>
<pre><code class="language-bash">str: 除了/以外的所有字符
int：阿拉伯数字
path:所有字符
uuid:uuid.uuid4()函数返回的格式
slug:英文字母、数字、横杠、下划线
</code></pre>
<h4 id="7url的模块化管理">7.url的模块化管理</h4>
<p>project/urls.py</p>
<pre><code class="language-python">from django.urls import path, include
urlpatterns = [
	path(&quot;book/&gt;&quot;,include(&quot;book.urls&quot;)),
]
</code></pre>
<p>book/urls.py</p>
<pre><code class="language-python">from django.urls import path
from .views import booklist
urlpatterns = [
	path(&quot;&lt;book_id&gt;/&quot;,booklist),
]
</code></pre>
<p>book/views.py</p>
<pre><code class="language-bash">from django.http import HttpResponse
def booklist(request,book_id):
	text = &quot;图书的id为%s &quot; % book_id
	return HttpResponse(text)
</code></pre>
<h4 id="8url命名与反转">8.url命名与反转</h4>
<p>在app的urls.py中添加app_name（应用命名空间），防止每个app的url重复，造成url找不到的情况<br>
front/views.py</p>
<pre><code class="language-python">from django.shortcuts import render,redirect,reverse
from django.http import HttpResponse

def index(request):
    username=request.GET.get(&quot;username&quot;)
    if username:
        return HttpResponse(&quot;这是前台首页&quot;)
    else:
        return redirect(reverse(&quot;front:login&quot;))
def login(request):
    return HttpResponse(&quot;这是前台的登录页面&quot;)
</code></pre>
<p>front/urls.py</p>
<pre><code class="language-python">from django.urls import path
from .views import index,login
app_name=&quot;front&quot;
urlpatterns=[
    path(&quot;&quot;,index),
    path(&quot;signin/&quot;,login,name=&quot;login&quot;),
]
</code></pre>
<h4 id="9应用实例命名空间">9.应用实例命名空间</h4>
<p>不能只制定实例命名空间，没有应用命名空间<br>
project/urls.py</p>
<pre><code class="language-bash">    path(&quot;cms1/&quot;,include(&quot;cms.urls&quot;,namespace=&quot;cms1&quot;)),
    path(&quot;cms2/&quot;,include(&quot;cms.urls&quot;,namespace=&quot;cms2&quot;)),
</code></pre>
<p>app/urls.py</p>
<pre><code class="language-bash">from django.shortcuts import render,reverse,redirect
from django.http import HttpResponse
def index(request):
    username=request.GET.get(&quot;username&quot;)
    if username:
        return HttpResponse(&quot;这是后台首页&quot;)
    else:
        current_namespace=request.resolver_match.namespace
        return redirect(reverse(&quot;%s:login&quot; %current_namespace))
def login(request):
    return HttpResponse(&quot;这是后台的登录页面&quot;)
</code></pre>
<h4 id="10re_path">10.re_path</h4>
<p>urls.py</p>
<pre><code class="language-python">    #P为参数的名字，&lt;year&gt;为类型，\d表示为日期型，{4}表示有4个数字
    #w:0-9,a-z,A-Z
    re_path(r&quot;^list/(?P&lt;year&gt;\d{4}/)&quot;,article_list),
    re_path(r&quot;^list/(?P&lt;year&gt;\d{4})/(?P&lt;month&gt;\d{4})&quot;,article_list_month),
</code></pre>
<p>views.py</p>
<pre><code class="language-python">def article_list(request,year):
    text = &quot;您输入的是第%s年的文章&quot; % year
    return HttpResponse(text)
</code></pre>
<p>此时list后面只能是四位数字<br>
<img src="https://img-blog.csdnimg.cn/20200402191129108.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="11跳转到指定的页面">11.跳转到指定的页面</h4>
<pre><code class="language-python">return redirect(reverse(&quot;&lt;article&gt;/&quot;,kwargs={&quot;article_id&quot;:1}))
</code></pre>
<h4 id="12添加多个标签">12.添加多个标签</h4>
<p>urls.py</p>
<pre><code class="language-python">    re_path(r&quot;list/(?P&lt;catagries&gt;\w+|(\w+\+\w+)+)/&quot;,article_list_lll),
</code></pre>
<p>views.py</p>
<pre><code class="language-python">def article_list_lll(request,catagries):
    text = &quot;您输入的是第%s的文章hhhh &quot; % catagries
    return HttpResponse(text)
</code></pre>
<h4 id="13自定义path">13.自定义path</h4>
<pre><code class="language-bash">from django.urls import converters,register_converter
class CategoryConverter(object):
    regex =r'\w+|(\w+\+\w+)+'
    def to_python(self,value):
        #python+django+flask
        #['python','django','flask']
        result=value.split(&quot;+&quot;)
        return result
    def to_url(self,value):
        #['python','django','flask']
        # python+django+flask
        if isinstance(value,list):
            result = &quot;+&quot;.join(value)
            return result
        else:
            raise RuntimeError(&quot;转换url的时候，分类参数必须为列表&quot;)
#应用命名空间
register_converter(CategoryConverter,'cate')

path(&quot;list/&lt;cate:catagries&gt;&quot;,article_list_lll),

</code></pre>
<p>views.py</p>
<pre><code class="language-bash">def article_list_lll(request,catagries):
    text = &quot;您输入的是第%s的文章hhhh &quot; % catagries
    return HttpResponse(text)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020040221085428.png" alt="在这里插入图片描述" loading="lazy"><br>
如果converters.py是另外的，则需要在init文件中导入converters<br>
<strong>init</strong>.py</p>
<pre><code class="language-python">from . import converters
</code></pre>
<h4 id="14自定义参数">14.自定义参数</h4>
<p>urls.py</p>
<pre><code class="language-bash">    path(&quot;&quot;,movies),
    path(&quot;page/&lt;int:page&gt;&quot;,movies),
</code></pre>
<p>views.py</p>
<pre><code class="language-bash">book_list=[
    &quot;三国演义&quot;,
    &quot;红楼梦&quot;,
    &quot;西游记&quot;,
    &quot;水浒传&quot;,
]
# Create your views here.
# def movie(request,movie_id):
#     text = &quot;电影的id为：%s&quot; % movie_id
#     return HttpResponse(text)

def movies(request,page=0):
    return HttpResponse(book_list[page])
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200402221341463.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200402221414385.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决Django开发中pycharm连接不到虚拟机的问题]]></title>
        <id>https://906571331.github.io/yx.github.io/post/jie-jue-django-kai-fa-zhong-pycharm-lian-jie-bu-dao-xu-ni-ji-de-wen-ti/</id>
        <link href="https://906571331.github.io/yx.github.io/post/jie-jue-django-kai-fa-zhong-pycharm-lian-jie-bu-dao-xu-ni-ji-de-wen-ti/">
        </link>
        <updated>2020-04-02T02:18:36.000Z</updated>
        <content type="html"><![CDATA[<h4 id="出现的问题">出现的问题</h4>
<p>在pycharm连接ubuntu时，出现了：</p>
<pre><code class="language-bash">Connection to '192.168.168.141' failed.
Session.connect：java.netConnectException: Connection timed out connect
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200402101036518.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="解决的方法">解决的方法</h4>
<p>查看虚拟机的ip时，发现虚拟机的ip已经更换，所以在pycharm中，点击工具----&gt;Deployment----&gt;Configuration，以下三处分别改为虚拟机新的ip地址，（我的是从192.168.168.141改为192.168.168.145），点击Test SFTP connection，即可解决连接超时的问题<br>
<img src="https://img-blog.csdnimg.cn/20200402101531809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/2020040210172163.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django常用学习网站]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-chang-yong-xue-xi-wang-zhan/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-chang-yong-xue-xi-wang-zhan/">
        </link>
        <updated>2020-03-31T02:33:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="本篇博客总结了一些django常用的一些学习网站欢迎留言补充">本篇博客总结了一些Django常用的一些学习网站，欢迎留言补充</h3>
<h4 id="1django中文网">1.<a href="https://www.django.cn/">Django中文网</a></h4>
<p>Django中文社区,是一个Django开发者和Django爱好者交流的社区,这里有很多django教程和django技术文档,欢迎广大喜欢Django的朋友加入！django,django教程,django,django社区,django文档,django中文<br>
<img src="https://img-blog.csdnimg.cn/20200331092025348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200331092120796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="2django-rest-framework">2.<a href="https://www.django-rest-framework.org/">django-rest-framework</a></h4>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200331100915981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="3django文档">3.<a href="https://docs.djangoproject.com/zh-hans/2.0/">Django文档</a></h4>
<p>Django 有丰富的文档。一份高度概述的文档会告诉你在哪里找到特定的东西<br>
<img src="https://img-blog.csdnimg.cn/20200331101207485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="4菜鸟教程">4.<a href="https://www.runoob.com/django/django-tutorial.html">菜鸟教程</a></h4>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200331101412255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="5刘江的django教程">5.<a href="https://www.liujiangblog.com/course/django/84">刘江的Django教程</a></h4>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200331101728234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="6w3cschool">6.<a href="https://www.w3cschool.cn/django/">W3Cschool</a></h4>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200331121714837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决Django与echarts结合出现Uncaught SyntaxError: Unexpected token &和&#39;的问题]]></title>
        <id>https://906571331.github.io/yx.github.io/post/jie-jue-django-yu-echarts-jie-he-chu-xian-uncaught-syntaxerror-unexpected-token-andhe-and39de-wen-ti/</id>
        <link href="https://906571331.github.io/yx.github.io/post/jie-jue-django-yu-echarts-jie-he-chu-xian-uncaught-syntaxerror-unexpected-token-andhe-and39de-wen-ti/">
        </link>
        <updated>2020-03-30T13:52:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="出现的问题">出现的问题</h3>
<p>在Django与echarts结合中，出现了<br>
data:[&amp;#39];和Uncaught SyntaxError: Unexpected token &amp;的问题<br>
<img src="https://img-blog.csdnimg.cn/20200330214902150.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200330214925997.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="出错的代码">出错的代码</h3>
<pre><code class="language-bash">    xAxis: {
        type: 'category',
        boundaryGap: false,
        data: {{ name_list}}
    },
</code></pre>
<p>原因是前端页面echarts接收数据时，没有添加|safe</p>
<h3 id="解决的方法">解决的方法</h3>
<p>在echarts页面data接收来自views.py的数据时，加上|safe,具体效果如下：</p>
<pre><code class="language-bash">    xAxis: {
        type: 'category',
        boundaryGap: false,
        data: {{ name_list|safe }}
    },
</code></pre>
<p>重启Django应用即可正确显示echarts图表</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django中引入echarts图表做数据可视化]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-zhong-yin-ru-echarts-tu-biao-zuo-shu-ju-ke-shi-hua/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-zhong-yin-ru-echarts-tu-biao-zuo-shu-ju-ke-shi-hua/">
        </link>
        <updated>2020-03-30T13:45:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="本篇博客将详细介绍django中如何引入echarts库">本篇博客将详细介绍Django中如何引入echarts库：</h3>
<h4 id="从echarts官网中选择所需要的图表的样式">从echarts官网中选择所需要的图表的样式</h4>
<p><img src="https://img-blog.csdnimg.cn/20200330212900765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
选择好样式打开此页面，将红框中代码放入前端页面中<br>
<img src="https://img-blog.csdnimg.cn/2020033021302261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
需要放入的位置：</p>
<pre><code class="language-bash">&lt;script type=&quot;text/javascript&quot;&gt;
var myChart = echarts.init(document.getElementById('chart_1'));
#将option代码放入这个位置
 myChart.setOption(option);   
 &lt;/script&gt;
</code></pre>
<p>在html文件&lt; head&gt;&lt; /head&gt;标签中引入echats库</p>
<pre><code class="language-bash">&lt;script src=&quot;{% static 'js/echarts.min.js' %}&quot;  charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</code></pre>
<p>views.py设置方法,前提是models.py中有User这个表,name和base_ mark是表中的两个字段</p>
<pre><code class="language-bash">def anaylize(request):
    users=User.objects.all()#获取表中的所有对象
    base_list = [] #设置为list类型，一会儿将其填入data中
    name_list= []#设置为list类型，一会儿将其填入data中
    for user in users:# 遍历
        name_list.append(user.name)
        base_list.append(user.base_mark)
    return render(request,&quot;anaylize.html&quot;,{'name_list':name_list,'base_list':base_list})#在anaylize.html中接收两个参数，一个是name_list,一个是base_list
</code></pre>
<p>anaylize.html中data接收的方法：</p>
<h4 id="注意name是字符串对象这里必须加上safe否则将会报错uncaught-syntaxerror-unexpected-token-同时data中的数据被js解析为-39">注意：name是字符串对象，这里必须加上|safe，否则将会报错（Uncaught SyntaxError: Unexpected token &amp;），同时data中的数据被js解析为： &amp; #39;</h4>
<pre><code class="language-bash">    xAxis: {
        type: 'category',
        boundaryGap: false,
        data: {{ name_list|safe }}
    },
</code></pre>
<p>而普通的int型的数据接收方法：（不需要|safe）</p>
<pre><code class="language-bash">    series: [{
        data:{{base_list}},
        type: 'line',
        areaStyle: {}
    }]
</code></pre>
<p>向数据库中输入两条数据，重启Django应用，即可正确显示图表</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用gitee解决github下载仓库下载速度缓慢的问题]]></title>
        <id>https://906571331.github.io/yx.github.io/post/shi-yong-gitee-jie-jue-github-xia-zai-cang-ku-xia-zai-su-du-huan-man-de-wen-ti/</id>
        <link href="https://906571331.github.io/yx.github.io/post/shi-yong-gitee-jie-jue-github-xia-zai-cang-ku-xia-zai-su-du-huan-man-de-wen-ti/">
        </link>
        <updated>2020-03-30T09:55:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="出现的问题">出现的问题</h3>
<p>在github下载代码时总是出现网络延时等问题导致下载失败或下载缓慢</p>
<h3 id="解决的办法">解决的办法</h3>
<p>将github中的仓库导入到gitee中，然后从gitee中下载仓库<br>
复制github中的仓库地址：<br>
<img src="https://img-blog.csdnimg.cn/20200330175055393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
在gitee中新建仓库：<img src="https://img-blog.csdnimg.cn/20200330175256587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
选择导入已有仓库，将刚刚复制的github地址填入<br>
<img src="https://img-blog.csdnimg.cn/20200330175320401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
打开刚刚新建的仓库，点击下载，即可高速下载github中的仓库<br>
<img src="https://img-blog.csdnimg.cn/20200330174943211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阿里云服务器出现  Resource stopwords not found.   Please use the NLTK Downloader to obtain the resource:]]></title>
        <id>https://906571331.github.io/yx.github.io/post/a-li-yun-fu-wu-qi-chu-xian-resource-stopwords-not-found-please-use-the-nltk-downloader-to-obtain-the-resource/</id>
        <link href="https://906571331.github.io/yx.github.io/post/a-li-yun-fu-wu-qi-chu-xian-resource-stopwords-not-found-please-use-the-nltk-downloader-to-obtain-the-resource/">
        </link>
        <updated>2020-03-30T09:22:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="出现的问题">出现的问题</h3>
<p>在阿里云ubuntu服务器布置Django项目中出现如下错误：</p>
<pre><code class="language-bash">  Resource stopwords not found.
  Please use the NLTK Downloader to obtain the resource:
</code></pre>
<p>具体如下所示：</p>
<pre><code class="language-bash">Watching for file changes with StatReloader
Performing system checks...

Exception in thread django-main-thread:
Traceback (most recent call last):
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/nltk/corpus/util.py&quot;, line 86, in __load
    root = nltk.data.find('{}/{}'.format(self.subdir, zip_name))
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/nltk/data.py&quot;, line 701, in find
    raise LookupError(resource_not_found)
LookupError: 
**********************************************************************
  Resource stopwords not found.
  Please use the NLTK Downloader to obtain the resource:

  &gt;&gt;&gt; import nltk
  &gt;&gt;&gt; nltk.download('stopwords')
  
  For more information see: https://www.nltk.org/data.html

  Attempted to load corpora/stopwords.zip/stopwords/

  Searched in:
    - '/root/nltk_data'
    - '/root/.virtualenvs/T/nltk_data'
    - '/root/.virtualenvs/T/share/nltk_data'
    - '/root/.virtualenvs/T/lib/nltk_data'
    - '/usr/share/nltk_data'
    - '/usr/local/share/nltk_data'
    - '/usr/lib/nltk_data'
    - '/usr/local/lib/nltk_data'
**********************************************************************


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/lib/python3.5/threading.py&quot;, line 914, in _bootstrap_inner
    self.run()
  File &quot;/usr/lib/python3.5/threading.py&quot;, line 862, in run
    self._target(*self._args, **self._kwargs)
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/utils/autoreload.py&quot;, line 54, in wrapper
    fn(*args, **kwargs)
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/core/management/commands/runserver.py&quot;, line 117, in inner_run
    self.check(display_num_errors=True)
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/core/management/base.py&quot;, line 390, in check
    include_deployment_checks=include_deployment_checks,
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/core/management/base.py&quot;, line 377, in _run_checks
    return checks.run_checks(**kwargs)
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/core/checks/registry.py&quot;, line 72, in run_checks
    new_errors = check(app_configs=app_configs)
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/core/checks/urls.py&quot;, line 13, in check_url_config
    return check_resolver(resolver)
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/core/checks/urls.py&quot;, line 23, in check_resolver
    return check_method()
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/urls/resolvers.py&quot;, line 399, in check
    for pattern in self.url_patterns:
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/utils/functional.py&quot;, line 80, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/urls/resolvers.py&quot;, line 584, in url_patterns
    patterns = getattr(self.urlconf_module, &quot;urlpatterns&quot;, self.urlconf_module)
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/utils/functional.py&quot;, line 80, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/django/urls/resolvers.py&quot;, line 577, in urlconf_module
    return import_module(self.urlconf_name)
  File &quot;/root/.virtualenvs/T/lib/python3.5/importlib/__init__.py&quot;, line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 986, in _gcd_import
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 969, in _find_and_load
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 958, in _find_and_load_unlocked
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 673, in _load_unlocked
  File &quot;&lt;frozen importlib._bootstrap_external&gt;&quot;, line 665, in exec_module
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 222, in _call_with_frames_removed
  File &quot;/home/recommend_system-master/recommend_system/urls.py&quot;, line 18, in &lt;module&gt;
    import movie_recommend.views
  File &quot;/home/recommend_system-master/movie_recommend/views.py&quot;, line 15, in &lt;module&gt;
    from movie_recommend.load_data import *
  File &quot;/home/recommend_system-master/movie_recommend/load_data.py&quot;, line 19, in &lt;module&gt;
    stoplist = stopwords.words('english')
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/nltk/corpus/util.py&quot;, line 123, in __getattr__
    self.__load()
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/nltk/corpus/util.py&quot;, line 88, in __load
    raise e
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/nltk/corpus/util.py&quot;, line 83, in __load
    root = nltk.data.find('{}/{}'.format(self.subdir, self.__name))
  File &quot;/root/.virtualenvs/T/lib/python3.5/site-packages/nltk/data.py&quot;, line 701, in find
    raise LookupError(resource_not_found)
LookupError: 
**********************************************************************
  Resource stopwords not found.
  Please use the NLTK Downloader to obtain the resource:

  &gt;&gt;&gt; import nltk
  &gt;&gt;&gt; nltk.download('stopwords')
  
  For more information see: https://www.nltk.org/data.html

  Attempted to load corpora/stopwords

  Searched in:
    - '/root/nltk_data'
    - '/root/.virtualenvs/T/nltk_data'
    - '/root/.virtualenvs/T/share/nltk_data'
    - '/root/.virtualenvs/T/lib/nltk_data'
    - '/usr/share/nltk_data'
    - '/usr/local/share/nltk_data'
    - '/usr/lib/nltk_data'
    - '/usr/local/lib/nltk_data'
**********************************************************************
</code></pre>
<h3 id="解决的思路">解决的思路：</h3>
<p>ubuntu中打开python3解释器</p>
<pre><code class="language-bash">  &gt;&gt;&gt;python3 
  &gt;&gt;&gt; import nltk
  &gt;&gt;&gt; nltk.download('stopwords')
</code></pre>
<p>再次重启Django项目即可正确运行</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.]]></title>
        <id>https://906571331.github.io/yx.github.io/post/djangocoreexceptionsimproperlyconfigured-mysqlclient-1313-or-newer-is-required-you-have-093/</id>
        <link href="https://906571331.github.io/yx.github.io/post/djangocoreexceptionsimproperlyconfigured-mysqlclient-1313-or-newer-is-required-you-have-093/">
        </link>
        <updated>2020-03-30T09:06:24.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h3 id="出现的问题">出现的问题：</h3>
<p>阿里云ubuntu服务器Django项目开发中出现</p>
<pre><code class="language-bash">    raise ImproperlyConfigured('mysqlclient 1.3.13 or newer is required; you have %s.' % Database.__version__)
django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.
</code></pre>
<h3 id="解决的思路">解决的思路：</h3>
<h4 id="一修改basepy">一.修改base.py</h4>
<pre><code class="language-bash">cd /root/.virtualenvs/T/lib/python3.5/site-packages/django/db/backends/mysql
</code></pre>
<p>打开base.py</p>
<pre><code class="language-bash">vi base.py
</code></pre>
<p>知道到下图所示位置：<br>
<img src="https://img-blog.csdnimg.cn/20200330165529285.png" alt="在这里插入图片描述" loading="lazy"><br>
将下面两行注释掉，结果如图所示：</p>
<pre><code class="language-bash">version = Database.version_info
#if version &lt; (1, 3, 13):
 #   raise ImproperlyConfigured('mysqlclient 1.3.13 or newer is required; you have %s.' % Database.__version__)
</code></pre>
<h4 id="二修改__init__py">二.修改__init__.py</h4>
<p>添加如下代码：</p>
<pre><code class="language-bash">import pymysql
pymysql.install_as_MySQLdb()
</code></pre>
<p>第二步完成之后若出现如下报错，则进行第三步：</p>
<pre><code class="language-bash">    query = query.decode(errors='replace')
AttributeError: 'str' object has no attribute 'decode'
</code></pre>
<h4 id="第三步修改operationspy">第三步.修改operations.py</h4>
<p>打开operations.py所在的文件夹</p>
<pre><code class="language-bash">cd /root/.virtualenvs/T/lib/python3.5/site-packages/django/db/backends/mysql/
</code></pre>
<p>打开operations.py，并找到如下代码</p>
<pre><code class="language-bash">        if query is not None:
            query = query.decode(errors='replace')
        return query
</code></pre>
<p>修改decode为enconde,结果如图所示：</p>
<pre><code class="language-bash">        if query is not None:
            query = query.encode(errors='replace')
        return query
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200330170302985.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="第四步迁移数据库">第四步：迁移数据库</h4>
<pre><code class="language-bash">python manage.py makemigrations
python manage.py migrate
</code></pre>
<h4 id="重启django项目">重启Django项目：</h4>
<pre><code class="language-bash">python manage.py runserver 0:8000
</code></pre>
]]></content>
    </entry>
</feed>