<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://906571331.github.io/yx.github.io/</id>
    <title>WuXin</title>
    <updated>2020-05-08T08:36:27.997Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://906571331.github.io/yx.github.io/"/>
    <link rel="self" href="https://906571331.github.io/yx.github.io/atom.xml"/>
    <subtitle>成千上万个门口，总有一个人要先走。</subtitle>
    <logo>https://906571331.github.io/yx.github.io/images/avatar.png</logo>
    <icon>https://906571331.github.io/yx.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, WuXin</rights>
    <entry>
        <title type="html"><![CDATA[阿里云ubuntu安装pandas时报错Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-build-hm]]></title>
        <id>https://906571331.github.io/yx.github.io/post/EeOU9ISeC/</id>
        <link href="https://906571331.github.io/yx.github.io/post/EeOU9ISeC/">
        </link>
        <updated>2020-05-08T08:24:51.000Z</updated>
        <content type="html"><![CDATA[<p>阿里云ubuntu安装pandas时报错Command &quot;python setup.py egg_info&quot; failed with error code 1 in /tmp/pip-build-hmsdpo52/pandas/</p>
<pre><code class="language-bash">Collecting pandas
  Downloading http://mirrors.cloud.aliyuncs.com/pypi/packages/2f/79/f236ab1cfde94bac03d7b58f3f2ab0b1cc71d6a8bda3b25ce370a9fe4ab1/pandas-1.0.3.tar.gz (5.0MB)
    100% |████████████████████████████████| 5.0MB 43.7MB/s 
    Complete output from command python setup.py egg_info:
    Traceback (most recent call last):
      File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
      File &quot;/tmp/pip-build-hmsdpo52/pandas/setup.py&quot;, line 42
        f&quot;numpy &gt;= {min_numpy_ver}&quot;,
                                  ^
    SyntaxError: invalid syntax
    
    ----------------------------------------
Command &quot;python setup.py egg_info&quot; failed with error code 1 in /tmp/pip-build-hmsdpo52/pandas/
You are using pip version 8.1.1, however version 20.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.

</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200508161534370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
解决方案：</p>
<pre><code class="language-bash">python -m pip install --upgrade pip
</code></pre>
<p>再次使用pip安装时即可正确安装pandas</p>
<pre><code class="language-bash">pip install pandas
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jupyter重启失败KernelRestarter: restart failed]]></title>
        <id>https://906571331.github.io/yx.github.io/post/q26mrxlK2/</id>
        <link href="https://906571331.github.io/yx.github.io/post/q26mrxlK2/">
        </link>
        <updated>2020-05-07T03:53:45.000Z</updated>
        <content type="html"><![CDATA[<h4 id="在jupyter启动时候发现出现了如下错误">在jupyter启动时候发现出现了如下错误：</h4>
<pre><code class="language-python">[W 11:33:41.703 NotebookApp] KernelRestarter: restart failed
[W 11:33:41.703 NotebookApp] Kernel cbc82194-2371-4227-87cf-859364cc09d4 died, removing from map.
[W 11:34:26.889 NotebookApp] Timeout waiting for kernel_info reply from cbc82194-2371-4227-87cf-859364cc09d4
[E 11:34:26.892 NotebookApp] Error opening stream: HTTP 404: Not Found (Kernel does not exist: cbc82194-2371-4227-87cf-859364cc09d4)
[W 11:34:28.140 NotebookApp] 404 GET /api/kernels/cbc82194-2371-4227-87cf-859364cc09d4/channels?session_id=9614948d3c004c2b8060d1f5e165db71 (36.102.210.157): Kernel does not exist: cbc82194-2371-4227-87cf-859364cc09d4
</code></pre>
<p>浏览器中打开后发现：未能连接成功<br>
<img src="https://img-blog.csdnimg.cn/20200507114453589.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="解决方案">解决方案：</h4>
<pre><code class="language-python">pip install --upgrade ipykerne
</code></pre>
<p>发现继续报错：</p>
<pre><code class="language-bash">(jiqistudy) root@iZ2zeemzp51mlbzarwptwwZ:~/algorithm# pip install --upgrade ipykernel
Looking in indexes: http://mirrors.cloud.aliyuncs.com/pypi/simple/
Requirement already up-to-date: ipykernel in /root/.virtualenvs/jiqistudy/lib/python3.5/site-packages (5.2.1)
Requirement already satisfied, skipping upgrade: jupyter-client in /root/.virtualenvs/jiqistudy/lib/python3.5/site-packages (from ipykernel) (6.1.3)
Requirement already satisfied, skipping upgrade: ipython&gt;=5.0.0 in /root/.virtualenvs/jiqistudy/lib/python3.5/site-packages (from ipykernel) (7.14.0)
ERROR: Package 'ipython' requires a different Python: 3.5.2 not in '&gt;=3.6'
</code></pre>
<p><code>ERROR: Package 'ipython' requires a different Python: 3.5.2 not in '&gt;=3.6'</code><br>
<img src="https://img-blog.csdnimg.cn/20200507114750743.png" alt="在这里插入图片描述" loading="lazy"><br>
查看包的版本：</p>
<pre><code class="language-python">pip list
</code></pre>
<p>卸载ipython包，重新安装ipython</p>
<pre><code class="language-bash">pip ubinstall ipython #卸载之前的ipython包
pip install ipython #重新安装ipython包，ubuntu会自动识别应该安装的包的版本
</code></pre>
<p>退出虚拟环境，重新进入文件目录，重启jupter</p>
<pre><code class="language-bash">deactivate
(jiqistudy) root@iZ2zeemzp51mlbzarwptwwZ:~/algorithm# jupyter notebook --allow-root
</code></pre>
<p>重启服务，连接成功！<br>
<img src="https://img-blog.csdnimg.cn/20200507115232275.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ubuntu安装虚拟环境]]></title>
        <id>https://906571331.github.io/yx.github.io/post/PSPGdyPC3/</id>
        <link href="https://906571331.github.io/yx.github.io/post/PSPGdyPC3/">
        </link>
        <updated>2020-05-07T00:54:04.000Z</updated>
        <content type="html"><![CDATA[<h4 id="1在ubuntu中安装虚拟环境">1.在ubuntu中安装虚拟环境</h4>
<pre><code class="language-python">#安装virtualv包
sudo apt-get install virtualenv 
#安装virtualvwrapper包
sudo apt-get install virtualenvwrapper 
#运行virtualenvwrapper.sh
source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
</code></pre>
<h4 id="2验证虚拟环境是否安装成功并创建一个新的虚拟环境">2.验证虚拟环境是否安装成功并创建一个新的虚拟环境</h4>
<pre><code class="language-python">#创建一个新的虚拟环境
mkvirtualenv --python=/usr/bin/python3 [虚拟环境名称]  
 #应用虚拟环境
workon [虚拟环境名称]
</code></pre>
<h4 id="其他命令">其他命令</h4>
<pre><code class="language-python">#查看所有的虚拟环境
workon +Tab键 +Tab键
#退出当前虚拟环境
deactivate [虚拟环境名称]
#删除虚拟环境
rmvirtualenv [虚拟环境名称]
#列出所有的虚拟环境
lsvirtualenv [虚拟环境名称]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阿里云服务器下jupyter notebook 安装、远程访问以及处理错误]]></title>
        <id>https://906571331.github.io/yx.github.io/post/4dpJZ8owu/</id>
        <link href="https://906571331.github.io/yx.github.io/post/4dpJZ8owu/">
        </link>
        <updated>2020-05-06T14:51:49.000Z</updated>
        <content type="html"><![CDATA[<h4 id="一安装所需的环境">一.安装所需的环境</h4>
<ol>
<li>首先需要在<a href="https://blog.csdn.net/qq_42092076/article/details/105549408">ubuntu安装虚拟环境</a>，点击链接即可查看如何在ubuntu中安装虚拟环境</li>
</ol>
<pre><code class="language-python">1.	在虚拟环境中安装jupyter
(jiqistudy)&gt; pip install jupyter -i  https://pypi.tuna.tsinghua.edu.cn/simple/
2.	安装所需的python库
(jiqistudy)&gt; pip install numpy -i  https://pypi.tuna.tsinghua.edu.cn/simple/
(jiqistudy)&gt; pip install matplotlib -i https://pypi.tuna.tsinghua.edu.cn/simple/
(jiqistudy)&gt; pip install pandas -i  https://pypi.tuna.tsinghua.edu.cn/simple/
(jiqistudy)&gt; pip install sklearn -i  https://pypi.tuna.tsinghua.edu.cn/simple/
3.	创建目标目录并进入
(jiqistudy)&gt; mkdir algorithm
(jiqistudy)&gt; cd algorithm
4.	启动jupyter notebook
(jiqistudy)&gt; jupyter notebook
</code></pre>
<h4 id="二-jupyter远程访问配置">二、jupyter远程访问配置</h4>
<p>1、生成配置文件（~/.jupyter/jupyter_notebook_config.py）</p>
<pre><code class="language-python">jupyter notebook --generate-config
</code></pre>
<p>2、生成密钥</p>
<pre><code class="language-python">jupyter notebook password  # 自己造一个密码输入一确认一次
vim ~/.jupyter/jupyter_notebook_config.json
</code></pre>
<p>记下密钥，sha1:...<br>
3、编辑配置文件</p>
<pre><code class="language-python">vim ~/.jupyter/jupyter_notebook_config.py
</code></pre>
<p>修改以下几项：</p>
<pre><code class="language-python">c.NotebookApp.ip='*'                                  # 就是设置所有ip皆可访问  
c.NotebookApp.password = u'sha1:03...       # 刚才复制的那个密文'  
c.NotebookApp.open_browser = False       # 禁止自动打开浏览器  
c.NotebookApp.port =1234                         #随便指定一个端口  
</code></pre>
<p>设置端口后要在阿里云控制台把这个端口打开<br>
<img src="https://img-blog.csdnimg.cn/20200506224226754.png" alt="在这里插入图片描述" loading="lazy"><br>
在浏览器中输入：公网ip:刚刚指定的端口，输入密码，即可进入<br>
<img src="https://img-blog.csdnimg.cn/20200506224300542.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200506224417486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<code>注</code>：若出现错误</p>
<pre><code class="language-python">OSError: [Errno 99]Cannot assign requested address
</code></pre>
<p>解决方法修改/etc/hosts<br>
首先获取本机内网ip和本机hostname</p>
<pre><code class="language-python">ifconfig    # 获取本机内网ip
vi /etc/hostname    # 获取hostname
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200506224605998.png" alt="在这里插入图片描述" loading="lazy"><br>
进入/etc/hosts，添加上一行内容</p>
<pre><code class="language-python">内网ip   hostname   # 上面获取的那两个
</code></pre>
<p>启动：</p>
<pre><code class="language-python">启动jupyter notebook
(jiqistudy)&gt; jupyter notebook
</code></pre>
<p><code>若出现如下错误，请参考：</code><br>
1.<a href="https://blog.csdn.net/qq_42092076/article/details/105961463">workon: command not found处理方法</a><br>
2.<a href="https://blog.csdn.net/qq_42092076/article/details/105960519">ubuntu安装matplotlib时报错处理</a><br>
3.<a href="https://blog.csdn.net/qq_42092076/article/details/105969420">jupyter重启失败KernelRestarter: restart failed</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[workon: command not found处理方法]]></title>
        <id>https://906571331.github.io/yx.github.io/post/8i0Lx-8dx/</id>
        <link href="https://906571331.github.io/yx.github.io/post/8i0Lx-8dx/">
        </link>
        <updated>2020-05-06T14:35:31.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-python">$ workon django
$ workon: command not found
</code></pre>
<p>以前安装了虚拟环境，但是使用workon时发现命令不存在，处理方法：重新激活虚拟环境</p>
<pre><code class="language-python"> source /usr/share/virtualenvwrapper/virtualenvwrapper.sh 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ubuntu安装matplotlib时报错处理]]></title>
        <id>https://906571331.github.io/yx.github.io/post/1Ff4JgIDs/</id>
        <link href="https://906571331.github.io/yx.github.io/post/1Ff4JgIDs/">
        </link>
        <updated>2020-05-06T14:32:43.000Z</updated>
        <content type="html"><![CDATA[<p>阿里云安装matplotlib时出现如下错误：</p>
<pre><code class="language-python">(jiqistudy) root@iZ2zeemzp51mlbzarwptwwZ:~# pip install matplotlib
Collecting matplotlib
  Downloading http://mirrors.cloud.aliyuncs.com/pypi/packages/4a/30/eb8e7dd8e3609f05c6920fa82f189302c832e5a0f6667aa96f952056bc0c/matplotlib-3.2.1.tar.gz (40.3MB)
    100% |████████████████████████████████| 40.3MB 29.3MB/s 
    Complete output from command python setup.py egg_info:
    Traceback (most recent call last):
      File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
      File &quot;/tmp/pip-build-c_f1ecmg/matplotlib/setup.py&quot;, line 139
        raise IOError(f&quot;Failed to download jquery-ui.  Please download &quot;
                                                                       ^
    SyntaxError: invalid syntax
    
    ----------------------------------------
Command &quot;python setup.py egg_info&quot; failed with error code 1 in /tmp/pip-build-c_f1ecmg/matplotlib/
You are using pip version 8.1.1, however version 20.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
</code></pre>
<p>解决方案：</p>
<pre><code class="language-python">pip install --upgrade setuptools
python -m pip install --upgrade pip
</code></pre>
<p>再次安装matplotlib时就不会报错</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jsp使用request.getParameter时显示乱码的解决方案]]></title>
        <id>https://906571331.github.io/yx.github.io/post/nBa-pdlbR/</id>
        <link href="https://906571331.github.io/yx.github.io/post/nBa-pdlbR/">
        </link>
        <updated>2020-05-03T06:58:34.000Z</updated>
        <content type="html"><![CDATA[<p>Tomcat 7在使用request.getParameter获取前面页面传来的参数值时，会出现乱码的现象，解决方案有两种：<br>
<code>1</code>:使用：</p>
<pre><code class="language-java">&lt;%=new String(request.getParameter(&quot;username&quot;).getBytes(&quot;iso-8859-1&quot;),&quot;UTF-8&quot;) %&gt;
</code></pre>
<p>代替：</p>
<pre><code class="language-java">&lt;%=request.getParameter(&quot;username&quot;) %&gt;
</code></pre>
<p><code>2</code>或者修改server.xml文件，找到此文件，进行修改<br>
<img src="https://img-blog.csdnimg.cn/20200503145111100.png" alt="在这里插入图片描述" loading="lazy"><br>
将<code>useBodyEncodingForURI=&quot;true&quot;</code>改为<code>useBodyEncodingForURI=&quot;false&quot;</code>，效果如图所示：</p>
<pre><code class="language-java">&lt;Connector URIEncoding=&quot;UTF-8&quot; connectionTimeout=&quot;20000&quot; port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot; useBodyEncodingForURI=&quot;false&quot;/&gt;
</code></pre>
<p><code>useBodyEncodingForURI</code>参数表示是否用<code>request.setCharacterEncoding</code>参数对URL提交的数据和表单中GET方式提交的数据进行重新编码，在默认情况下，该参数为<code>false</code>。<br>
URIEncoding参数指定对所有GET方式请求进行统一的重新编码（解码）的编码。<br>
<code>JSP</code>中其他常见的问题<br>
<code>1</code><a href="https://blog.csdn.net/qq_42092076/article/details/104790088">解决jsp开发中eclipse无法创建Dynamic web project</a></p>
<p><code>2</code><a href="https://blog.csdn.net/qq_42092076/article/details/104789471">解决JSP开发中出现的Tomcat启动时闪退的问题</a></p>
<p><code>3</code><a href="https://blog.csdn.net/qq_42092076/article/details/104936671">JSP开发中tomcat访问URL带有中文名称的HTML文件显示404错误</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django获取各种形式的表单内容]]></title>
        <id>https://906571331.github.io/yx.github.io/post/y4MYiiqzl/</id>
        <link href="https://906571331.github.io/yx.github.io/post/y4MYiiqzl/">
        </link>
        <updated>2020-04-27T11:16:45.000Z</updated>
        <content type="html"><![CDATA[<p>Django框架获取各种form表单数据</p>
<h4 id="1django中获取textpassword">1.Django中获取text，password</h4>
<pre><code class="language-python">　　名字：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br&gt;&lt;br&gt;
　　密码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;
</code></pre>
<p>Form表单提交数据时使用的是post方式，所以在后端接收参数的时候需要先判断请求方式为post时才能请求到数据</p>
<pre><code class="language-python">　　name = request.POST.get('name')
　　password = request.POST.get('password')
</code></pre>
<h4 id="2django中获取单选框">2.Django中获取单选框</h4>
<pre><code class="language-python">　　性别：&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;man&quot;&gt;男
　　　　&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;woman&quot;&gt;女
　　　　#此时获取到的值是woman或者man
　　　　gender = request.POST.get('gender')
</code></pre>
<h4 id="3django中获取单选的复选框">3.Django中获取单选的复选框</h4>
<p>单选复选框：<input type="checkbox" name="is_tuanyuan" value="is_tuanyuan">是否是团员</p>
<p>此时如果选中该选项，获取到的值是value后面的，若没有选中即是None</p>
<pre><code class="language-python">　　is_tuanyuan = request.POST.get('is_tuanyuan')
</code></pre>
<p>Django中获取复选框</p>
<pre><code class="language-python">　　复选框：&lt;input type=&quot;checkbox&quot; name=&quot;joy&quot; value=&quot;sing&quot;&gt;唱歌

　　　　　　&lt;input type=&quot;checkbox&quot; name=&quot;joy&quot; value=&quot;dance&quot;&gt;跳舞
</code></pre>
<p>这里应该使用getlist获取多选框，获取到的是列表形式，用get获取只能得到最后一个选项</p>
<pre><code class="language-python">　　joy = request.POST.getlist('joy')
</code></pre>
<h4 id="4django中获取单选下拉框">4.Django中获取单选下拉框</h4>
<p>去过哪些城市？单选</p>
<pre><code class="language-python">　　&lt;select name=&quot;city&quot;&gt;
　　　　&lt;option&gt;北京&lt;/option&gt;
　　　　&lt;option&gt;天津&lt;/option&gt;
　　　　&lt;option&gt;南京&lt;/option&gt;
　　&lt;/select&gt;
</code></pre>
<p>这里获取到的就直接是option里面的内容</p>
<pre><code class="language-python">　　city = request.POST.get('city')
</code></pre>
<p>Django中获取多选的下拉框</p>
<pre><code class="language-python">#去过哪些城市？多选
　　&lt;select multiple name=&quot;more_city&quot;&gt;
　　　　&lt;option&gt;北京&lt;/option&gt;
　　　　&lt;option&gt;天津&lt;/option&gt;
　　　　&lt;option&gt;南京&lt;/option&gt;
　　&lt;/select&gt;
</code></pre>
<p>这里涉及到多个值得获取，需要使用getlist，获取到的是列表，get依然只能获取到一个值，用户在使用时按住Ctrl即可以实现多选</p>
<pre><code class="language-python">　　 more_city = request.POST.getlist('more_city') 
</code></pre>
<h4 id="5django中获取文本域">5.Django中获取文本域</h4>
<pre><code class="language-python">　　&lt;textarea name=&quot;more_text&quot; placeholder=&quot;请输入备注&quot;&gt;&lt;/textarea&gt;
</code></pre>
<p>获取方法：</p>
<pre><code class="language-python">　　more_text = request.POST.get('more_text')
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ueditor在Django中的使用]]></title>
        <id>https://906571331.github.io/yx.github.io/post/4y-2Nv7x-/</id>
        <link href="https://906571331.github.io/yx.github.io/post/4y-2Nv7x-/">
        </link>
        <updated>2020-04-27T09:10:16.000Z</updated>
        <content type="html"><![CDATA[<p>在修改models.py中的字段后，需要进行数据库的迁移</p>
<pre><code class="language-python">#urls.py
path('ueditor/',include('DjangoUeditor.urls' )),
</code></pre>
<pre><code class="language-python">#adminx.py
class QuestionAdmin(object):
	#可以显示的列
    list_display=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #查找的设置
    search_fields=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #过滤器的设置
    list_filter=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #可以在当前页面编辑的列，当后台设置为ueditor时，这里设置为不能修改，否则会报错
    #list_editable=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    model_icon=&quot;fa fa-bath&quot;
    #将statements字段设置为ueditor类型
    style_fields = {&quot;statments&quot;: &quot;ueditor&quot;}
</code></pre>
<pre><code class="language-python">#models.py中的设置：
from DjangoUeditor.models import UEditorField
class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	# statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	statments = UEditorField(verbose_name=u'题目描述', width=600, height=300, imagePath=&quot;exam/ueditor/&quot;,
						  filePath=&quot;exam/ueditor/&quot;, default='')
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;题目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments
</code></pre>
<pre><code class="language-html">        {#每一道题的描述#}
        &lt;td&gt;{% autoescape off %}
             {{ foo.statments}}
             {% endautoescape %}&lt;/td&gt;
           &lt;br&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200427171242288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Django中引入日志功能：]]></title>
        <id>https://906571331.github.io/yx.github.io/post/XOKY2QSij/</id>
        <link href="https://906571331.github.io/yx.github.io/post/XOKY2QSij/">
        </link>
        <updated>2020-04-27T07:39:16.000Z</updated>
        <content type="html"><![CDATA[<p><code>在Django中引入日志功能：</code><br>
<code>1.</code>在settings.py中加入以下代码：</p>
<pre><code class="language-python">LOGGING = {
    # 版本
    'version': 1,
    # 是否禁用已存在的日志器
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'formrat': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, &quot;logs/user.log&quot;),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],
            'propagate': True,
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
</code></pre>
<p><code>2.</code>新建一个名为logs的文件夹，重新启动Django项目即可将日志记录到user.logs的文件中</p>
]]></content>
    </entry>
</feed>