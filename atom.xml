<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://906571331.github.io/yx.github.io/</id>
    <title>WuXin</title>
    <updated>2020-04-23T10:50:59.184Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://906571331.github.io/yx.github.io/"/>
    <link rel="self" href="https://906571331.github.io/yx.github.io/atom.xml"/>
    <subtitle>成千上万个门口，总有一个人要先走。</subtitle>
    <logo>https://906571331.github.io/yx.github.io/images/avatar.png</logo>
    <icon>https://906571331.github.io/yx.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, WuXin</rights>
    <entry>
        <title type="html"><![CDATA[Django实现考试系统]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-shi-xian-kao-shi-xi-tong/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-shi-xian-kao-shi-xi-tong/">
        </link>
        <updated>2020-04-23T10:50:26.000Z</updated>
        <content type="html"><![CDATA[<p><code>时间：2020年4月23日17:58:01</code><br>
Django实现考试系统</p>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
from .models import Question,Exam,Subject,Mark
from django.db import models

# Create your views here.
class ExamView(View):
    def get(self,request):
        #获取id=1的科目
        subjetcs1=Subject.objects.get(id=1)
        #打印这个科目的名称，可省去
        print(subjetcs1)
        #获取到这个科目下的所有试题
        question=Question.objects.filter(subject=subjetcs1)
        context={
            &quot;question&quot;:question,
        }
        return render(request, &quot;exam03.html&quot;,context=context)
    def post(self,request):
        #设置用户答案为一个空列表
        if request.user.is_authenticated:
            # uid=request.user.id
            uid = request.user
            uname=request.user.nick_name
        subjetcs1 = Subject.objects.get(id=1)
        current_exam=Exam.objects.get(id=1)
        print(&quot;本次考试的科目为：&quot;,subjetcs1)
        print(&quot;本次考试名称为：&quot;, current_exam)
        print(uid)
        print(uname)
        my_answer = []
        #依次从前端的答案中读取用户的选择，一共3道题，所以，这里的4应该手动修改
        for i in range(1,4):
            answer1 = request.POST.get('%s'%i)
            my_answer.append(answer1)
            i+=1
        print(&quot;用户答案为：&quot;,my_answer)
        # 打印所有题目的正确答案
        correct_answer=re(request)
        print(&quot;正确答案为：&quot;,correct_answer)
        #基础，提升，专业分数,总分数均初始化为0
        base_mark=0
        promote_mark=0
        major_mark=0
        total_mark=0
        i=0
        while i &lt;= 2:
            if i &lt;= 0:
                if correct_answer[i] == my_answer[i]:
                    base_mark += 1
                    total_mark = total_mark + 1
            elif i &lt;= 1:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    promote_mark += 1
            else:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    major_mark += 1
            i = i + 1
        print(&quot;总分数为：&quot;, total_mark)
        print(&quot;基础分数为：&quot;, base_mark)
        print(&quot;提升分数为：&quot;, promote_mark)
        print(&quot;专业分数为：&quot;, major_mark)
        mark=Mark(user=uid,subject=subjetcs1,total_mark=total_mark,exam=current_exam,base_mark=base_mark,promote_mark=promote_mark,major_mark=major_mark)
        mark.save()
        return render(request,'commite_succcess.html')
#打印所有题目的正确答案
def re(request):
    option_list = []
    options=Question.objects.all()
    for option in options:
        option_list.append(option.correct_op)
    return option_list

</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from datetime import datetime
# Create your models here.
from django.db import models
from users.models import UserProfile
# Create your models here.

#科目
class Subject(models.Model):
	name 			= models.CharField(max_length=255,verbose_name=&quot;科目名称&quot;)
	description 	= models.TextField(verbose_name=&quot;科目描述&quot;)
	cover_image 	= models.ImageField(upload_to = 'cover/',blank=True)
	class Meta:
		verbose_name=&quot;科目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;题目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments


class Exam(models.Model):
	user = models.ForeignKey(UserProfile,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	name = models.CharField(max_length=100,blank=True,verbose_name=&quot;本次考试名称&quot;)
	class Meta:
		verbose_name=&quot;考试&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Mark(models.Model):
	user = models.ForeignKey(UserProfile,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	exam = models.ForeignKey(Exam,on_delete=models.CASCADE,verbose_name=&quot;考试名称&quot;)
	total_mark = models.CharField(max_length=10,verbose_name=&quot;总分数&quot;)
	base_mark = models.CharField(max_length=10,verbose_name=&quot;基础分数&quot;)
	promote_mark = models.CharField(max_length=10,verbose_name=&quot;提升分数&quot;)
	major_mark = models.CharField(max_length=10,verbose_name=&quot;专业分数&quot;)
	class Meta:
		verbose_name=&quot;分数&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.total_mark

# # class Rank(models.Model):
# # 	pass

</code></pre>
<pre><code class="language-python">#urls.py
from django.urls import path
from .views import ExamView
app_name = &quot;exam&quot;
urlpatterns=[
    path(&quot;exam01/&quot;,ExamView.as_view(),name='exam_start'),
]
</code></pre>
<pre><code class="language-python">#adminx.py
from django.shortcuts import render
import xadmin
from .models import *
from users.models import UserProfile
from xadmin import views

class SubjectAdmin(object):
	#可以显示的列
    list_display=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #查找的设置
    search_fields=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #过滤器的设置
    list_filter=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    model_icon=&quot;fa fa-bath&quot;
class QuestionAdmin(object):
	#可以显示的列
    list_display=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #查找的设置
    search_fields=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #过滤器的设置
    list_filter=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    model_icon=&quot;fa fa-bath&quot;
class ExamAdmin(object):
	#可以显示的列
    list_display=[&quot;subject&quot;,&quot;name&quot;]
    #查找的设置
    search_fields=[&quot;subject&quot;,&quot;name&quot;]
    #过滤器的设置
    list_filter=[&quot;subject&quot;,&quot;name&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;subject&quot;,&quot;name&quot;]
    model_icon=&quot;fa fa-bath&quot;
class MarkAdmin(object):
	#可以显示的列
    list_display=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #查找的设置
    search_fields=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #过滤器的设置
    list_filter=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;]
    model_icon=&quot;fa fa-bath&quot;
xadmin.site.register(Subject, SubjectAdmin)
xadmin.site.register(Question, QuestionAdmin)
xadmin.site.register(Exam, ExamAdmin)
xadmin.site.register(Mark, MarkAdmin)
</code></pre>
<pre><code class="language-html">{% extends 'base.html' %}
{% load staticfiles %}
{% block title %}考试页面{% endblock %}
{% block custom_css %}
{% endblock %}
&lt;!--正文--&gt;
{% block content %}

&lt;form action=&quot;&quot; method=&quot;post&quot; class=&quot;exam_form&quot; style=&quot;font-family: 微软雅黑;font-size: 20px;&quot; align=&quot;center&quot;&gt;
{#    csrf_token保护#}
    {% csrf_token %}
    {#循环读出所有的试题#}
    {% for foo in question %}
       &lt;tr&gt;
        {#每一道题的描述#}
        &lt;td&gt;{{ foo.statments}}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_A }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_B }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_C }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_D }}&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
        &lt;br&gt;
    &lt;/tr&gt;
    {% endfor %}
    &lt;input type=&quot;submit&quot; name=&quot;exam&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
{% endblock %}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200423180130674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="后台数据可视化">后台数据可视化</h4>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
from .models import Question,Exam,Subject,Mark
from django.db import models

# Create your views here.
class ExamView(View):
    def get(self,request):
        #获取id=1的科目
        subjetcs1=Subject.objects.get(id=1)
        #打印这个科目的名称，可省去
        print(subjetcs1)
        #获取到这个科目下的所有试题
        question=Question.objects.filter(subject=subjetcs1)
        context={
            &quot;question&quot;:question,
        }
        return render(request, &quot;exam03.html&quot;,context=context)
    def post(self,request):
        #设置用户答案为一个空列表
        if request.user.is_authenticated:
            # uid=request.user.id
            uid = request.user
            uname=request.user.nick_name
        subjetcs1 = Subject.objects.get(id=1)
        current_exam=Exam.objects.get(id=1)
        print(&quot;本次考试的科目为：&quot;,subjetcs1)
        print(&quot;本次考试名称为：&quot;, current_exam)
        print(uid)
        print(uname)
        my_answer = []
        #依次从前端的答案中读取用户的选择，一共3道题，所以，这里的4应该手动修改
        for i in range(1,4):
            answer1 = request.POST.get('%s'%i)
            my_answer.append(answer1)
            i+=1
        print(&quot;用户答案为：&quot;,my_answer)
        # 打印所有题目的正确答案
        correct_answer=re(request)
        print(&quot;正确答案为：&quot;,correct_answer)
        #基础，提升，专业分数,总分数均初始化为0
        base_mark=0
        promote_mark=0
        major_mark=0
        total_mark=0
        i=0
        while i &lt;= 2:
            if i &lt;= 0:
                if correct_answer[i] == my_answer[i]:
                    base_mark += 1
                    total_mark = total_mark + 1
            elif i &lt;= 1:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    promote_mark += 1
            else:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    major_mark += 1
            i = i + 1
        print(&quot;总分数为：&quot;, total_mark)
        print(&quot;基础分数为：&quot;, base_mark)
        print(&quot;提升分数为：&quot;, promote_mark)
        print(&quot;专业分数为：&quot;, major_mark)
        mark=Mark(user=uid,subject=subjetcs1,total_mark=total_mark,exam=current_exam,base_mark=base_mark,promote_mark=promote_mark,major_mark=major_mark)
        mark.save()
        return render(request,'commite_succcess.html')
#打印所有题目的正确答案
def re(request):
    option_list = []
    options=Question.objects.all()
    for option in options:
        option_list.append(option.correct_op)
    return option_list

# Create your views here.

</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from datetime import datetime
# Create your models here.
from django.db import models
from users.models import UserProfile
# Create your models here.

#科目
class Subject(models.Model):
	name 			= models.CharField(max_length=255,verbose_name=&quot;科目名称&quot;)
	description 	= models.TextField(verbose_name=&quot;科目描述&quot;)
	cover_image 	= models.ImageField(upload_to = 'cover/',blank=True)
	class Meta:
		verbose_name=&quot;科目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;题目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments


class Exam(models.Model):
	user = models.ForeignKey(UserProfile,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	name = models.CharField(max_length=100,blank=True,verbose_name=&quot;本次考试名称&quot;)
	class Meta:
		verbose_name=&quot;考试&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Mark(models.Model):
	user = models.ForeignKey(UserProfile,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	exam = models.ForeignKey(Exam,on_delete=models.CASCADE,verbose_name=&quot;考试名称&quot;)
	total_mark = models.CharField(max_length=10,verbose_name=&quot;总分数&quot;)
	base_mark = models.CharField(max_length=10,verbose_name=&quot;基础分数&quot;)
	promote_mark = models.CharField(max_length=10,verbose_name=&quot;提升分数&quot;)
	major_mark = models.CharField(max_length=10,verbose_name=&quot;专业分数&quot;)
	class Meta:
		verbose_name=&quot;分数&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.total_mark

# # class Rank(models.Model):
# # 	pass
class Keshi(models.Model):
    keshi = models.CharField(max_length=10, verbose_name=&quot;分数可视化&quot;)
    class Meta:
        verbose_name = &quot;分数可视化&quot;
        verbose_name_plural = verbose_name

</code></pre>
<pre><code class="language-python">#adminx.py
from django.shortcuts import render
import xadmin
from .models import *
from users.models import UserProfile
from xadmin import views
from xadmin.views import CommAdminView
class SubjectAdmin(object):
	#可以显示的列
    list_display=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #查找的设置
    search_fields=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #过滤器的设置
    list_filter=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    model_icon=&quot;fa fa-bath&quot;
class QuestionAdmin(object):
	#可以显示的列
    list_display=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #查找的设置
    search_fields=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #过滤器的设置
    list_filter=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    model_icon=&quot;fa fa-bath&quot;
class ExamAdmin(object):
	#可以显示的列
    list_display=[&quot;subject&quot;,&quot;name&quot;]
    #查找的设置
    search_fields=[&quot;subject&quot;,&quot;name&quot;]
    #过滤器的设置
    list_filter=[&quot;subject&quot;,&quot;name&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;subject&quot;,&quot;name&quot;]
    model_icon=&quot;fa fa-bath&quot;
class MarkAdmin(object):
	#可以显示的列
    list_display=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #查找的设置
    search_fields=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #过滤器的设置
    list_filter=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;]
    model_icon=&quot;fa fa-bath&quot;


class ChangeIntoAdmin(object):
    # 指向自定义的页面
    object_list_template = 'mark_001.html'
    # 重写方法，把要展示的数据更新到 context
    def get_context(self):
        context = CommAdminView.get_context(self)
        #获取所有的用户
        exams = Mark.objects.all()
        #获取用户的一个属性，将显示到
        base_list = []
        #获取用户名
        name_list = []
        promote_list=[]
        for exam in exams:
            name_list.append(exam.user.nick_name)
            base_list.append(exam.base_mark)
            promote_list.append(exam.promote_mark)
        context.update(
            {
                'name_list': name_list,
                'base_list': base_list,
                'promote_list': promote_list,
            }
        )
        return context
#进行注册


xadmin.site.register(Keshi, ChangeIntoAdmin)
xadmin.site.register(Subject, SubjectAdmin)
xadmin.site.register(Question, QuestionAdmin)
xadmin.site.register(Exam, ExamAdmin)
xadmin.site.register(Mark, MarkAdmin)

</code></pre>
<pre><code class="language-python">#mark_001.html
{% extends 'xadmin/base_site.html' %}
{% load staticfiles %}
{# 去掉标签栏 #}
{% block content-nav %}

{% endblock %}
{% block extrastyle %}
     &lt;script src=&quot;{% static 'js/echarts.min.js' %}&quot;  charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://libs.baidu.com/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;
{% endblock %}
{% block content %}
&lt;div&gt;zhelishige
    &lt;div id=&quot;chart_1&quot; style=&quot;width:500px; height:350px&quot;&gt;在这里&lt;/div&gt;
    &lt;div id=&quot;chart_2&quot; style=&quot;width:500px; height:350px&quot;&gt;在这里&lt;/div&gt;
&lt;a&gt;这里还有个a标签&lt;/a&gt;
&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
        var myChart = echarts.init(document.getElementById('chart_1'));
option = {
    xAxis: {
        type: 'category',
        boundaryGap: false,
        data:{{ name_list|safe}},
    },
    yAxis: {
        type: 'value'
    },
    series: [{
        data:{{ base_list |safe}},
        type: 'line',
        areaStyle: {}
    }]
};
        myChart.setOption(option);
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
        var myChart = echarts.init(document.getElementById('chart_2'));
option = {
    xAxis: {
        type: 'category',
        boundaryGap: false,
        data:{{ name_list|safe}},
    },
    yAxis: {
        type: 'value'
    },
    series: [{
        data:{{ promote_list |safe}},
        type: 'line',
        areaStyle: {}
    }]
};
        myChart.setOption(option);
&lt;/script&gt;
{% endblock content %}

</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200423184715923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JSP实现九九乘法表]]></title>
        <id>https://906571331.github.io/yx.github.io/post/jsp-shi-xian-jiu-jiu-cheng-fa-biao/</id>
        <link href="https://906571331.github.io/yx.github.io/post/jsp-shi-xian-jiu-jiu-cheng-fa-biao/">
        </link>
        <updated>2020-04-22T01:45:44.000Z</updated>
        <content type="html"><![CDATA[<p>JSP实现九九乘法表</p>
<pre><code class="language-java">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;ISO-8859-1&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;%	String str=&quot;&quot;;
	for (int i=1;i&lt;=9;i++)
	{
		for (int j=1;j&lt;=9;j++)
		{
			str +=j+&quot;*&quot;+i+&quot;=&quot;+j*i;
			str+=&quot;&amp;nbsp;&quot;;
			str+=&quot;&amp;nbsp;&quot;;
			str+=&quot;&amp;nbsp;&quot;;
		}
		str+=&quot;&lt;br&gt;&quot;;
	}
%&gt;
&lt;%--这里的注释不会在压面中显示，但是这里会占一行 --%&gt;
&lt;table width='440' height='150' border='1' align=&quot;center&quot;&gt;
	&lt;tr&gt;
		&lt;td height=30 align=&quot;center&quot;&gt;JSP九九乘法表&lt;/td&gt;
	&lt;/tr&gt;
		&lt;tr&gt;
		&lt;td style=&quot;padding:3px&quot;&gt;&lt;%=str%&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200422093134511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django计算分数算法]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-ji-suan-fen-shu-suan-fa/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-ji-suan-fen-shu-suan-fa/">
        </link>
        <updated>2020-04-21T12:20:10.000Z</updated>
        <content type="html"><![CDATA[<h4 id="1最简单的计算分数">1.最简单的计算分数</h4>
<pre><code class="language-python">correct_answer=[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]
my_answer=[&quot;A&quot;,&quot;C&quot;,&quot;D&quot;]
mark=0
i=0
while i&lt;3:
    if correct_answer[i]==my_answer[i]:
        mark+=1
    i=i+1
print(mark)	
#运行结果：
1
</code></pre>
<h4 id="2分模块计算">2.分模块计算</h4>
<pre><code class="language-python">correct_answer=[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]
my_answer=[&quot;A&quot;,&quot;C&quot;,&quot;D&quot;]
mark=0
i=0
base_mark=0
promote_mark=0
major_mark=0
while i&lt;3:
    if i&lt;=1:
        if correct_answer[i]==my_answer[i]:
            base_mark+=1
            mark=mark+1
    else:
        if correct_answer[i]==my_answer[i]:
            mark=mark+1
    i=i+1
print(&quot;总分数为：&quot;,mark)
print(&quot;基础分数为：&quot;,base_mark)
</code></pre>
<h4 id="3分三个模块进行计算">3.分三个模块进行计算</h4>
<pre><code class="language-python">correct_answer=[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;A&quot;,&quot;B&quot;]
my_answer=[&quot;A&quot;,&quot;C&quot;,&quot;C&quot;,&quot;A&quot;,&quot;C&quot;,&quot;D&quot;,&quot;C&quot;,&quot;C&quot;,&quot;D&quot;,&quot;A&quot;]
mark=0
i=0
base_mark=0
promote_mark=0
major_mark=0
promote_mark=0
major_mark=0
while i&lt;=9:
    if i&lt;=3:
        if correct_answer[i]==my_answer[i]:
            base_mark+=1
            mark=mark+1
    elif i&lt;=6:
        if correct_answer[i]==my_answer[i]:
            mark=mark+1
            promote_mark+=1
    else:
        if correct_answer[i]==my_answer[i]:
            mark=mark+1
            major_mark+=1	
    i=i+1
print(&quot;总分数为：&quot;,mark)
print(&quot;基础分数为：&quot;,base_mark)
print(&quot;提升分数为：&quot;,promote_mark)
print(&quot;专业分数为：&quot;,major_mark)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200421083042661.png" alt="在这里插入图片描述" loading="lazy"><br>
4.html实现表单选项</p>
<pre><code class="language-html">		&lt;div class=&quot;layui-form-item&quot; pane=&quot;&quot;&gt;
			&lt;label class=&quot;layui-form-label&quot;&gt;单选框&lt;/label&gt;
			&lt;div class=&quot;layui-input-block&quot;&gt;
				&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; title=&quot;男&quot;&gt;A选项
				&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; title=&quot;女&quot;&gt;B选项
				&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; title=&quot;男&quot;&gt;C选项
				&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; title=&quot;女&quot;&gt;D选项
				&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
			&lt;/div&gt;
		&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200421084426516.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="4下午的工作">4.下午的工作</h4>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
from .models import Question,Exam,Subject
from django.db import models
# Create your views here.
class ExamView(View):
    def get(self,request):
        subjetcs=Subject.objects.get(id=1)
        print(subjetcs)
        question=Question.objects.get(id=1)
        print(id)
        context={
            &quot;question_statements&quot;:question.statments,
            &quot;op_A&quot;: question.op_A,
            &quot;op_B&quot;: question.op_B,
            &quot;op_C&quot;: question.op_C,
            &quot;op_D&quot;: question.op_D,
        }

        return render(request, &quot;exam.html&quot;,context=context)
    def post(self,request):
        question = request.POST.get('question')
        question2=request.POST.get('question2')
        options_list=re(request)
        print(question)
        print(question2)
        my_answer=[]
        my_answer.append(question)
        my_answer.append(question2)
        print(my_answer)
        print(options_list)
        return HttpResponse(&quot;success&quot;)
def re(request):
    option_list = []
    options=Question.objects.all()
    for option in options:
        option_list.append(option.correct_op)
    return option_list
</code></pre>
<pre><code class="language-python">#urls.py
from django.urls import path
from .views import ExamView
urlpatterns=[
    path(&quot;exam01/&quot;,ExamView.as_view())
]
</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from users.models import User

# Create your models here.

#科目
class Subject(models.Model):
	name 			= models.CharField(max_length=255,verbose_name=&quot;科目名称&quot;)
	description 	= models.TextField(verbose_name=&quot;科目描述&quot;)
	cover_image 	= models.ImageField(upload_to = 'cover/',blank=True)
	class Meta:
		verbose_name=&quot;科目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;问题&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments


class Exam(models.Model):
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	name = models.CharField(max_length=100,blank=True,verbose_name=&quot;本次考试名称&quot;)
	class Meta:
		verbose_name=&quot;考试&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Mark(models.Model):
	user = models.ForeignKey(User,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	exam = models.ForeignKey(Exam,on_delete=models.CASCADE,verbose_name=&quot;考试名称&quot;)
	total_marks = models.CharField(max_length=10,verbose_name=&quot;总分数&quot;)
	class Meta:
		verbose_name=&quot;分数&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.total_marks

# # class Rank(models.Model):
# # 	pass

</code></pre>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;这里是考试界面的首页&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    {% csrf_token %}
    &lt;tr&gt;
        &lt;td&gt;第一题,请选择答案&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;A:这是A选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;B:这是B选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;C:这是C选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;D:这是D选项&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
        &lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;第二题,请选择答案&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;A:这是A选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;B:这是B选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;C:这是C选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;D:这是D选项&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question2&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question2&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question2&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question2&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
    &lt;/tr&gt;&lt;br&gt;
        &lt;tr&gt;
        &lt;td&gt;{{ question_statements }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ op_A }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ op_B }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ op_C }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ op_D }}&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question_id&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question_id&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question_id&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question_id&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
        &lt;br&gt;
    &lt;/tr&gt;
    &lt;input type=&quot;submit&quot; name=&quot;exam&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="效果">效果</h4>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200421201736839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="存在的问题是不能循环遍历出同一科目或者同一考试下的所有题目">存在的问题是：不能循环遍历出同一科目或者同一考试下的所有题目</h4>
<p><code>时间：2020年4月22日17:01:00</code><br>
前端已经实现循环遍历，实现方法为：</p>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
from .models import Question,Exam,Subject
from django.db import models
# Create your views here.
class ExamView(View):
    def get(self,request):
        subjetcs1=Subject.objects.get(id=1)
        print(subjetcs1)
        question=Question.objects.filter(subject=subjetcs1)
        context={
            &quot;question&quot;:question,
        }
        return render(request, &quot;exam.html&quot;,context=context)
    def post(self,request):
        question = request.POST.get('question')
        question2=request.POST.get('question2')
        options_list=re(request)
        print(question)
        print(question2)
        my_answer=[]
        my_answer.append(question)
        my_answer.append(question2)
        print(my_answer)
        print(options_list)
        return HttpResponse(&quot;success&quot;)
#打印所有题目的正确答案
def re(request):
    option_list = []
    options=Question.objects.all()
    for option in options:
        option_list.append(option.correct_op)
    return option_list

</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from users.models import User

# Create your models here.

#科目
class Subject(models.Model):
	name 			= models.CharField(max_length=255,verbose_name=&quot;科目名称&quot;)
	description 	= models.TextField(verbose_name=&quot;科目描述&quot;)
	cover_image 	= models.ImageField(upload_to = 'cover/',blank=True)
	class Meta:
		verbose_name=&quot;科目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;问题&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments


class Exam(models.Model):
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	name = models.CharField(max_length=100,blank=True,verbose_name=&quot;本次考试名称&quot;)
	class Meta:
		verbose_name=&quot;考试&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Mark(models.Model):
	user = models.ForeignKey(User,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	exam = models.ForeignKey(Exam,on_delete=models.CASCADE,verbose_name=&quot;考试名称&quot;)
	total_marks = models.CharField(max_length=10,verbose_name=&quot;总分数&quot;)
	class Meta:
		verbose_name=&quot;分数&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.total_marks

</code></pre>
<pre><code class="language-html">#exam.html
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    {% csrf_token %}
{#循环读出所有的试题#}
    {% for foo in question %}
       &lt;tr&gt;
        &lt;td&gt;{{ foo.statments}}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_A }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_B }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_C }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_D }}&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
        &lt;br&gt;
    &lt;/tr&gt;
    {% endfor %}
    &lt;input type=&quot;submit&quot; name=&quot;exam&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
</code></pre>
<p><code>时间：2020年4月22日17:45:31</code><br>
实现了自动取出题目，答题，自动计算分数</p>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
from .models import Question,Exam,Subject
from django.db import models
# Create your views here.
class ExamView(View):
    def get(self,request):
        #获取id=1的科目
        subjetcs1=Subject.objects.get(id=1)
        #打印这个科目的名称，可省去
        print(subjetcs1)
        #获取到这个科目下的所有试题
        question=Question.objects.filter(subject=subjetcs1)
        context={
            &quot;question&quot;:question,
        }
        return render(request, &quot;exam.html&quot;,context=context)
    def post(self,request):
        #设置用户答案为一个空列表
        my_answer = []
        #依次从前端的答案中读取用户的选择，一共3道题，所以，这里的4应该手动修改
        for i in range(1,4):
            answer1 = request.POST.get('%s'%i)
            my_answer.append(answer1)
            i+=1
        print(&quot;用户答案为：&quot;,my_answer)
        # 打印所有题目的正确答案
        correct_answer=re(request)
        print(&quot;正确答案为：&quot;,correct_answer)
        #基础，提升，专业分数,总分数均初始化为0
        base_mark=0
        promote_mark=0
        major_mark=0
        total_mark=0
        i=0
        while i &lt;= 2:
            if i &lt;= 0:
                if correct_answer[i] == my_answer[i]:
                    base_mark += 1
                    total_mark = total_mark + 1
            elif i &lt;= 1:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    promote_mark += 1
            else:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    major_mark += 1
            i = i + 1
        print(&quot;总分数为：&quot;, total_mark)
        print(&quot;基础分数为：&quot;, base_mark)
        print(&quot;提升分数为：&quot;, promote_mark)
        print(&quot;专业分数为：&quot;, major_mark)
        return HttpResponse(&quot;success&quot;)
#打印所有题目的正确答案
def re(request):
    option_list = []
    options=Question.objects.all()
    for option in options:
        option_list.append(option.correct_op)
    return option_list

</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from users.models import User

# Create your models here.

#科目
class Subject(models.Model):
	name 			= models.CharField(max_length=255,verbose_name=&quot;科目名称&quot;)
	description 	= models.TextField(verbose_name=&quot;科目描述&quot;)
	cover_image 	= models.ImageField(upload_to = 'cover/',blank=True)
	class Meta:
		verbose_name=&quot;科目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;问题&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments


class Exam(models.Model):
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	name = models.CharField(max_length=100,blank=True,verbose_name=&quot;本次考试名称&quot;)
	class Meta:
		verbose_name=&quot;考试&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Mark(models.Model):
	user = models.ForeignKey(User,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	exam = models.ForeignKey(Exam,on_delete=models.CASCADE,verbose_name=&quot;考试名称&quot;)
	total_marks = models.CharField(max_length=10,verbose_name=&quot;总分数&quot;)
	class Meta:
		verbose_name=&quot;分数&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.total_marks
</code></pre>
<pre><code class="language-html">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
{#    csrf_token保护#}
    {% csrf_token %}
    {#循环读出所有的试题#}
    {% for foo in question %}
       &lt;tr&gt;
        {#每一道题的描述#}
        &lt;td&gt;{{ foo.statments}}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_A }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_B }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_C }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_D }}&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
        &lt;br&gt;
    &lt;/tr&gt;
    {% endfor %}
    &lt;input type=&quot;submit&quot; name=&quot;exam&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
</code></pre>
<p>实现效果：<br>
<img src="https://img-blog.csdnimg.cn/20200422174834865.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200422174819919.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django学习之表单]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-xue-xi-zhi-biao-dan/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-xue-xi-zhi-biao-dan/">
        </link>
        <updated>2020-04-21T02:36:46.000Z</updated>
        <content type="html"><![CDATA[<h4 id="1django表单1">1.django表单1</h4>
<pre><code class="language-python">#forms.py
from django import forms

class  MessageForms(forms.Form):
    title=forms.CharField(max_length=200,min_length=3,label=&quot;标题&quot;,error_messages={&quot;min_length&quot;:&quot;最好不能小于3个字符&quot;,&quot;max_length&quot;:&quot;最大不能超过200字符&quot;})
    content=forms.CharField(widget=forms.Textarea,label=&quot;内容&quot;,error_messages={&quot;required&quot;:&quot;必须要填这个字段&quot;})
    email=forms.EmailField(label=&quot;邮箱&quot;,error_messages={&quot;required&quot;:&quot;必须要填写邮箱地址&quot;})
    reply=forms.BooleanField(required=False,label=&quot;回复&quot;)
</code></pre>
<pre><code class="language-python">#urls.py
from django.urls import path
from .views import MessagesformsView

urlpatterns=[
    path(&quot;&quot;,MessagesformsView.as_view()),
]
</code></pre>
<pre><code class="language-bash">#views.py
from django.shortcuts import render
from .forms import MessageForms
from django.views.generic import View
from django.http import HttpResponse
from django.forms.utils import ErrorDict
# Create your views here.
class MessagesformsView(View):
    def get(self,request):
        form = MessageForms()
        return render(request,'forms.html',context={&quot;forms&quot;:form})
    def post(self,request):
        print(&quot;正在提交&quot;)
        form = MessageForms(request.POST)
        if form.is_valid():
            title = form.cleaned_data.get('title')
            content = form.cleaned_data.get('content')
            email = form.cleaned_data.get('email')
            reply = form.cleaned_data.get('reply')
            print('='*30)
            print(title)
            print(content)
            print(email)
            print(reply)
            print('='*30)
            return HttpResponse('success')
        else:
            print(form.errors.get_json_data())
            return HttpResponse('fail')
</code></pre>
<pre><code class="language-bash">#forms.html
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    &lt;table&gt;
        {{ forms.as_table }}
        &lt;tr&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/form&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200420202907648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="2djano表单2">2.djano表单2</h4>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from .forms import Myform
from django.views.generic import View
from django.http import HttpResponse

class From1View(View):
    def get(self,request):
        return render(request,'form2.html')
    def post(self,request):
        form=Myform(request.POST)
        if form.is_valid():
            url=form.cleaned_data.get(&quot;my_website&quot;)
            return HttpResponse(&quot;success&quot;)
        else:
            print(form.errors.get_json_data())
            return HttpResponse(&quot;fail&quot;)
</code></pre>
<pre><code class="language-python">#urls.py
from django.urls import path
from .views import From1View

urlpatterns=[
    path(&quot;form1/&quot;,From1View.as_view()),
]

</code></pre>
<pre><code class="language-python">#forms.py
from django import forms
class Myform(forms.Form):
    my_website=forms.URLField()
</code></pre>
<pre><code class="language-html">#form2.html
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    &lt;input type=&quot;text&quot; name=&quot;my_website&quot;&gt;
    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200420203151833.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="3验证合法的手机号">3.验证合法的手机号</h4>
<pre><code class="language-python">#views.py
class From1View(View):
    def get(self,request):
        return render(request,'form2.html')
    def post(self,request):
        form=Myform(request.POST)
        if form.is_valid():
            url=form.cleaned_data.get(&quot;telephone&quot;)
            return HttpResponse(&quot;success&quot;)
        else:
            print(form.errors.get_json_data())
            return HttpResponse(&quot;fail&quot;)
</code></pre>
<pre><code class="language-python">#urls.py
from django.urls import path
from .views import MessagesformsView,From1View

urlpatterns=[
    path(&quot;form1/&quot;,From1View.as_view()),
]

</code></pre>
<pre><code class="language-python">#forms.py
from django import forms
from django.core import validators
class Myform(forms.Form):
    telephone = forms.CharField(validators=[validators.RegexValidator(r'1[345678]\d{9}',message='请输入正确格式的手机号码！')])
</code></pre>
<pre><code class="language-html">#forms2.html
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    &lt;input type=&quot;text&quot; name=&quot;telephone&quot;&gt;
    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
</code></pre>
<h4 id="4在注册时查看是否已经注册的功能">4.在注册时查看是否已经注册的功能</h4>
<pre><code class="language-python">#models.py
from django.db import models

class User(models.Model):
    username = models.CharField(max_length=100)
    telephone = models.CharField(max_length=11)
</code></pre>
<pre><code class="language-python">#views.py
class RegisterView(View):
    def get(self,request):
        return render(request,'register.html')

    def post(self,request):
        form = RegisterForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            telephone = form.cleaned_data.get('telephone')
            User.objects.create(username=username,telephone=telephone)
            return HttpResponse('注册成功！')
        else:
            print(form.get_errors())
            return HttpResponse('注册失败！')
</code></pre>
<pre><code class="language-python">#urls.py
 path('register/', views.RegisterView.as_view()),
</code></pre>
<pre><code class="language-python">#forms.py
class RegisterForm(BaseForm):
    username = forms.CharField(max_length=100)
    telephone = forms.CharField(validators=[validators.RegexValidator(r'1[345678]\d{9}',message='请输入正确格式的手机号码！')])
    pwd1 = forms.CharField(max_length=16,min_length=6)
    pwd2 = forms.CharField(max_length=16,min_length=6)

    def clean_telephone(self):
    #只验证一个数值
        telephone = self.cleaned_data.get('telephone')
        exists = User.objects.filter(telephone=telephone).exists()
        if exists:
            raise forms.ValidationError(message='%s已经被注册！'%telephone)
        # 如果验证没有问题，一定要记得把telephone返回回去
        return telephone
        
    def clean(self):
        # 如果来到了clean方法，说明之前每一个字段都验证成功了，这里写是否相等的逻辑,这里一定是cleaned_data，调用get方法
        cleaned_data = super().clean()
        pwd1 = cleaned_data.get('pwd1')
        pwd2 = cleaned_data.get('pwd2')
        if pwd1 != pwd2:
            raise forms.ValidationError(message='两次密码输入不一致！')
        return cleaned_data
</code></pre>
<pre><code class="language-html">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    &lt;table&gt;
        &lt;tr&gt;
            &lt;td&gt;用户名：&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;手机号码：&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;telephone&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;密码：&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;pwd1&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;重复密码：&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;pwd2&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;注册&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/form&gt;
</code></pre>
<h4 id="5modelform">5.Modelform</h4>
<pre><code class="language-python">#forms.py
#encoding: utf-8
from django import forms
from .models import Book,User

class AddBookForm(forms.ModelForm):
    def clean_page(self):
        page = self.cleaned_data.get('page')
        if page &gt; 100:
            raise forms.ValidationError('页数不能大于100！')
        return page

    class Meta:
        model = Book
        # fields和exclude必须定义一个
        fields = &quot;__all__&quot;
        # fields = ['title','page']
        # exclude = ['price']
        error_messages = {
            'page':{
                'required': '请传入page参数！',
                'invalid': '请输入一个可用的page参数！'
            },
            'title': {
                'max_length': 'title不能超过100个字符！'
            },
            'price': {
                'max_value': '图书价格不能超过100元！'
            }
        }

class RegisterForm(forms.ModelForm):
    pwd1 = forms.CharField(max_length=16,min_length=6)
    pwd2 = forms.CharField(max_length=16,min_length=6)
    def clean(self):
        cleaned_data = super().clean()
        pwd1 = cleaned_data.get('pwd1')
        pwd2 = cleaned_data.get('pwd2')
        if pwd1 != pwd2:
            raise forms.ValidationError('两次密码输入不一致！')
        return cleaned_data

    class Meta:
        model = User
        exclude = ['password']

</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from django.core import validators

class Book(models.Model):
    title = models.CharField(max_length=100)
    page = models.IntegerField()
    price = models.FloatField(validators=[validators.MaxValueValidator(limit_value=1000)])


class User(models.Model):
    username = models.CharField(max_length=100)
    password = models.CharField(max_length=16)
    telephone = models.CharField(max_length=11,validators=[validators.RegexValidator(r'1[345678]\d{9}')])

</code></pre>
<pre><code class="language-python">from django.shortcuts import render
from django.http import HttpResponse
from .forms import AddBookForm,RegisterForm
from django.views.decorators.http import require_POST

def index(request):
    return HttpResponse('index')

def add_book(request):
    form = AddBookForm(request.POST)
    if form.is_valid():
        # title = form.cleaned_data.get('title')
        # page = form.cleaned_data.get(&quot;page&quot;)
        # price = form.cleaned_data.get(&quot;price&quot;)
        # print('title:%s'%title)
        # print('page:%s'%page)
        # print('price:%s'%price)
        form.save()
        return HttpResponse('success')
    else:
        print(form.errors.get_json_data())
        return HttpResponse('FAIL')

@require_POST
def register(request):
    form = RegisterForm(request.POST)
    if form.is_valid():
        user = form.save(commit=False)
        user.password = form.cleaned_data.get('pwd1')
        user.save()
        return HttpResponse('success')
    else:
        return HttpResponse('fail')

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设置`<iframe>`标签的大小]]></title>
        <id>https://906571331.github.io/yx.github.io/post/she-zhi-lessiframegreaterbiao-qian-de-da-xiao/</id>
        <link href="https://906571331.github.io/yx.github.io/post/she-zhi-lessiframegreaterbiao-qian-de-da-xiao/">
        </link>
        <updated>2020-04-19T12:20:53.000Z</updated>
        <content type="html"><![CDATA[<h4 id=""></h4>
<p><code>&lt;ifrarme&gt;</code>标签的大小设置，Django填入<code>&lt;ifrarme&gt;</code>标签后自动设置大小</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;style&gt;
        .container{
       width: 1700px;
            height:500px;
       margin: 0 auto;
       border: 1px solid #f00;
       text-align: center;
     }
 iframe{
         border: 1px solid #000;
       width: 1700px;
         height: 600px;
     }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

 &lt;div class=&quot;container&quot;&gt;
 {% autoescape off %}
     {{ info }}
     {% endautoescape %}
 &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<pre><code class="language-python">def bofang(request):
    context={
        &quot;info&quot;:'&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=455345011&amp;bvid=BV1x5411x7kE&amp;cid=179274496&amp;page=1&quot; scrolling=&quot;yes&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; &gt; &lt;/iframe&gt;'
    }
    return render(request,&quot;bofang.html&quot;,context=context)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pycharm连接虚拟机中的django项目]]></title>
        <id>https://906571331.github.io/yx.github.io/post/pycharm-lian-jie-xu-ni-ji-zhong-de-django-xiang-mu/</id>
        <link href="https://906571331.github.io/yx.github.io/post/pycharm-lian-jie-xu-ni-ji-zhong-de-django-xiang-mu/">
        </link>
        <updated>2020-04-18T08:48:19.000Z</updated>
        <content type="html"><![CDATA[<p>1.在配置好环境以后，打开pycharm，点击文件，新项目，创建一个Pure Python项目，打开添加远程<br>
<img src="https://img-blog.csdnimg.cn/20200418162635495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
2.点击SSH，按下面的要求进行配置<br>
<img src="https://img-blog.csdnimg.cn/20200418163337630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
进来以后发现，显示没有文件，<br>
<img src="https://img-blog.csdnimg.cn/20200418163501574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
3.接下来点击工具--&gt;&gt;Deployment---&gt;&gt;Configuration<br>
<img src="https://img-blog.csdnimg.cn/20200418163550530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/2020041816394794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
在Mappings中的设置：<br>
<img src="https://img-blog.csdnimg.cn/20200418164055119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
4.点击确定，在左侧的目录栏中，右击项目名称----&gt;Deployment---&gt;Download，从虚拟机中将项目导入<br>
<img src="https://img-blog.csdnimg.cn/20200418164159667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<code>常见的问题</code><br>
1.下次打开虚拟机，发现虚拟机中的项目无法正确导入，可能是虚拟机中的ip已换，解决方案请移步：<a href="https://blog.csdn.net/qq_42092076/article/details/105263238">解决Django开发中pycharm连接不到虚拟机的问题</a><br>
2.其他问题可关注博客：<a href="https://blog.csdn.net/qq_42092076">博客</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django+xadmin+echarts在后台动态显示echarts图表，实现后台定制化开发]]></title>
        <id>https://906571331.github.io/yx.github.io/post/djangoxadminecharts-zai-hou-tai-dong-tai-xian-shi-echarts-tu-biao-shi-xian-hou-tai-ding-zhi-hua-kai-fa/</id>
        <link href="https://906571331.github.io/yx.github.io/post/djangoxadminecharts-zai-hou-tai-dong-tai-xian-shi-echarts-tu-biao-shi-xian-hou-tai-ding-zhi-hua-kai-fa/">
        </link>
        <updated>2020-04-17T02:29:13.000Z</updated>
        <content type="html"><![CDATA[<p>本篇博客将Django+xadmin+echarts在后台动态显示echarts图表</p>
<pre><code class="language-python">#app/adminx.py
#从user模型中导入User表
from users.models import User
class ChangeIntoAdmin(object):
    # 指向自定义的页面
    object_list_template = 'base111.html'
    # 重写方法，把要展示的数据更新到 context
    def get_context(self):
        context = CommAdminView.get_context(self)
        #获取所有的用户
        users = User.objects.all()
        #获取用户的一个属性，将显示到
        base_list = []
        #获取用户名
        name_list = []
        for user in users:
            name_list.append(user.name)
            base_list.append(user.base_mark)
        context.update(
            {
                'name_list': name_list,
                'base_list': base_list,
            }
        )
        return context
#进行注册
xadmin.site.register(Book, ChangeIntoAdmin)
</code></pre>
<pre><code class="language-html">#base111.html
{# 继承自xadmin中的base_site.html #}
{% extends 'xadmin/base_site.html' %}

{# 去掉标签栏 #}
{% block content-nav %}

{% endblock %}
{% block extrastyle %}
{#这个block块中添加echarts.min.js，前提是在static文件夹下放入echarts.min.js,也可以引入其他样式，这个块是在xadmin/base.html中#}
&lt;script src=&quot;{% static 'js/echarts.min.js' %}&quot;  charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
{% endblock %}
{% block content %}
&lt;div&gt;zhelishige
    &lt;div id=&quot;chart_1&quot; style=&quot;width:500px; height:500px&quot;&gt;在这里&lt;/div&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var myChart = echarts.init(document.getElementById('chart_1'));
option = {
    xAxis: {
        type: 'category',
        boundaryGap: false,
        {# 这里是填入的数据 #}
        data: {{ name_list|safe }}
    },
    yAxis: {
        type: 'value'
    },
    series: [{
    	{# 这里是填入的数据 #}
        data:{{base_list}},
        type: 'line',
        areaStyle: {}
    }]
};
myChart.setOption(option);
&lt;/script&gt;
{% endblock content %}
</code></pre>
<p><code>显示效果</code>（修改css样式即可显示的更加美观）<br>
<img src="https://img-blog.csdnimg.cn/20200417102244216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<code>常见的一些问题：</code><br>
1.在添加echarts后，左侧导航栏显示<code>你没有权限修改任何东西</code>的错误，请移步：<a href="https://blog.csdn.net/qq_42092076/article/details/105572667">Django2.1.7 xadmin后台开发中出现“你无权修改任何东西”的错误</a><br>
2.<code>echarts中div层不显示</code>：可能是在div中没有添加css样式，解决方案，<code>在相应的div中添加样式</code>，如下所示：</p>
<pre><code class="language-html">&lt;div id=&quot;chart_1&quot; style=&quot;width:500px; height:500px&quot;&gt;&lt;/div&gt;
</code></pre>
<p><code>其他优化xadmin方法，以及解决方案：</code><br>
1.<a href="https://blog.csdn.net/qq_42092076/article/details/105440673">Django的开发中遇到的一些问题以及解决方案，包括Django-xadmin的优化</a><br>
2.<a href="https://blog.csdn.net/qq_42092076/article/details/105565647">django-xadmin实现自定义后台，进行个性化显示</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django2.1.7 xadmin后台开发中出现“你无权修改任何东西”的错误]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django217-xadmin-hou-tai-kai-fa-zhong-chu-xian-ni-wu-quan-xiu-gai-ren-he-dong-xi-de-cuo-wu/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django217-xadmin-hou-tai-kai-fa-zhong-chu-xian-ni-wu-quan-xiu-gai-ren-he-dong-xi-de-cuo-wu/">
        </link>
        <updated>2020-04-17T01:14:34.000Z</updated>
        <content type="html"><![CDATA[<p>Django2.1.7 xadmin后台开发中出现“你无权修改任何东西”的错误<img src="https://img-blog.csdnimg.cn/20200417090859980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="解决的办法">解决的办法</h4>
<pre><code class="language-python">from users.models import User
class ChangeIntoAdmin(object):
    # 指向自定义的页面
    object_list_template = 'base111.html'
    # 重写方法，把要展示的数据更新到 context
    def get_context(self):
        context = CommAdminView.get_context(self)
        users = User.objects.all()
        base_list = []
        name_list = []
        for user in users:
            name_list.append(user.name)
            base_list.append(user.base_mark)
        context.update(
            {
                'name_list': name_list,
                'base_list': base_list,
            }
        )
        return context
#注册，其中Book是一张表
xadmin.site.register(Book, ChangeIntoAdmin)
</code></pre>
<pre><code class="language-html">#继承自xadmin/base_site.html模板
{% extends 'xadmin/base_site.html' %}

{# 去掉标签栏 #}
{% block content-nav %}

{% endblock %}

{% block content %}
{{ name_list|safe }}
    {{ base_list }}
{% endblock content %}
</code></pre>
<p>即可正确显示<br>
<img src="https://img-blog.csdnimg.cn/2020041709130918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django-xadmin实现自定义后台，进行个性化显示]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-xadmin-shi-xian-zi-ding-yi-hou-tai-jin-xing-ge-xing-hua-xian-shi/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-xadmin-shi-xian-zi-ding-yi-hou-tai-jin-xing-ge-xing-hua-xian-shi/">
        </link>
        <updated>2020-04-16T12:03:33.000Z</updated>
        <content type="html"><![CDATA[<p>在实际的开发中，通常需要对Django的后台管理页面进行个性化定制，本篇博客将介绍如何个性化定制后台。</p>
<h4 id="1在任意的adminx中自定义类如下所示">1.在任意的adminx中自定义类，如下所示：</h4>
<pre><code class="language-python">#adminx.py
class ChangeIntoAdmin(object):
    # 指向自定义的页面，并且在templates创建名字为base111.html的页面
    object_list_template = 'base111.html'
    # 重写方法，把要展示的数据更新到 context
    def get_context(self):
    	#读取所需要的数据
        context = CommAdminView.get_context(self)
        bill_message = Book.objects.all()
        context.update(
            {
                'title': '转入分析',
            }
        )
        return context
#进行注册，注册到名字为Book的列表页下面
xadmin.site.register(Book, ChangeIntoAdmin)
</code></pre>
<pre><code class="language-html"># base111.html
#继承自xadmin/base_site.html
{% extends 'xadmin/base_site.html' %}

{# 去掉标签栏 #}
{% block content-nav %}

{% endblock %}

{% block content %}
#显示传入的数据
{{ title }}
{% endblock content %}
</code></pre>
<p>效果如下：<img src="https://img-blog.csdnimg.cn/20200416200122973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
未修改前：<br>
<img src="https://img-blog.csdnimg.cn/20200416200108299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django开发中遇到No module named 'captcha的问题解决方法]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-kai-fa-zhong-yu-dao-no-module-named-captcha-de-wen-ti-jie-jue-fang-fa/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-kai-fa-zhong-yu-dao-no-module-named-captcha-de-wen-ti-jie-jue-fang-fa/">
        </link>
        <updated>2020-04-16T08:26:23.000Z</updated>
        <content type="html"><![CDATA[<h4 id="在django开发中遇到如下问题">在Django开发中遇到如下问题</h4>
<pre><code class="language-python">    from captcha.fields import CaptchaField
ModuleNotFoundError: No module named 'captcha.fields'
</code></pre>
<h4 id="解决方法">解决方法：</h4>
<p>安装django-simple-captcha</p>
<pre><code class="language-python">pip install django-simple-captcha
</code></pre>
<h4 id="在开发中遇到以下错误">在开发中遇到以下错误</h4>
<pre><code class="language-python">HINT: Add or change a related_name argument to the definition for 'User.user_permissions' or 'UserProfile.user_permissions'.
</code></pre>
<p>解决方案：在settings.py中添加：</p>
<pre><code class="language-python">AUTH_USER_MODEL = 'Users.UserProfile'
</code></pre>
]]></content>
    </entry>
</feed>