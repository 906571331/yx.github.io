<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://906571331.github.io/yx.github.io/</id>
    <title>WuXin</title>
    <updated>2020-04-27T11:54:19.562Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://906571331.github.io/yx.github.io/"/>
    <link rel="self" href="https://906571331.github.io/yx.github.io/atom.xml"/>
    <subtitle>成千上万个门口，总有一个人要先走。</subtitle>
    <logo>https://906571331.github.io/yx.github.io/images/avatar.png</logo>
    <icon>https://906571331.github.io/yx.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, WuXin</rights>
    <entry>
        <title type="html"><![CDATA[django获取各种形式的表单内容]]></title>
        <id>https://906571331.github.io/yx.github.io/post/y4MYiiqzl/</id>
        <link href="https://906571331.github.io/yx.github.io/post/y4MYiiqzl/">
        </link>
        <updated>2020-04-27T11:16:45.000Z</updated>
        <content type="html"><![CDATA[<p>Django框架获取各种form表单数据</p>
<h4 id="1django中获取textpassword">1.Django中获取text，password</h4>
<pre><code class="language-python">　　名字：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;br&gt;&lt;br&gt;
　　密码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;
</code></pre>
<p>Form表单提交数据时使用的是post方式，所以在后端接收参数的时候需要先判断请求方式为post时才能请求到数据</p>
<pre><code class="language-python">　　name = request.POST.get('name')
　　password = request.POST.get('password')
</code></pre>
<h4 id="2django中获取单选框">2.Django中获取单选框</h4>
<pre><code class="language-python">　　性别：&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;man&quot;&gt;男
　　　　&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;woman&quot;&gt;女
　　　　#此时获取到的值是woman或者man
　　　　gender = request.POST.get('gender')
</code></pre>
<h4 id="3django中获取单选的复选框">3.Django中获取单选的复选框</h4>
<p>单选复选框：<input type="checkbox" name="is_tuanyuan" value="is_tuanyuan">是否是团员</p>
<p>此时如果选中该选项，获取到的值是value后面的，若没有选中即是None</p>
<pre><code class="language-python">　　is_tuanyuan = request.POST.get('is_tuanyuan')
</code></pre>
<p>Django中获取复选框</p>
<pre><code class="language-python">　　复选框：&lt;input type=&quot;checkbox&quot; name=&quot;joy&quot; value=&quot;sing&quot;&gt;唱歌

　　　　　　&lt;input type=&quot;checkbox&quot; name=&quot;joy&quot; value=&quot;dance&quot;&gt;跳舞
</code></pre>
<p>这里应该使用getlist获取多选框，获取到的是列表形式，用get获取只能得到最后一个选项</p>
<pre><code class="language-python">　　joy = request.POST.getlist('joy')
</code></pre>
<h4 id="4django中获取单选下拉框">4.Django中获取单选下拉框</h4>
<p>去过哪些城市？单选</p>
<pre><code class="language-python">　　&lt;select name=&quot;city&quot;&gt;
　　　　&lt;option&gt;北京&lt;/option&gt;
　　　　&lt;option&gt;天津&lt;/option&gt;
　　　　&lt;option&gt;南京&lt;/option&gt;
　　&lt;/select&gt;
</code></pre>
<p>这里获取到的就直接是option里面的内容</p>
<pre><code class="language-python">　　city = request.POST.get('city')
</code></pre>
<p>Django中获取多选的下拉框</p>
<pre><code class="language-python">#去过哪些城市？多选
　　&lt;select multiple name=&quot;more_city&quot;&gt;
　　　　&lt;option&gt;北京&lt;/option&gt;
　　　　&lt;option&gt;天津&lt;/option&gt;
　　　　&lt;option&gt;南京&lt;/option&gt;
　　&lt;/select&gt;
</code></pre>
<p>这里涉及到多个值得获取，需要使用getlist，获取到的是列表，get依然只能获取到一个值，用户在使用时按住Ctrl即可以实现多选</p>
<pre><code class="language-python">　　 more_city = request.POST.getlist('more_city') 
</code></pre>
<h4 id="5django中获取文本域">5.Django中获取文本域</h4>
<pre><code class="language-python">　　&lt;textarea name=&quot;more_text&quot; placeholder=&quot;请输入备注&quot;&gt;&lt;/textarea&gt;
</code></pre>
<p>获取方法：</p>
<pre><code class="language-python">　　more_text = request.POST.get('more_text')
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ueditor在Django中的使用]]></title>
        <id>https://906571331.github.io/yx.github.io/post/4y-2Nv7x-/</id>
        <link href="https://906571331.github.io/yx.github.io/post/4y-2Nv7x-/">
        </link>
        <updated>2020-04-27T09:10:16.000Z</updated>
        <content type="html"><![CDATA[<p>在修改models.py中的字段后，需要进行数据库的迁移</p>
<pre><code class="language-python">#urls.py
path('ueditor/',include('DjangoUeditor.urls' )),
</code></pre>
<pre><code class="language-python">#adminx.py
class QuestionAdmin(object):
	#可以显示的列
    list_display=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #查找的设置
    search_fields=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #过滤器的设置
    list_filter=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #可以在当前页面编辑的列，当后台设置为ueditor时，这里设置为不能修改，否则会报错
    #list_editable=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    model_icon=&quot;fa fa-bath&quot;
    #将statements字段设置为ueditor类型
    style_fields = {&quot;statments&quot;: &quot;ueditor&quot;}
</code></pre>
<pre><code class="language-python">#models.py中的设置：
from DjangoUeditor.models import UEditorField
class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	# statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	statments = UEditorField(verbose_name=u'题目描述', width=600, height=300, imagePath=&quot;exam/ueditor/&quot;,
						  filePath=&quot;exam/ueditor/&quot;, default='')
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;题目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments
</code></pre>
<pre><code class="language-html">        {#每一道题的描述#}
        &lt;td&gt;{% autoescape off %}
             {{ foo.statments}}
             {% endautoescape %}&lt;/td&gt;
           &lt;br&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200427171242288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Django中引入日志功能：]]></title>
        <id>https://906571331.github.io/yx.github.io/post/XOKY2QSij/</id>
        <link href="https://906571331.github.io/yx.github.io/post/XOKY2QSij/">
        </link>
        <updated>2020-04-27T07:39:16.000Z</updated>
        <content type="html"><![CDATA[<p><code>在Django中引入日志功能：</code><br>
<code>1.</code>在settings.py中加入以下代码：</p>
<pre><code class="language-python">LOGGING = {
    # 版本
    'version': 1,
    # 是否禁用已存在的日志器
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'formrat': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, &quot;logs/user.log&quot;),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],
            'propagate': True,
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
</code></pre>
<p><code>2.</code>新建一个名为logs的文件夹，重新启动Django项目即可将日志记录到user.logs的文件中</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django实现考试系统优化2]]></title>
        <id>https://906571331.github.io/yx.github.io/post/0H_lhPduB/</id>
        <link href="https://906571331.github.io/yx.github.io/post/0H_lhPduB/">
        </link>
        <updated>2020-04-26T11:05:10.000Z</updated>
        <content type="html"><![CDATA[<p><code>时间：2020年4月26日18:51:43</code><br>
Django实现考试系统优化：实现从数据库中读取分数，并且计算分数，修改数据分数的数据类型为IntegerField，判断用户是否已经进行了测试，如果进行了测试，则不能再次测试</p>
<pre><code class="language-python">#models.py
#user/models.py
class UserProfile(AbstractUser):

    gender_choices = (
        ('male','男'),
        ('female','女')
    )

    nick_name = models.CharField('昵称',max_length=50,default='',blank=True)
    birthday = models.DateField('生日',null=True,blank=True)
    gender = models.CharField('性别',max_length=10,choices=gender_choices,default='female')
    adress = models.CharField('地址',max_length=100,default='')
    mobile = models.CharField('手机号',max_length=11,null=True,blank=True)
    image = models.ImageField(upload_to='image/%Y%m',default='image/default.png',max_length=100,blank=True)
    is_exam=models.BooleanField(default=False,verbose_name=&quot;是否进行了测试&quot;)
    class Meta:
        verbose_name = '用户信息'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.username
#models.py
from django.db import models
from datetime import datetime
# Create your models here.
from django.db import models
from users.models import UserProfile
# Create your models here.

#科目
class Subject(models.Model):
	name 			= models.CharField(max_length=255,verbose_name=&quot;科目名称&quot;)
	description 	= models.TextField(verbose_name=&quot;科目描述&quot;)
	cover_image 	= models.ImageField(upload_to = 'cover/',blank=True)
	class Meta:
		verbose_name=&quot;科目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;题目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments


class Exam(models.Model):
	user = models.ForeignKey(UserProfile,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	name = models.CharField(max_length=100,blank=True,verbose_name=&quot;本次考试名称&quot;)
	class Meta:
		verbose_name=&quot;考试&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Mark(models.Model):
	user = models.ForeignKey(UserProfile,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	exam = models.ForeignKey(Exam,on_delete=models.CASCADE,verbose_name=&quot;考试名称&quot;)
	total_mark = models.IntegerField(verbose_name=&quot;总分数&quot;)
	base_mark = models.IntegerField(verbose_name=&quot;基础分数&quot;)
	promote_mark = models.IntegerField(verbose_name=&quot;提升分数&quot;)
	major_mark = models.IntegerField(verbose_name=&quot;专业分数&quot;)
	class Meta:
		verbose_name=&quot;分数&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return str(self.total_mark)

class Keshi(models.Model):
    keshi = models.CharField(max_length=10, verbose_name=&quot;分数可视化&quot;)
    class Meta:
        verbose_name = &quot;分数可视化&quot;
        verbose_name_plural = verbose_name
</code></pre>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
from .models import Question,Exam,Subject,Mark
from django.db.models import Count
from django.contrib.auth.decorators import login_required
from users.models import UserProfile
# Create your views here.
from django.utils.decorators import method_decorator
@method_decorator(login_required,name='dispatch')
class ExamView(View):
    def get(self,request):
        uid = request.user
        #查看是否已经进行过该考试，如果进行过该次考试，则不能再次考试
        if uid.is_exam==True:
            return HttpResponse(&quot;您已进行过改考试，无需再次考试&quot;)
        else:
            #获取id=1的科目
            subjetcs1=Subject.objects.get(id=1)
            #打印这个科目的名称，可省去
            print(subjetcs1)
            #获取到这个科目下的所有试题
            question=Question.objects.filter(subject=subjetcs1)
            context={
                &quot;question&quot;:question,
            }
            return render(request, &quot;exam03.html&quot;,context=context)
    def post(self,request):
        #获取是哪个用户
        uid = request.user
        print(uid.is_exam)
        #获取当前用户的昵称
        uname=request.user.nick_name
        #获取当前考试的学科
        subjetcs1 = Subject.objects.get(id=1)
        #获取是哪次考试
        current_exam=Exam.objects.get(id=1)
        print(&quot;本次考试的科目为：&quot;,subjetcs1)
        print(&quot;本次考试名称为：&quot;, current_exam)
        print(uid)
        print(uname)
        #获取用户的答案
        my_answer = []
        #这里获取总的题目数量，添加题目数量后无需继续修改这里的数据
        count_question = Question.objects.aggregate(count=Count(&quot;id&quot;))
        for c in count_question.values():
            print(c)
        count1=c
        print(count1)
        for i in range(1,count1+1):
            answer1 = request.POST.get('%s'%i)
            my_answer.append(answer1)
            i+=1
        print(&quot;用户答案为：&quot;,my_answer)
        # 打印所有题目的正确答案
        correct_answer=re(request)
        timu_fenshu=fenshu(request)
        print(&quot;题目分数为：&quot;, timu_fenshu)
        print(&quot;正确答案为：&quot;,correct_answer)
        #基础，提升，专业分数,总分数均初始化为0
        base_mark=0
        promote_mark=0
        major_mark=0
        total_mark=0
        i=0
        while i &lt;=count1-1 :
            if i &lt;= 0:
                if correct_answer[i] == my_answer[i]:
                    base_mark += timu_fenshu[i]
                    total_mark = total_mark + timu_fenshu[i]
            elif i &lt;= 1:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark+timu_fenshu[i]
                    promote_mark += timu_fenshu[i]
            else:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark+timu_fenshu[i]
                    print(timu_fenshu[i])
                    major_mark += timu_fenshu[i]
            i = i + 1
        print(&quot;总分数为：&quot;, total_mark)
        print(&quot;基础分数为：&quot;, base_mark)
        print(&quot;提升分数为：&quot;, promote_mark)
        print(&quot;专业分数为：&quot;, major_mark)
        mark=Mark(user=uid,subject=subjetcs1,total_mark=total_mark,exam=current_exam,base_mark=base_mark,promote_mark=promote_mark,major_mark=major_mark)
        uid.is_exam=True
        uid.save()
        mark.save()
        return render(request,'commite_succcess.html')

#打印所有题目的正确答案
def re(request):
    option_list = []
    options=Question.objects.all()
    for option in options:
        option_list.append(option.correct_op)
    return option_list
#获取每一道题的分数
def fenshu(request):
    fenshu_list = []
    fenshus=Question.objects.all()
    for fenshu in fenshus:
        fenshu_list.append(fenshu.mark)
    return fenshu_list
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200426190338777.png" alt="在这里插入图片描述" loading="lazy"></figure>
<p><code>以前的文章：</code><br>
<code>1.</code><a href="https://blog.csdn.net/qq_42092076/article/details/105713551">Django实现考试系统,并实现后台数据可视化</a></p>
<p><code>2.</code><a href="https://blog.csdn.net/qq_42092076/article/details/105664258">django考试试卷的实现【1】</a></p>
<p><code>3.</code><a href="https://blog.csdn.net/qq_42092076/article/details/105649783">计算分数算法</a></p>
<p><code>4.</code><a href="https://blog.csdn.net/qq_42092076/article/details/105752469">Django2中@login_required的用法</a></p>
<p><code>5.</code><a href="https://blog.csdn.net/qq_42092076/article/details/105565647">django-xadmin实现自定义后台，进行个性化显示</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django聚合函数笔记]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-ju-he-han-shu-bi-ji/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-ju-he-han-shu-bi-ji/">
        </link>
        <updated>2020-04-25T10:37:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="聚合函数笔记">聚合函数笔记：</h3>
<ol>
<li>
<p>所有的聚合函数都是放在<code>django.db.models</code>下面。</p>
</li>
<li>
<p>聚合函数不能够单独的执行，需要放在一些可以执行聚合函数的方法下面中去执行。比如<code>aggregate</code>。示例代码如下：</p>
<pre><code class="language-python">result = Book.objects.aggregate(Avg(&quot;price&quot;))
</code></pre>
</li>
<li>
<p>聚合函数执行完成后，给这个聚合函数的值取个名字。取名字的规则，默认是<code>filed+__+聚合函数名字</code>形成的。比如以上代码形成的名字叫做<code>price__avg</code>。如果不想使用默认的名字，那么可以在使用聚合函数的时候传递关键字参数进去，参数的名字就是聚合函数执行完成的名字。实示例代码如下：</p>
<pre><code class="language-python">result = Book.objects.aggregate(avg=Avg(&quot;price&quot;))
</code></pre>
<p>以上传递了关键字参数<code>avg=Avg(&quot;price&quot;)</code>，那么以后<code>Avg</code>聚合函数执行完成的名字就叫做<code>avg</code>。</p>
</li>
<li>
<p><code>aggregate</code>：这个方法不会返回一个<code>QuerySet</code>对象，而是返回一个字典。这个字典中的key就是聚合函数的名字，值就是聚合函数执行后的结果。</p>
</li>
<li>
<p><code>aggregate</code>和<code>annotate</code>的相同和不同：</p>
<ul>
<li>相同：这两个方法都可以执行聚合函数。</li>
<li>不同：
<ul>
<li><code>aggregate</code>返回的是一个字典，在这个字典中存储的是这个聚合函数执行的结果。而<code>annotate</code>返回的是一个<code>QuerySet</code>对象，并且会在查找的模型上添加一个聚合函数的属性。</li>
<li><code>aggregate</code>不会做分组，而<code>annotate</code>会使用<code>group by</code>子句进行分组，只有调用了<code>group by</code>子句，才能对每一条数据求聚合函数的值。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>Count</code>：用来求某个数据的个数。比如要求所有图书的数量，那么可以使用以下代码：</p>
<pre><code class="language-python">result = Book.objects.aggregate(book_nums=Count(&quot;id&quot;))
</code></pre>
<p>并且<code>Count</code>可以传递<code>distinct=True</code>参数，用来剔除那些重复的值，只保留一个。比如要获取作者表中，不同邮箱的个数，那么这时候可以使用<code>distinct=True</code>。示例代码如下：</p>
<pre><code class="language-python">result = Author.objects.aggregate(email_nums=Count('email',distinct=True))
</code></pre>
</li>
<li>
<p><code>Max</code>和<code>Min</code>：求指定字段的最大值和最小值。示例代码如下：</p>
<pre><code class="language-python">result = Author.objects.aggregate(max=Max(&quot;age&quot;),min=Min(&quot;age&quot;))
</code></pre>
</li>
<li>
<p><code>Sum</code>：求某个字段值的总和。示例代码如下：</p>
<pre><code class="language-python">result = BookOrder.objects.aggregate(total=Sum('price'))
</code></pre>
<p><code>aggregate</code>和<code>annotate</code>方法可以在任何的<code>QuerySet</code>对象上调用。因此只要是返回了<code>QuerySet</code>对象，那么就可以进行链式调用。比如要获取2018年度的销售总额，那么可以先过滤年份，再求聚合函数。示例代码如下：</p>
<pre><code class="language-python">BookOrder.objects.filter(create_time__year=2018).aggregate(total=Sum('price'))
</code></pre>
</li>
<li>
<p><code>F表达式</code>： 动态的获取某个字段上的值。并且这个F表达式，不会真正的去数据库中查询数据，他相当于只是起一个标识的作用。比如想要将原来每本图书的价格都在原来的基础之上增加10元，那么可以使用以下代码来实现：</p>
<pre><code class="language-python">from django.db.models import F
Book.objects.update(price=F(&quot;price&quot;)+10)
</code></pre>
</li>
<li>
<p><code>Q表达式</code>：使用<code>Q</code>表达式包裹查询条件，可以在条件之间进行多种操作。与/或非等，从而实现一些复杂的查询操作。例子如下：</p>
<ul>
<li>查找价格大于100，并且评分达到4.85以上的图书：<pre><code class="language-python"># 不使用Q表达式的
books = Book.objects.filter(price__gte=100,rating__gte=4.85)
# 使用Q表达式的
books = Book.objects.filter(Q(price__gte=100)&amp;Q(rating__gte=4.85))
</code></pre>
</li>
<li>查找价格低于100元，或者评分低于4分的图书：<pre><code class="language-python">books = Book.objects.filter(Q(price__gte=100)&amp;Q(rating__gte=4.85))
</code></pre>
</li>
<li>获取价格大于100，并且图书名字中不包含”传“字的图书：<pre><code class="language-python">books = Book.objects.filter(Q(price__gte=100)&amp;~Q(name__icontains='传'))
</code></pre>
</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django2中@login_required的用法]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django2-zhong-login_required-de-yong-fa/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django2-zhong-login_required-de-yong-fa/">
        </link>
        <updated>2020-04-25T08:58:07.000Z</updated>
        <content type="html"><![CDATA[<h4 id="在开发中会遇到这样的需求即在用户未登录时不对用户开放某些页面这种需求在django2中解决办法为">在开发中会遇到这样的需求：即在用户未登录时不对用户开放某些页面，这种需求在Django2中解决办法为：</h4>
<ul>
<li><code>1.在settings.py中添加：</code></li>
</ul>
<pre><code class="language-python">#settings.py
AUTH_USER_MODEL = 'users.UserProfile'
#这个根据登录URL的不同进行修改
LOGIN_URL=&quot;login&quot;
#附：urls.py中的设置：
    path('login/',LoginView.as_view(),name = 'login'),
</code></pre>
<ul>
<li><code>2.在相应的视图中添加：</code></li>
</ul>
<pre><code class="language-python">from django.contrib.auth.decorators import login_required
# Create your views here.
from django.utils.decorators import method_decorator
@method_decorator(login_required,name='dispatch')
</code></pre>
<p>同时解决使用<code>@login_required</code>后出现<code>'function' object has no attribute 'as_view'</code>的问题，解决方案：<code>使用以上的方法</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django实现考试系统]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-shi-xian-kao-shi-xi-tong/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-shi-xian-kao-shi-xi-tong/">
        </link>
        <updated>2020-04-23T10:50:26.000Z</updated>
        <content type="html"><![CDATA[<p><code>时间：2020年4月23日17:58:01</code><br>
Django实现考试系统</p>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
from .models import Question,Exam,Subject,Mark
from django.db import models

# Create your views here.
class ExamView(View):
    def get(self,request):
        #获取id=1的科目
        subjetcs1=Subject.objects.get(id=1)
        #打印这个科目的名称，可省去
        print(subjetcs1)
        #获取到这个科目下的所有试题
        question=Question.objects.filter(subject=subjetcs1)
        context={
            &quot;question&quot;:question,
        }
        return render(request, &quot;exam03.html&quot;,context=context)
    def post(self,request):
        #设置用户答案为一个空列表
        if request.user.is_authenticated:
            # uid=request.user.id
            uid = request.user
            uname=request.user.nick_name
        subjetcs1 = Subject.objects.get(id=1)
        current_exam=Exam.objects.get(id=1)
        print(&quot;本次考试的科目为：&quot;,subjetcs1)
        print(&quot;本次考试名称为：&quot;, current_exam)
        print(uid)
        print(uname)
        my_answer = []
        #依次从前端的答案中读取用户的选择，一共3道题，所以，这里的4应该手动修改
        for i in range(1,4):
            answer1 = request.POST.get('%s'%i)
            my_answer.append(answer1)
            i+=1
        print(&quot;用户答案为：&quot;,my_answer)
        # 打印所有题目的正确答案
        correct_answer=re(request)
        print(&quot;正确答案为：&quot;,correct_answer)
        #基础，提升，专业分数,总分数均初始化为0
        base_mark=0
        promote_mark=0
        major_mark=0
        total_mark=0
        i=0
        while i &lt;= 2:
            if i &lt;= 0:
                if correct_answer[i] == my_answer[i]:
                    base_mark += 1
                    total_mark = total_mark + 1
            elif i &lt;= 1:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    promote_mark += 1
            else:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    major_mark += 1
            i = i + 1
        print(&quot;总分数为：&quot;, total_mark)
        print(&quot;基础分数为：&quot;, base_mark)
        print(&quot;提升分数为：&quot;, promote_mark)
        print(&quot;专业分数为：&quot;, major_mark)
        mark=Mark(user=uid,subject=subjetcs1,total_mark=total_mark,exam=current_exam,base_mark=base_mark,promote_mark=promote_mark,major_mark=major_mark)
        mark.save()
        return render(request,'commite_succcess.html')
#打印所有题目的正确答案
def re(request):
    option_list = []
    options=Question.objects.all()
    for option in options:
        option_list.append(option.correct_op)
    return option_list

</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from datetime import datetime
# Create your models here.
from django.db import models
from users.models import UserProfile
# Create your models here.

#科目
class Subject(models.Model):
	name 			= models.CharField(max_length=255,verbose_name=&quot;科目名称&quot;)
	description 	= models.TextField(verbose_name=&quot;科目描述&quot;)
	cover_image 	= models.ImageField(upload_to = 'cover/',blank=True)
	class Meta:
		verbose_name=&quot;科目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;题目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments


class Exam(models.Model):
	user = models.ForeignKey(UserProfile,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	name = models.CharField(max_length=100,blank=True,verbose_name=&quot;本次考试名称&quot;)
	class Meta:
		verbose_name=&quot;考试&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Mark(models.Model):
	user = models.ForeignKey(UserProfile,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	exam = models.ForeignKey(Exam,on_delete=models.CASCADE,verbose_name=&quot;考试名称&quot;)
	total_mark = models.CharField(max_length=10,verbose_name=&quot;总分数&quot;)
	base_mark = models.CharField(max_length=10,verbose_name=&quot;基础分数&quot;)
	promote_mark = models.CharField(max_length=10,verbose_name=&quot;提升分数&quot;)
	major_mark = models.CharField(max_length=10,verbose_name=&quot;专业分数&quot;)
	class Meta:
		verbose_name=&quot;分数&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.total_mark

# # class Rank(models.Model):
# # 	pass

</code></pre>
<pre><code class="language-python">#urls.py
from django.urls import path
from .views import ExamView
app_name = &quot;exam&quot;
urlpatterns=[
    path(&quot;exam01/&quot;,ExamView.as_view(),name='exam_start'),
]
</code></pre>
<pre><code class="language-python">#adminx.py
from django.shortcuts import render
import xadmin
from .models import *
from users.models import UserProfile
from xadmin import views

class SubjectAdmin(object):
	#可以显示的列
    list_display=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #查找的设置
    search_fields=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #过滤器的设置
    list_filter=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    model_icon=&quot;fa fa-bath&quot;
class QuestionAdmin(object):
	#可以显示的列
    list_display=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #查找的设置
    search_fields=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #过滤器的设置
    list_filter=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    model_icon=&quot;fa fa-bath&quot;
class ExamAdmin(object):
	#可以显示的列
    list_display=[&quot;subject&quot;,&quot;name&quot;]
    #查找的设置
    search_fields=[&quot;subject&quot;,&quot;name&quot;]
    #过滤器的设置
    list_filter=[&quot;subject&quot;,&quot;name&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;subject&quot;,&quot;name&quot;]
    model_icon=&quot;fa fa-bath&quot;
class MarkAdmin(object):
	#可以显示的列
    list_display=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #查找的设置
    search_fields=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #过滤器的设置
    list_filter=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;]
    model_icon=&quot;fa fa-bath&quot;
xadmin.site.register(Subject, SubjectAdmin)
xadmin.site.register(Question, QuestionAdmin)
xadmin.site.register(Exam, ExamAdmin)
xadmin.site.register(Mark, MarkAdmin)
</code></pre>
<pre><code class="language-html">{% extends 'base.html' %}
{% load staticfiles %}
{% block title %}考试页面{% endblock %}
{% block custom_css %}
{% endblock %}
&lt;!--正文--&gt;
{% block content %}

&lt;form action=&quot;&quot; method=&quot;post&quot; class=&quot;exam_form&quot; style=&quot;font-family: 微软雅黑;font-size: 20px;&quot; align=&quot;center&quot;&gt;
{#    csrf_token保护#}
    {% csrf_token %}
    {#循环读出所有的试题#}
    {% for foo in question %}
       &lt;tr&gt;
        {#每一道题的描述#}
        &lt;td&gt;{{ foo.statments}}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_A }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_B }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_C }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_D }}&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
        &lt;br&gt;
    &lt;/tr&gt;
    {% endfor %}
    &lt;input type=&quot;submit&quot; name=&quot;exam&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
{% endblock %}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200423180130674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="后台数据可视化">后台数据可视化</h4>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
from .models import Question,Exam,Subject,Mark
from django.db import models

# Create your views here.
class ExamView(View):
    def get(self,request):
        #获取id=1的科目
        subjetcs1=Subject.objects.get(id=1)
        #打印这个科目的名称，可省去
        print(subjetcs1)
        #获取到这个科目下的所有试题
        question=Question.objects.filter(subject=subjetcs1)
        context={
            &quot;question&quot;:question,
        }
        return render(request, &quot;exam03.html&quot;,context=context)
    def post(self,request):
        #设置用户答案为一个空列表
        if request.user.is_authenticated:
            # uid=request.user.id
            uid = request.user
            uname=request.user.nick_name
        subjetcs1 = Subject.objects.get(id=1)
        current_exam=Exam.objects.get(id=1)
        print(&quot;本次考试的科目为：&quot;,subjetcs1)
        print(&quot;本次考试名称为：&quot;, current_exam)
        print(uid)
        print(uname)
        my_answer = []
        #依次从前端的答案中读取用户的选择，一共3道题，所以，这里的4应该手动修改
        for i in range(1,4):
            answer1 = request.POST.get('%s'%i)
            my_answer.append(answer1)
            i+=1
        print(&quot;用户答案为：&quot;,my_answer)
        # 打印所有题目的正确答案
        correct_answer=re(request)
        print(&quot;正确答案为：&quot;,correct_answer)
        #基础，提升，专业分数,总分数均初始化为0
        base_mark=0
        promote_mark=0
        major_mark=0
        total_mark=0
        i=0
        while i &lt;= 2:
            if i &lt;= 0:
                if correct_answer[i] == my_answer[i]:
                    base_mark += 1
                    total_mark = total_mark + 1
            elif i &lt;= 1:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    promote_mark += 1
            else:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    major_mark += 1
            i = i + 1
        print(&quot;总分数为：&quot;, total_mark)
        print(&quot;基础分数为：&quot;, base_mark)
        print(&quot;提升分数为：&quot;, promote_mark)
        print(&quot;专业分数为：&quot;, major_mark)
        mark=Mark(user=uid,subject=subjetcs1,total_mark=total_mark,exam=current_exam,base_mark=base_mark,promote_mark=promote_mark,major_mark=major_mark)
        mark.save()
        return render(request,'commite_succcess.html')
#打印所有题目的正确答案
def re(request):
    option_list = []
    options=Question.objects.all()
    for option in options:
        option_list.append(option.correct_op)
    return option_list

# Create your views here.

</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from datetime import datetime
# Create your models here.
from django.db import models
from users.models import UserProfile
# Create your models here.

#科目
class Subject(models.Model):
	name 			= models.CharField(max_length=255,verbose_name=&quot;科目名称&quot;)
	description 	= models.TextField(verbose_name=&quot;科目描述&quot;)
	cover_image 	= models.ImageField(upload_to = 'cover/',blank=True)
	class Meta:
		verbose_name=&quot;科目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;题目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments


class Exam(models.Model):
	user = models.ForeignKey(UserProfile,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	name = models.CharField(max_length=100,blank=True,verbose_name=&quot;本次考试名称&quot;)
	class Meta:
		verbose_name=&quot;考试&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Mark(models.Model):
	user = models.ForeignKey(UserProfile,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	exam = models.ForeignKey(Exam,on_delete=models.CASCADE,verbose_name=&quot;考试名称&quot;)
	total_mark = models.CharField(max_length=10,verbose_name=&quot;总分数&quot;)
	base_mark = models.CharField(max_length=10,verbose_name=&quot;基础分数&quot;)
	promote_mark = models.CharField(max_length=10,verbose_name=&quot;提升分数&quot;)
	major_mark = models.CharField(max_length=10,verbose_name=&quot;专业分数&quot;)
	class Meta:
		verbose_name=&quot;分数&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.total_mark

# # class Rank(models.Model):
# # 	pass
class Keshi(models.Model):
    keshi = models.CharField(max_length=10, verbose_name=&quot;分数可视化&quot;)
    class Meta:
        verbose_name = &quot;分数可视化&quot;
        verbose_name_plural = verbose_name

</code></pre>
<pre><code class="language-python">#adminx.py
from django.shortcuts import render
import xadmin
from .models import *
from users.models import UserProfile
from xadmin import views
from xadmin.views import CommAdminView
class SubjectAdmin(object):
	#可以显示的列
    list_display=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #查找的设置
    search_fields=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #过滤器的设置
    list_filter=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;name&quot;,&quot;description&quot;,&quot;cover_image&quot;]
    model_icon=&quot;fa fa-bath&quot;
class QuestionAdmin(object):
	#可以显示的列
    list_display=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #查找的设置
    search_fields=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #过滤器的设置
    list_filter=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;subject&quot;,&quot;statments&quot;,&quot;op_A&quot;,&quot;op_B&quot;,&quot;op_C&quot;,&quot;op_D&quot;]
    model_icon=&quot;fa fa-bath&quot;
class ExamAdmin(object):
	#可以显示的列
    list_display=[&quot;subject&quot;,&quot;name&quot;]
    #查找的设置
    search_fields=[&quot;subject&quot;,&quot;name&quot;]
    #过滤器的设置
    list_filter=[&quot;subject&quot;,&quot;name&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;subject&quot;,&quot;name&quot;]
    model_icon=&quot;fa fa-bath&quot;
class MarkAdmin(object):
	#可以显示的列
    list_display=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #查找的设置
    search_fields=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #过滤器的设置
    list_filter=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;,&quot;total_mark&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;user&quot;,&quot;subject&quot;,&quot;exam&quot;]
    model_icon=&quot;fa fa-bath&quot;


class ChangeIntoAdmin(object):
    # 指向自定义的页面
    object_list_template = 'mark_001.html'
    # 重写方法，把要展示的数据更新到 context
    def get_context(self):
        context = CommAdminView.get_context(self)
        #获取所有的用户
        exams = Mark.objects.all()
        #获取用户的一个属性，将显示到
        base_list = []
        #获取用户名
        name_list = []
        promote_list=[]
        for exam in exams:
            name_list.append(exam.user.nick_name)
            base_list.append(exam.base_mark)
            promote_list.append(exam.promote_mark)
        context.update(
            {
                'name_list': name_list,
                'base_list': base_list,
                'promote_list': promote_list,
            }
        )
        return context
#进行注册


xadmin.site.register(Keshi, ChangeIntoAdmin)
xadmin.site.register(Subject, SubjectAdmin)
xadmin.site.register(Question, QuestionAdmin)
xadmin.site.register(Exam, ExamAdmin)
xadmin.site.register(Mark, MarkAdmin)

</code></pre>
<pre><code class="language-python">#mark_001.html
{% extends 'xadmin/base_site.html' %}
{% load staticfiles %}
{# 去掉标签栏 #}
{% block content-nav %}

{% endblock %}
{% block extrastyle %}
     &lt;script src=&quot;{% static 'js/echarts.min.js' %}&quot;  charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://libs.baidu.com/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;
{% endblock %}
{% block content %}
&lt;div&gt;zhelishige
    &lt;div id=&quot;chart_1&quot; style=&quot;width:500px; height:350px&quot;&gt;在这里&lt;/div&gt;
    &lt;div id=&quot;chart_2&quot; style=&quot;width:500px; height:350px&quot;&gt;在这里&lt;/div&gt;
&lt;a&gt;这里还有个a标签&lt;/a&gt;
&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
        var myChart = echarts.init(document.getElementById('chart_1'));
option = {
    xAxis: {
        type: 'category',
        boundaryGap: false,
        data:{{ name_list|safe}},
    },
    yAxis: {
        type: 'value'
    },
    series: [{
        data:{{ base_list |safe}},
        type: 'line',
        areaStyle: {}
    }]
};
        myChart.setOption(option);
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
        var myChart = echarts.init(document.getElementById('chart_2'));
option = {
    xAxis: {
        type: 'category',
        boundaryGap: false,
        data:{{ name_list|safe}},
    },
    yAxis: {
        type: 'value'
    },
    series: [{
        data:{{ promote_list |safe}},
        type: 'line',
        areaStyle: {}
    }]
};
        myChart.setOption(option);
&lt;/script&gt;
{% endblock content %}

</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200423184715923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JSP实现九九乘法表]]></title>
        <id>https://906571331.github.io/yx.github.io/post/jsp-shi-xian-jiu-jiu-cheng-fa-biao/</id>
        <link href="https://906571331.github.io/yx.github.io/post/jsp-shi-xian-jiu-jiu-cheng-fa-biao/">
        </link>
        <updated>2020-04-22T01:45:44.000Z</updated>
        <content type="html"><![CDATA[<p>JSP实现九九乘法表</p>
<pre><code class="language-java">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;ISO-8859-1&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;%	String str=&quot;&quot;;
	for (int i=1;i&lt;=9;i++)
	{
		for (int j=1;j&lt;=9;j++)
		{
			str +=j+&quot;*&quot;+i+&quot;=&quot;+j*i;
			str+=&quot;&amp;nbsp;&quot;;
			str+=&quot;&amp;nbsp;&quot;;
			str+=&quot;&amp;nbsp;&quot;;
		}
		str+=&quot;&lt;br&gt;&quot;;
	}
%&gt;
&lt;%--这里的注释不会在压面中显示，但是这里会占一行 --%&gt;
&lt;table width='440' height='150' border='1' align=&quot;center&quot;&gt;
	&lt;tr&gt;
		&lt;td height=30 align=&quot;center&quot;&gt;JSP九九乘法表&lt;/td&gt;
	&lt;/tr&gt;
		&lt;tr&gt;
		&lt;td style=&quot;padding:3px&quot;&gt;&lt;%=str%&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200422093134511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django计算分数算法]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-ji-suan-fen-shu-suan-fa/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-ji-suan-fen-shu-suan-fa/">
        </link>
        <updated>2020-04-21T12:20:10.000Z</updated>
        <content type="html"><![CDATA[<h4 id="1最简单的计算分数">1.最简单的计算分数</h4>
<pre><code class="language-python">correct_answer=[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]
my_answer=[&quot;A&quot;,&quot;C&quot;,&quot;D&quot;]
mark=0
i=0
while i&lt;3:
    if correct_answer[i]==my_answer[i]:
        mark+=1
    i=i+1
print(mark)	
#运行结果：
1
</code></pre>
<h4 id="2分模块计算">2.分模块计算</h4>
<pre><code class="language-python">correct_answer=[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]
my_answer=[&quot;A&quot;,&quot;C&quot;,&quot;D&quot;]
mark=0
i=0
base_mark=0
promote_mark=0
major_mark=0
while i&lt;3:
    if i&lt;=1:
        if correct_answer[i]==my_answer[i]:
            base_mark+=1
            mark=mark+1
    else:
        if correct_answer[i]==my_answer[i]:
            mark=mark+1
    i=i+1
print(&quot;总分数为：&quot;,mark)
print(&quot;基础分数为：&quot;,base_mark)
</code></pre>
<h4 id="3分三个模块进行计算">3.分三个模块进行计算</h4>
<pre><code class="language-python">correct_answer=[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;A&quot;,&quot;B&quot;]
my_answer=[&quot;A&quot;,&quot;C&quot;,&quot;C&quot;,&quot;A&quot;,&quot;C&quot;,&quot;D&quot;,&quot;C&quot;,&quot;C&quot;,&quot;D&quot;,&quot;A&quot;]
mark=0
i=0
base_mark=0
promote_mark=0
major_mark=0
promote_mark=0
major_mark=0
while i&lt;=9:
    if i&lt;=3:
        if correct_answer[i]==my_answer[i]:
            base_mark+=1
            mark=mark+1
    elif i&lt;=6:
        if correct_answer[i]==my_answer[i]:
            mark=mark+1
            promote_mark+=1
    else:
        if correct_answer[i]==my_answer[i]:
            mark=mark+1
            major_mark+=1	
    i=i+1
print(&quot;总分数为：&quot;,mark)
print(&quot;基础分数为：&quot;,base_mark)
print(&quot;提升分数为：&quot;,promote_mark)
print(&quot;专业分数为：&quot;,major_mark)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200421083042661.png" alt="在这里插入图片描述" loading="lazy"><br>
4.html实现表单选项</p>
<pre><code class="language-html">		&lt;div class=&quot;layui-form-item&quot; pane=&quot;&quot;&gt;
			&lt;label class=&quot;layui-form-label&quot;&gt;单选框&lt;/label&gt;
			&lt;div class=&quot;layui-input-block&quot;&gt;
				&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; title=&quot;男&quot;&gt;A选项
				&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; title=&quot;女&quot;&gt;B选项
				&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; title=&quot;男&quot;&gt;C选项
				&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; title=&quot;女&quot;&gt;D选项
				&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
			&lt;/div&gt;
		&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200421084426516.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="4下午的工作">4.下午的工作</h4>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
from .models import Question,Exam,Subject
from django.db import models
# Create your views here.
class ExamView(View):
    def get(self,request):
        subjetcs=Subject.objects.get(id=1)
        print(subjetcs)
        question=Question.objects.get(id=1)
        print(id)
        context={
            &quot;question_statements&quot;:question.statments,
            &quot;op_A&quot;: question.op_A,
            &quot;op_B&quot;: question.op_B,
            &quot;op_C&quot;: question.op_C,
            &quot;op_D&quot;: question.op_D,
        }

        return render(request, &quot;exam.html&quot;,context=context)
    def post(self,request):
        question = request.POST.get('question')
        question2=request.POST.get('question2')
        options_list=re(request)
        print(question)
        print(question2)
        my_answer=[]
        my_answer.append(question)
        my_answer.append(question2)
        print(my_answer)
        print(options_list)
        return HttpResponse(&quot;success&quot;)
def re(request):
    option_list = []
    options=Question.objects.all()
    for option in options:
        option_list.append(option.correct_op)
    return option_list
</code></pre>
<pre><code class="language-python">#urls.py
from django.urls import path
from .views import ExamView
urlpatterns=[
    path(&quot;exam01/&quot;,ExamView.as_view())
]
</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from users.models import User

# Create your models here.

#科目
class Subject(models.Model):
	name 			= models.CharField(max_length=255,verbose_name=&quot;科目名称&quot;)
	description 	= models.TextField(verbose_name=&quot;科目描述&quot;)
	cover_image 	= models.ImageField(upload_to = 'cover/',blank=True)
	class Meta:
		verbose_name=&quot;科目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;问题&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments


class Exam(models.Model):
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	name = models.CharField(max_length=100,blank=True,verbose_name=&quot;本次考试名称&quot;)
	class Meta:
		verbose_name=&quot;考试&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Mark(models.Model):
	user = models.ForeignKey(User,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	exam = models.ForeignKey(Exam,on_delete=models.CASCADE,verbose_name=&quot;考试名称&quot;)
	total_marks = models.CharField(max_length=10,verbose_name=&quot;总分数&quot;)
	class Meta:
		verbose_name=&quot;分数&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.total_marks

# # class Rank(models.Model):
# # 	pass

</code></pre>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;这里是考试界面的首页&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    {% csrf_token %}
    &lt;tr&gt;
        &lt;td&gt;第一题,请选择答案&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;A:这是A选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;B:这是B选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;C:这是C选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;D:这是D选项&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
        &lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;第二题,请选择答案&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;A:这是A选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;B:这是B选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;C:这是C选项&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;D:这是D选项&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question2&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question2&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question2&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question2&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
    &lt;/tr&gt;&lt;br&gt;
        &lt;tr&gt;
        &lt;td&gt;{{ question_statements }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ op_A }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ op_B }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ op_C }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ op_D }}&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question_id&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question_id&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question_id&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;question_id&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
        &lt;br&gt;
    &lt;/tr&gt;
    &lt;input type=&quot;submit&quot; name=&quot;exam&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="效果">效果</h4>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200421201736839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="存在的问题是不能循环遍历出同一科目或者同一考试下的所有题目">存在的问题是：不能循环遍历出同一科目或者同一考试下的所有题目</h4>
<p><code>时间：2020年4月22日17:01:00</code><br>
前端已经实现循环遍历，实现方法为：</p>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
from .models import Question,Exam,Subject
from django.db import models
# Create your views here.
class ExamView(View):
    def get(self,request):
        subjetcs1=Subject.objects.get(id=1)
        print(subjetcs1)
        question=Question.objects.filter(subject=subjetcs1)
        context={
            &quot;question&quot;:question,
        }
        return render(request, &quot;exam.html&quot;,context=context)
    def post(self,request):
        question = request.POST.get('question')
        question2=request.POST.get('question2')
        options_list=re(request)
        print(question)
        print(question2)
        my_answer=[]
        my_answer.append(question)
        my_answer.append(question2)
        print(my_answer)
        print(options_list)
        return HttpResponse(&quot;success&quot;)
#打印所有题目的正确答案
def re(request):
    option_list = []
    options=Question.objects.all()
    for option in options:
        option_list.append(option.correct_op)
    return option_list

</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from users.models import User

# Create your models here.

#科目
class Subject(models.Model):
	name 			= models.CharField(max_length=255,verbose_name=&quot;科目名称&quot;)
	description 	= models.TextField(verbose_name=&quot;科目描述&quot;)
	cover_image 	= models.ImageField(upload_to = 'cover/',blank=True)
	class Meta:
		verbose_name=&quot;科目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;问题&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments


class Exam(models.Model):
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	name = models.CharField(max_length=100,blank=True,verbose_name=&quot;本次考试名称&quot;)
	class Meta:
		verbose_name=&quot;考试&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Mark(models.Model):
	user = models.ForeignKey(User,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	exam = models.ForeignKey(Exam,on_delete=models.CASCADE,verbose_name=&quot;考试名称&quot;)
	total_marks = models.CharField(max_length=10,verbose_name=&quot;总分数&quot;)
	class Meta:
		verbose_name=&quot;分数&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.total_marks

</code></pre>
<pre><code class="language-html">#exam.html
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    {% csrf_token %}
{#循环读出所有的试题#}
    {% for foo in question %}
       &lt;tr&gt;
        &lt;td&gt;{{ foo.statments}}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_A }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_B }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_C }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_D }}&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
        &lt;br&gt;
    &lt;/tr&gt;
    {% endfor %}
    &lt;input type=&quot;submit&quot; name=&quot;exam&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
</code></pre>
<p><code>时间：2020年4月22日17:45:31</code><br>
实现了自动取出题目，答题，自动计算分数</p>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
from .models import Question,Exam,Subject
from django.db import models
# Create your views here.
class ExamView(View):
    def get(self,request):
        #获取id=1的科目
        subjetcs1=Subject.objects.get(id=1)
        #打印这个科目的名称，可省去
        print(subjetcs1)
        #获取到这个科目下的所有试题
        question=Question.objects.filter(subject=subjetcs1)
        context={
            &quot;question&quot;:question,
        }
        return render(request, &quot;exam.html&quot;,context=context)
    def post(self,request):
        #设置用户答案为一个空列表
        my_answer = []
        #依次从前端的答案中读取用户的选择，一共3道题，所以，这里的4应该手动修改
        for i in range(1,4):
            answer1 = request.POST.get('%s'%i)
            my_answer.append(answer1)
            i+=1
        print(&quot;用户答案为：&quot;,my_answer)
        # 打印所有题目的正确答案
        correct_answer=re(request)
        print(&quot;正确答案为：&quot;,correct_answer)
        #基础，提升，专业分数,总分数均初始化为0
        base_mark=0
        promote_mark=0
        major_mark=0
        total_mark=0
        i=0
        while i &lt;= 2:
            if i &lt;= 0:
                if correct_answer[i] == my_answer[i]:
                    base_mark += 1
                    total_mark = total_mark + 1
            elif i &lt;= 1:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    promote_mark += 1
            else:
                if correct_answer[i] == my_answer[i]:
                    total_mark = total_mark + 1
                    major_mark += 1
            i = i + 1
        print(&quot;总分数为：&quot;, total_mark)
        print(&quot;基础分数为：&quot;, base_mark)
        print(&quot;提升分数为：&quot;, promote_mark)
        print(&quot;专业分数为：&quot;, major_mark)
        return HttpResponse(&quot;success&quot;)
#打印所有题目的正确答案
def re(request):
    option_list = []
    options=Question.objects.all()
    for option in options:
        option_list.append(option.correct_op)
    return option_list

</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from users.models import User

# Create your models here.

#科目
class Subject(models.Model):
	name 			= models.CharField(max_length=255,verbose_name=&quot;科目名称&quot;)
	description 	= models.TextField(verbose_name=&quot;科目描述&quot;)
	cover_image 	= models.ImageField(upload_to = 'cover/',blank=True)
	class Meta:
		verbose_name=&quot;科目&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Question(models.Model):
	choice = (('A','A'),('B','B'),('C','C'),('D','D'))
	subject 	= models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	statments 	= models.TextField(verbose_name=&quot;问题描述&quot;)
	op_A 	= models.CharField(max_length=1000)
	op_B 	= models.CharField(max_length=1000)
	op_C 	= models.CharField(max_length=1000)
	op_D 	= models.CharField(max_length=1000)
	correct_op 	= models.CharField(choices=choice,max_length=10)
	mark 		= models.IntegerField(default=1)
	class Meta:
		verbose_name=&quot;问题&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.statments


class Exam(models.Model):
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	name = models.CharField(max_length=100,blank=True,verbose_name=&quot;本次考试名称&quot;)
	class Meta:
		verbose_name=&quot;考试&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.name

class Mark(models.Model):
	user = models.ForeignKey(User,on_delete=models.CASCADE,verbose_name=&quot;用户&quot;)
	subject = models.ForeignKey(Subject,on_delete=models.CASCADE,verbose_name=&quot;考试科目&quot;)
	exam = models.ForeignKey(Exam,on_delete=models.CASCADE,verbose_name=&quot;考试名称&quot;)
	total_marks = models.CharField(max_length=10,verbose_name=&quot;总分数&quot;)
	class Meta:
		verbose_name=&quot;分数&quot;
		verbose_name_plural=verbose_name
	def __str__(self):
		return self.total_marks
</code></pre>
<pre><code class="language-html">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
{#    csrf_token保护#}
    {% csrf_token %}
    {#循环读出所有的试题#}
    {% for foo in question %}
       &lt;tr&gt;
        {#每一道题的描述#}
        &lt;td&gt;{{ foo.statments}}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_A }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_B }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_C }}&lt;/td&gt;&lt;br&gt;
        &lt;td&gt;{{ foo.op_D }}&lt;/td&gt;&lt;br&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;A&quot;&gt;A&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;B&quot;&gt;B&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;C&quot;&gt;C&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;{{ foo.id }}&quot; value=&quot;D&quot;&gt;D&lt;/td&gt;
        &lt;br&gt;
    &lt;/tr&gt;
    {% endfor %}
    &lt;input type=&quot;submit&quot; name=&quot;exam&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
</code></pre>
<p>实现效果：<br>
<img src="https://img-blog.csdnimg.cn/20200422174834865.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200422174819919.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django学习之表单]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-xue-xi-zhi-biao-dan/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-xue-xi-zhi-biao-dan/">
        </link>
        <updated>2020-04-21T02:36:46.000Z</updated>
        <content type="html"><![CDATA[<h4 id="1django表单1">1.django表单1</h4>
<pre><code class="language-python">#forms.py
from django import forms

class  MessageForms(forms.Form):
    title=forms.CharField(max_length=200,min_length=3,label=&quot;标题&quot;,error_messages={&quot;min_length&quot;:&quot;最好不能小于3个字符&quot;,&quot;max_length&quot;:&quot;最大不能超过200字符&quot;})
    content=forms.CharField(widget=forms.Textarea,label=&quot;内容&quot;,error_messages={&quot;required&quot;:&quot;必须要填这个字段&quot;})
    email=forms.EmailField(label=&quot;邮箱&quot;,error_messages={&quot;required&quot;:&quot;必须要填写邮箱地址&quot;})
    reply=forms.BooleanField(required=False,label=&quot;回复&quot;)
</code></pre>
<pre><code class="language-python">#urls.py
from django.urls import path
from .views import MessagesformsView

urlpatterns=[
    path(&quot;&quot;,MessagesformsView.as_view()),
]
</code></pre>
<pre><code class="language-bash">#views.py
from django.shortcuts import render
from .forms import MessageForms
from django.views.generic import View
from django.http import HttpResponse
from django.forms.utils import ErrorDict
# Create your views here.
class MessagesformsView(View):
    def get(self,request):
        form = MessageForms()
        return render(request,'forms.html',context={&quot;forms&quot;:form})
    def post(self,request):
        print(&quot;正在提交&quot;)
        form = MessageForms(request.POST)
        if form.is_valid():
            title = form.cleaned_data.get('title')
            content = form.cleaned_data.get('content')
            email = form.cleaned_data.get('email')
            reply = form.cleaned_data.get('reply')
            print('='*30)
            print(title)
            print(content)
            print(email)
            print(reply)
            print('='*30)
            return HttpResponse('success')
        else:
            print(form.errors.get_json_data())
            return HttpResponse('fail')
</code></pre>
<pre><code class="language-bash">#forms.html
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    &lt;table&gt;
        {{ forms.as_table }}
        &lt;tr&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/form&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200420202907648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="2djano表单2">2.djano表单2</h4>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from .forms import Myform
from django.views.generic import View
from django.http import HttpResponse

class From1View(View):
    def get(self,request):
        return render(request,'form2.html')
    def post(self,request):
        form=Myform(request.POST)
        if form.is_valid():
            url=form.cleaned_data.get(&quot;my_website&quot;)
            return HttpResponse(&quot;success&quot;)
        else:
            print(form.errors.get_json_data())
            return HttpResponse(&quot;fail&quot;)
</code></pre>
<pre><code class="language-python">#urls.py
from django.urls import path
from .views import From1View

urlpatterns=[
    path(&quot;form1/&quot;,From1View.as_view()),
]

</code></pre>
<pre><code class="language-python">#forms.py
from django import forms
class Myform(forms.Form):
    my_website=forms.URLField()
</code></pre>
<pre><code class="language-html">#form2.html
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    &lt;input type=&quot;text&quot; name=&quot;my_website&quot;&gt;
    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200420203151833.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="3验证合法的手机号">3.验证合法的手机号</h4>
<pre><code class="language-python">#views.py
class From1View(View):
    def get(self,request):
        return render(request,'form2.html')
    def post(self,request):
        form=Myform(request.POST)
        if form.is_valid():
            url=form.cleaned_data.get(&quot;telephone&quot;)
            return HttpResponse(&quot;success&quot;)
        else:
            print(form.errors.get_json_data())
            return HttpResponse(&quot;fail&quot;)
</code></pre>
<pre><code class="language-python">#urls.py
from django.urls import path
from .views import MessagesformsView,From1View

urlpatterns=[
    path(&quot;form1/&quot;,From1View.as_view()),
]

</code></pre>
<pre><code class="language-python">#forms.py
from django import forms
from django.core import validators
class Myform(forms.Form):
    telephone = forms.CharField(validators=[validators.RegexValidator(r'1[345678]\d{9}',message='请输入正确格式的手机号码！')])
</code></pre>
<pre><code class="language-html">#forms2.html
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    &lt;input type=&quot;text&quot; name=&quot;telephone&quot;&gt;
    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
</code></pre>
<h4 id="4在注册时查看是否已经注册的功能">4.在注册时查看是否已经注册的功能</h4>
<pre><code class="language-python">#models.py
from django.db import models

class User(models.Model):
    username = models.CharField(max_length=100)
    telephone = models.CharField(max_length=11)
</code></pre>
<pre><code class="language-python">#views.py
class RegisterView(View):
    def get(self,request):
        return render(request,'register.html')

    def post(self,request):
        form = RegisterForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            telephone = form.cleaned_data.get('telephone')
            User.objects.create(username=username,telephone=telephone)
            return HttpResponse('注册成功！')
        else:
            print(form.get_errors())
            return HttpResponse('注册失败！')
</code></pre>
<pre><code class="language-python">#urls.py
 path('register/', views.RegisterView.as_view()),
</code></pre>
<pre><code class="language-python">#forms.py
class RegisterForm(BaseForm):
    username = forms.CharField(max_length=100)
    telephone = forms.CharField(validators=[validators.RegexValidator(r'1[345678]\d{9}',message='请输入正确格式的手机号码！')])
    pwd1 = forms.CharField(max_length=16,min_length=6)
    pwd2 = forms.CharField(max_length=16,min_length=6)

    def clean_telephone(self):
    #只验证一个数值
        telephone = self.cleaned_data.get('telephone')
        exists = User.objects.filter(telephone=telephone).exists()
        if exists:
            raise forms.ValidationError(message='%s已经被注册！'%telephone)
        # 如果验证没有问题，一定要记得把telephone返回回去
        return telephone
        
    def clean(self):
        # 如果来到了clean方法，说明之前每一个字段都验证成功了，这里写是否相等的逻辑,这里一定是cleaned_data，调用get方法
        cleaned_data = super().clean()
        pwd1 = cleaned_data.get('pwd1')
        pwd2 = cleaned_data.get('pwd2')
        if pwd1 != pwd2:
            raise forms.ValidationError(message='两次密码输入不一致！')
        return cleaned_data
</code></pre>
<pre><code class="language-html">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    &lt;table&gt;
        &lt;tr&gt;
            &lt;td&gt;用户名：&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;手机号码：&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;telephone&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;密码：&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;pwd1&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;重复密码：&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;pwd2&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;注册&quot;&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/form&gt;
</code></pre>
<h4 id="5modelform">5.Modelform</h4>
<pre><code class="language-python">#forms.py
#encoding: utf-8
from django import forms
from .models import Book,User

class AddBookForm(forms.ModelForm):
    def clean_page(self):
        page = self.cleaned_data.get('page')
        if page &gt; 100:
            raise forms.ValidationError('页数不能大于100！')
        return page

    class Meta:
        model = Book
        # fields和exclude必须定义一个
        fields = &quot;__all__&quot;
        # fields = ['title','page']
        # exclude = ['price']
        error_messages = {
            'page':{
                'required': '请传入page参数！',
                'invalid': '请输入一个可用的page参数！'
            },
            'title': {
                'max_length': 'title不能超过100个字符！'
            },
            'price': {
                'max_value': '图书价格不能超过100元！'
            }
        }

class RegisterForm(forms.ModelForm):
    pwd1 = forms.CharField(max_length=16,min_length=6)
    pwd2 = forms.CharField(max_length=16,min_length=6)
    def clean(self):
        cleaned_data = super().clean()
        pwd1 = cleaned_data.get('pwd1')
        pwd2 = cleaned_data.get('pwd2')
        if pwd1 != pwd2:
            raise forms.ValidationError('两次密码输入不一致！')
        return cleaned_data

    class Meta:
        model = User
        exclude = ['password']

</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
from django.core import validators

class Book(models.Model):
    title = models.CharField(max_length=100)
    page = models.IntegerField()
    price = models.FloatField(validators=[validators.MaxValueValidator(limit_value=1000)])


class User(models.Model):
    username = models.CharField(max_length=100)
    password = models.CharField(max_length=16)
    telephone = models.CharField(max_length=11,validators=[validators.RegexValidator(r'1[345678]\d{9}')])

</code></pre>
<pre><code class="language-python">from django.shortcuts import render
from django.http import HttpResponse
from .forms import AddBookForm,RegisterForm
from django.views.decorators.http import require_POST

def index(request):
    return HttpResponse('index')

def add_book(request):
    form = AddBookForm(request.POST)
    if form.is_valid():
        # title = form.cleaned_data.get('title')
        # page = form.cleaned_data.get(&quot;page&quot;)
        # price = form.cleaned_data.get(&quot;price&quot;)
        # print('title:%s'%title)
        # print('page:%s'%page)
        # print('price:%s'%price)
        form.save()
        return HttpResponse('success')
    else:
        print(form.errors.get_json_data())
        return HttpResponse('FAIL')

@require_POST
def register(request):
    form = RegisterForm(request.POST)
    if form.is_valid():
        user = form.save(commit=False)
        user.password = form.cleaned_data.get('pwd1')
        user.save()
        return HttpResponse('success')
    else:
        return HttpResponse('fail')

</code></pre>
]]></content>
    </entry>
</feed>