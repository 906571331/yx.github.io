<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://906571331.github.io/yx.github.io/</id>
    <title>WuXin</title>
    <updated>2020-04-16T08:26:57.847Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://906571331.github.io/yx.github.io/"/>
    <link rel="self" href="https://906571331.github.io/yx.github.io/atom.xml"/>
    <subtitle>成千上万个门口，总有一个人要先走。</subtitle>
    <logo>https://906571331.github.io/yx.github.io/images/avatar.png</logo>
    <icon>https://906571331.github.io/yx.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, WuXin</rights>
    <entry>
        <title type="html"><![CDATA[django开发中遇到No module named 'captcha的问题解决方法]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-kai-fa-zhong-yu-dao-no-module-named-captcha-de-wen-ti-jie-jue-fang-fa/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-kai-fa-zhong-yu-dao-no-module-named-captcha-de-wen-ti-jie-jue-fang-fa/">
        </link>
        <updated>2020-04-16T08:26:23.000Z</updated>
        <content type="html"><![CDATA[<h4 id="在django开发中遇到如下问题">在Django开发中遇到如下问题</h4>
<pre><code class="language-python">    from captcha.fields import CaptchaField
ModuleNotFoundError: No module named 'captcha.fields'
</code></pre>
<h4 id="解决方法">解决方法：</h4>
<p>安装django-simple-captcha</p>
<pre><code class="language-python">pip install django-simple-captcha
</code></pre>
<h4 id="在开发中遇到以下错误">在开发中遇到以下错误</h4>
<pre><code class="language-python">HINT: Add or change a related_name argument to the definition for 'User.user_permissions' or 'UserProfile.user_permissions'.
</code></pre>
<p>解决方案：在settings.py中添加：</p>
<pre><code class="language-python">AUTH_USER_MODEL = 'Users.UserProfile'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django的开发中遇到的一些问题以及解决方案，包括Django-xadmin的优化]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-de-kai-fa-zhong-yu-dao-de-yi-xie-wen-ti-yi-ji-jie-jue-fang-an-bao-gua-django-xadmin-de-you-hua/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-de-kai-fa-zhong-yu-dao-de-yi-xie-wen-ti-yi-ji-jie-jue-fang-an-bao-gua-django-xadmin-de-you-hua/">
        </link>
        <updated>2020-04-15T12:01:09.000Z</updated>
        <content type="html"><![CDATA[<h4 id="1python报错">1.Python报错：</h4>
<pre><code class="language-Python">   	from django.urls import path, include
ImportError: cannot import name 'path'
</code></pre>
<p>解决方法：可能是Django的版本问题，查看当前虚拟环境的Django版本</p>
<pre><code class="language-python">import django
django._get_version()
</code></pre>
<p>如果Django的版本低于之前的版本，使用pip install django==版本号<br>
升级Django到对应的版本</p>
<h4 id="2django中引入写好的文件即服务器不需要传入任何参数只需修改urlspy其他不用修改用途编写abouthtml">2.django中引入写好的文件，即服务器不需要传入任何参数,只需修改urls.py，其他不用修改，用途：编写about.html</h4>
<pre><code class="language-python">#urls.py
from django.views.generic import TemplateView
path(&quot;about/&quot;,TemplateView.as_view(template_name=&quot;about.html&quot;)),
</code></pre>
<h4 id="3ubuntu中python环境下载mysqlclient出错">3.ubuntu中Python环境下载mysqlclient出错：</h4>
<pre><code class="language-python">x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fno-strict-aliasing -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security -fPIC -I/tmp/pip-build-Hqt4sF/lxml/src/lxml/includes -I/usr/include/python2.7 -c src/lxml/lxml.etree.c -o build/temp.linux-x86_64-2.7/src/lxml/lxml.etree.o -w

In file included from src/lxml/lxml.etree.c:239:0:

/tmp/pip-build-Hqt4sF/lxml/src/lxml/includes/etree_defs.h:14:31: fatal error: libxml/xmlversion.h: No such file or directory

compilation terminated.

error: command 'x86_64-linux-gnu-gcc' failed with exit status 1

----------------------------------------
  Can't roll back lxml; was not uninstalled
Cleaning up...
Command /usr/bin/python -c &quot;import setuptools, tokenize;__file__='/tmp/pip-build-Hqt4sF/lxml/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))&quot; install --record /tmp/pip-tUvZhB-record/install-record.txt --single-version-externally-managed --compile failed with error code 1 in /tmp/pip-build-Hqt4sF/lxml
Storing debug log for failure in /home/aaa/.pip/pip.log
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200411085849604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<pre><code class="language-python">sudo apt-get install mysql-server mysql-client
#然后mysql -V查看mysql是否安装成功
sudo  apt-get install libmysqlclient-dev python3-dev
#然后
pip install mysqlclient就不会报错找不到'mysql_config'了
</code></pre>
<h4 id="4创建数据库时设定默认编码为utf8">4.创建数据库时设定默认编码为utf8:</h4>
<pre><code class="language-mysql"> create database db_name default charset utf8 collate utf8_general_ci;
</code></pre>
<h4 id="下载django时指定国内的下载源">下载Django时指定国内的下载源：</h4>
<pre><code class="language-python">pip install django==2.1.7 -i https://pypi.douban.com/simple
</code></pre>
<h4 id="5modulenotfounderror-no-module-named-import_export">5.ModuleNotFoundError: No module named 'import_export'</h4>
<p>安装这个库</p>
<pre><code class="language-python">pip install django-import-export
#不能简单的安装import_export
</code></pre>
<p>并且在settings.py中注册这个app</p>
<pre><code class="language-python">INSTALLED_APPS = [
	'import_export',
]
</code></pre>
<p>xadmin安装时需要注册的两个app</p>
<pre><code class="language-python">INSTALLED_APPS = [
	'xadmin',
    'crispy_forms',
]
</code></pre>
<h4 id="6在pip安装时指定源的方法">6.在pip安装时，指定源的方法：</h4>
<h5 id="国内常用源列表">国内常用源列表</h5>
<p>清华大学 https://pypi.tuna.tsinghua.edu.cn/simple<br>
中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple<br>
阿里云 http://mirrors.aliyun.com/pypi/simple<br>
中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple<br>
豆瓣 (douban) http://pypi.douban.com/simple<br>
1.安装时临时指定国内源</p>
<pre><code class="language-python">pip3 install sweetest  -i https://pypi.tuna.tsinghua.edu.cn/simple
如果提示 host 不被信任可以加上参数 –trusted-host
pip3 install sweetest  -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host  pypi.tuna.tsinghua.edu.cn
</code></pre>
<h4 id="7django-settingspy中设置为中文">7.django settings.py中设置为中文</h4>
<pre><code class="language-python">LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = True
</code></pre>
<h4 id="8xadmin中的设置">8.xadmin中的设置</h4>
<pre><code class="language-python">#导入xadmin
import xadmin
#从当前的app中导入模型，以及模型中的类
from .models import Book,Category,Article
#定义全局，site_title为左上角的标题，site_footer为中间最下方的@后的文字
class Globlesettings(object):
    site_title=&quot;后台管理页面&quot;
    site_footer=&quot;后台管理页面所有&quot;
    #左侧菜单栏是否可以重叠
    menu_style = &quot;accordion&quot;
#设置xadmin中的主体
class Basesettings(object):
	#enable_themes设置为true时，只显示主题图表与Bootstrap2一个主体
    enable_themes=True
    #use_bootswatch=True时，可以显示很多种主题
    use_bootswatch=True
class BookAdmin(object):
	#可以显示的列
    list_display=[&quot;id&quot;,&quot;name&quot;,&quot;author&quot;]
    #查找的设置
    search_fields=[&quot;id&quot;,&quot;name&quot;,&quot;author&quot;]
    #过滤器的设置
    list_filter=[&quot;id&quot;,&quot;name&quot;,&quot;author&quot;]
    #可以在当前页面编辑的列
    list_editable=[&quot;name&quot;,&quot;author&quot;]
    model_icon=&quot;fa fa-bath&quot;
</code></pre>
<h4 id="9models中的配置">9.models中的配置</h4>
<pre><code class="language-python">    class Meta:
        #模型的名字
        verbose_name=&quot;文章&quot;
        #复数时显示以前的名字，不添加s
        verbose_name_plural=verbose_name
    def __str__(self):
        return self.name
</code></pre>
<h4 id="10要使后台管理系统中在左侧的名字显示为中文名设置方法如下">10.要使后台管理系统中在左侧的名字显示为中文名，设置方法如下：</h4>
<pre><code class="language-python">#settings.py
INSTALLED_APPS = [
	'article.apps.ArticleConfig',
]
#article/apps.py
class ArticleConfig(AppConfig):
    name = 'article'
    verbose_name = &quot;文章模块&quot;
</code></pre>
<h4 id="11xadmin重定向页面">11.xadmin重定向页面：</h4>
<pre><code class="language-python">#adminx.py
class ChangeIntoAdmin(object):
    # 指向自定义的页面
    object_list_template = 'base111.html'
    # 重写方法，把要展示的数据更新到 context
    def get_context(self):
        context = CommAdminView.get_context(self)
        bill_message = Book.objects.all()
        context.update(
            {
                'title': '转入分析',
            }
        )
        return context
xadmin.site.register(Book, ChangeIntoAdmin)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django学习笔记数据库（二）]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-xue-xi-bi-ji-shu-ju-ku-er/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-xue-xi-bi-ji-shu-ju-ku-er/">
        </link>
        <updated>2020-04-11T00:48:55.000Z</updated>
        <content type="html"><![CDATA[<h4 id="1外键增加数据操作">1.外键：增加数据操作</h4>
<pre><code class="language-python">#models.py
#函数，可以提高代码的利用率
def set_default():
	return Category.object.get(pk=2)
class Category(models.Model):
    name=models.CharField(max_length=100)
class Article(models.Model):
    title=models.CharField(max_length=100)
    content=models.TextField()
    category=models.ForeignKey(&quot;Category&quot;,on_delete=models.CASCADE,bull=True)
    
#设置默认值    
category=models.ForeignKey(&quot;Category&quot;,on_delete=models.SET_DEFAULT,default=Category.objects.get(pk=2))
category=models.ForeignKey(&quot;Category&quot;,on_delete=models.SET(Category.objects.get(pk=2)))
category=models.ForeignKey(&quot;Category&quot;,on_delete=models.SET(set_default))
#使用的是别的app的外键，    
forntuser=models.ForeignKey(&quot;app_name.frontname&quot;,on_delete=models.CASCADE)
#on_delete=donothing，完全依靠数据库级别的约束
</code></pre>
<pre><code class="language-python">#views.py
def indexxxx(request):
    category=Category(name=&quot;最新文章&quot;)
    category.save()
    article=Article(title=&quot;标题&quot;,content=&quot;这是内容&quot;)
    article.category=category
    article.save()
    return HttpResponse(&quot;success 添加文章和标签&quot;)
</code></pre>
<p>外键引用自己，可以用于盖楼式评论</p>
<pre><code class="language-python">class comment(models.Model):
    content=models.TextField()
    origin_comment=models.ForeignKey(&quot;self&quot;,on_delete=models.CASCADE)
    
#或者写成    origin_comment=models.ForeignKey(&quot;comment&quot;,on_delete=models.CASCADE)
#或者写成    origin_comment=models.ForeignKey(&quot;article.comment&quot;,on_delete=models.CASCADE)
</code></pre>
<h4 id="2外键删除数据操作">2.外键：删除数据操作</h4>
<pre><code class="language-python">#views.py,级联操作，category删除时，文章也删除
def delete_view(request):
    category=Category.objects.get(pk=8)
    category.delete()
    return HttpResponse(&quot;delete success&quot;)
</code></pre>
<h1 id="表关系笔记">表关系笔记：</h1>
<h2 id="一对多">一对多：</h2>
<ol>
<li>应用场景：比如文章和作者之间的关系。一个文章只能由一个作者编写，但是一个作者可以写多篇文章。文章和作者之间的关系就是典型的多对一的关系。</li>
<li>实现方式：一对多或者多对一，都是通过<code>ForeignKey</code>来实现的。还是以文章和作者的案例进行讲解。</li>
</ol>
<pre><code class="language-python">class User(models.Model):
    username = models.CharField(max_length=20)
    password = models.CharField(max_length=100)

class Article(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    author = models.ForeignKey(&quot;User&quot;,on_delete=models.CASCADE)
</code></pre>
<p>那么以后在给<code>Article</code>对象指定<code>author</code>，就可以使用以下代码来完成：</p>
<pre><code class="language-python">article = Article(title='abc',content='123')
author = User(username='zhiliao',password='111111')
# 要先保存到数据库中
author.save()
article.author = author
article.save()
</code></pre>
<p>并且以后如果想要获取某个用户下所有的文章，可以通过<code>article_set</code>来实现。示例代码如下：</p>
<pre><code class="language-python">user = User.objects.first()
# 获取第一个用户写的所有文章
articles = user.article_set.all()
for article in articles:
    print(article)
</code></pre>
<p>获取一个标签下的所有文章</p>
<pre><code class="language-python">#获取一个标签的所有文章
category=Category.objects.first()
articles=category.article_set.all()
for article in articles:
    print(article)
</code></pre>
<p>并且如果想要将文章添加到某个分类中。可以使用一下的方式：</p>
<pre><code class="language-python">category = Category.objects.first()
article = Article(title='bbb',content='vvv')
article.author = FrontUser.objects.first()
article.save()
category.article_set.add(article,bulk=False)
category.save()
</code></pre>
<ul>
<li>使用<code>bulk=False</code>，那么Django会自动的保存article，而不需要在添加到category之前先保存article。</li>
<li>或者是另外一种解决方式是，在添加到<code>category.article_set</code>中之前，先将<code>article</code>保存到数据库中。但是如果<code>article.category</code>不能为空，那么就产生一种死循环了，article没有<code>category</code>不能保存，而将article添加到<code>cateogry.artile_set</code>中，又需要article之前是已经存储到数据库中的。</li>
<li>如果是上面的那种需求，建议使用<code>bulk=False</code>的解决方案。</li>
</ul>
<h2 id="一对一">一对一：</h2>
<ol>
<li>在Django中一对一是通过<code>models.OnetToOneField</code>来实现的。这个<code>OneToOneField</code>其实本质上就是一个外键，只不过这个外键有一个<code>唯一约束（unique key）</code>，来实现一对一。</li>
<li>以后如果想要反向引用，那么是通过引用的模型的名字转换为小写的形式进行访问。比如以下模型：<pre><code class="language-python">class FrontUser(models.Model):
    username = models.CharField(max_length=200)

class UserExtension(models.Model):
    school = models.CharField(max_length=100)
    user = models.OneToOneField(&quot;FrontUser&quot;,on_delete=models.CASCADE)

# 通过userextension来访问UserExtension对象
user = FrontUser.objects.first()
print(user.userextension)
</code></pre>
</li>
</ol>
<pre><code class="language-python">def one_to_one_view(request):
	user=FrontUser.objects.first()
	extension=UserExtension(schoole='zhiliao')
	extension.user=user
	extension.save()
	return HttpResponse(&quot;success&quot;)
</code></pre>
<pre><code>`UserExtension`的对象，可以通过`user`来访问到对应的user对象。并且`FrontUser`对象可以使用`userextension`来访问对应的`UserExtension`对象。
如果不想使用Django默认的引用属性名字。那么可以在`OneToOneField`中添加一个`related_name`参数。示例代码如下：
```python
class FrontUser(models.Model):
    username = models.CharField(max_length=200)

class UserExtension(models.Model):
    school = models.CharField(max_length=100)
    user = models.OneToOneField(&quot;FrontUser&quot;,on_delete=models.CASCADE,related_name='extension')

# 通过extension来访问到UserExtension对象
user = FrontUser.objects.first()
print(user.extension)
```
那么以后就`FrontUser`的对象就可以通过`extension`属性来访问到对应的`UserExtension`对象。
</code></pre>
<h2 id="多对多">多对多：</h2>
<ol>
<li>
<p>应用场景：比如文章和标签的关系。一篇文章可以有多个标签，一个标签可以被多个文章所引用。因此标签和文章的关系是典型的多对多的关系。</p>
</li>
<li>
<p>实现方式：<code>Django</code>为这种多对多的实现提供了专门的<code>Field</code>。叫做<code>ManyToManyField</code>。还是拿文章和标签为例进行讲解。示例代码如下：</p>
</li>
</ol>
<pre><code class="language-python">class Article(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    tags = models.ManyToManyField(&quot;Tag&quot;,related_name=&quot;articles&quot;)

class Tag(models.Model):
    name = models.CharField(max_length=50)
</code></pre>
<p>在数据库层面，实际上<code>Django</code>是为这种多对多的关系建立了一个中间表。这个中间表分别定义了两个外键，引用到<code>article</code>和<code>tag</code>两张表的主键。</p>
<h1 id="查询条件笔记">查询条件笔记：</h1>
<ol>
<li>
<p>exact：在底层会被翻译成<code>=</code>。</p>
</li>
<li>
<p>iexact：在底层会被翻译成<code>LIKE</code>。</p>
<ul>
<li>LIKE和=：大部分情况下都是等价的，只有少数情况下是不等价的。</li>
<li>exict和iexact：他们的区别其实就是LIKE和=的区别，因为exact会被翻译成=，而iexact会被翻译成LIKE。</li>
<li>因为<code>field__exact=xxx</code>其实等价于<code>filed=xxx</code>，因此我们直接使用<code>filed=xxx</code>就可以了，并且因为大部分情况<code>exact</code>和<code>iexact</code>又是等价的，因此我们以后直接使用<code>field=xxx</code>就可以了。</li>
</ul>
</li>
<li>
<p>QuerySet.query：<code>query</code>可以用来查看这个<code>ORM</code>查询语句最终被翻译成的<code>SQL</code>语句。但是<code>query</code>只能被用在<code>QuerySet</code>对象上，不能用在普通的<code>ORM模型</code>上。因此如果你的查询语句是通过<code>get</code>来获取数据的，那么就不能使用<code>query</code>，因为<code>get</code>返回的是满足条件的<code>ORM</code>模型，而不是<code>QuerySet</code>。如果你是通过<code>filter</code>等其他返回<code>QuerySet</code>的方法查询的，那么就可以使用<code>query</code>。</p>
</li>
<li>
<p>contains：使用大小写敏感的判断，某个字符串是否在指定的字段中。这个判断条件会使用大小敏感，因此在被翻译成<code>SQL</code>语句的时候，会使用<code>like binary</code>，而<code>like binary</code>就是使用大小写敏感的。</p>
</li>
<li>
<p>icontains：使用大小写不敏感的判断，某个字符串是否被包含在指定的字段中。这个查询语句在被翻译成<code>SQL</code>的时候，使用的是<code>like</code>，而<code>like</code>在<code>MySQL</code>层面就是不区分大小写的。</p>
</li>
<li>
<p>contains和icontains：在被翻译成<code>SQL</code>的时候使用的是<code>%hello%</code>，就是只要整个字符串中出现了<code>hello</code>都能过够被找到，而<code>iexact</code>没有百分号，那么意味着只有完全相等的时候才会被匹配到。</p>
</li>
<li>
<p>in：可以直接指定某个字段的是否在某个集合中。示例代码如下：</p>
<pre><code class="language-python">articles = Article.objects.filter(id__in=[1,2,3])
</code></pre>
<p>也可以通过其他的表的字段来判断是否在某个集合中。示例代码如下：</p>
<pre><code class="language-python">categories = Category.objects.filter(article__id__in=[1,2,3])
</code></pre>
<p>如果要判断相关联的表的字段，那么也是通过<code>__</code>来连接。并且在做关联查询的时候，不需要写<code>models_set</code>，直接使用<code>模型的名字的小写化</code>就可以了。比如通过分类去查找相应的文章，那么通过<code>article__id__in</code>就可以了，而不是写成<code>article_set__id__in</code>的形式。当然如果你不想使用默认的形式，可以在外键定义的时候传递<code>related_query_name</code>来指定反向查询的名字。示例代码如下：</p>
<pre><code class="language-python">class Category(models.Model):
    name = models.CharField(max_length=100)

    class Meta:
        db_table = 'category'


class Article(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    cateogry = models.ForeignKey(&quot;Category&quot;,on_delete=models.CASCADE,null=True,related_query_name='articles')

    class Meta:
        db_table = 'article'
</code></pre>
<p>因为在<code>cateogry</code>的<code>ForeignKey</code>中指定了<code>related_query_name</code>为<code>articles</code>，因此你不能再使用<code>article</code>来进行反向查询了。这时候就需要通过<code>articles__id__in</code>来进行反向查询。</p>
<p>反向查询是将模型名字小写化。比如<code>article__in</code>。可以通过<code>related_query_name</code>来指定自己的方式，而不使用默认的方式。<br>
反向引用是将模型名字小写化，然后再加上<code>_set</code>，比如<code>article_set</code>，可以通过<code>related_name</code>来指定自己的方式，而不是用默认的方式。</p>
<p>并且，如果在做反向查询的时候，如果查询的字段就是模型的主键，那么可以省略掉这个字段，直接写成<code>article__in</code>就可以了，不需要这个<code>id</code>了。</p>
<p><code>in</code>不仅仅可以指定列表/元组，还可以为<code>QuerySet</code>。比如要查询“文章标题中包含有hello的所有分类”，那么可以通过以下代码来实现：</p>
<pre><code class="language-python">articles = Article.objects.filter(title__icontains='hello')
categories = Category.objects.filter(articles__in=articles)
for cateogry in categories:
    print(cateogry)
</code></pre>
</li>
<li>
<p>gt、gte、lt、lte：代表的是大于、大于等于、小于、小于等于的条件。示例代码如下：</p>
<pre><code class="language-python">articles = Article.objects.filter(id__lte=3)
</code></pre>
</li>
<li>
<p>startswith、istartswith、endswith、iendswith：表示以某个值开始，不区分大小写的以某个值开始、以某个值结束、不区分大小写的以某个值结束。示例代码如下：</p>
<pre><code class="language-python">articles = Article.objects.filter(title__endswith=&quot;hello&quot;)
</code></pre>
</li>
<li>
<p>关于时间的查询条件：</p>
<ul>
<li>
<p>range：可以指定一个时间段。并且时间应该标记为<code>aware</code>时间，不然django会报警告。示例代码如下：</p>
<pre><code class="language-python">start_time = make_aware(datetime(year=2018,month=4,day=4,hour=17,minute=0,second=0))
end_time = make_aware(datetime(year=2018,month=4,day=4,hour=18,minute=0,second=0))
articles = Article.objects.filter(create_time__range=(start_time,end_time))
print(articles.query)
print(articles)
</code></pre>
</li>
<li>
<p>date：用年月日来进行过滤。如果想要使用这个过滤条件，那么前提必须要在<code>MySQL</code>中添加好那些时区文件。如何添加呢？参考教案。示例代码如下：</p>
<pre><code class="language-python">articles = Article.objects.filter(create_time__date=datetime(year=2018,month=4,day=4))
</code></pre>
</li>
<li>
<p>year/month/day：表示根据年/月/日进行查找。示例代码如下：</p>
<pre><code class="language-python">articles = Article.objects.filter(create_time__year__gte=2018)
</code></pre>
</li>
<li>
<p>week_day：根据星期来进行查找。1表示星期天，7表示星期六，2-6代表的是星期一到星期五。比如要查找星期三的所有文章，那么可以通过以下代码来实现：</p>
<pre><code class="language-python">articles = Article.objects.filter(create_time__week_day=4)
</code></pre>
</li>
<li>
<p>time：根据分时秒来进行查找。如果要具体到秒，一般比较难匹配到，可以使用区间的方式来进行查找。区间使用<code>range</code>条件。比如想要获取17时/10分/27-28秒之间的文章，那么可以通过以下代码来实现：</p>
<pre><code class="language-python">start_time = time(hour=17,minute=10,second=27)
end_time = time(hour=17,minute=10,second=28)
articles = Article.objects.filter(create_time__time__range=(start_time,end_time))
</code></pre>
</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[djang学习笔记数据库（一）]]></title>
        <id>https://906571331.github.io/yx.github.io/post/djang-xue-xi-bi-ji-shu-ju-ku-yi/</id>
        <link href="https://906571331.github.io/yx.github.io/post/djang-xue-xi-bi-ji-shu-ju-ku-yi/">
        </link>
        <updated>2020-04-08T07:52:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="本篇博客记录了博主在学习django操作数据库时的笔记">本篇博客记录了博主在学习Django操作数据库时的笔记：</h3>
<h4 id="1在有表单的页面viewspy的处理方式">1.在有表单的页面，views.py的处理方式:</h4>
<pre><code class="language-python">#在urls.py中有个url是name=index
#views.py
def add_book(request):
	if request.method=='GET':
		return render(request,&quot;add_book.html&quot;)
	else:
		name=request.POST.get('name')
		author=request.POST.get('author')
		return redirect(reverse('index'))
#url中传递多个值
/?P&lt;book_id&gt;\d+/
</code></pre>
<h4 id="2最简单的orm模型">2.最简单的ORM模型</h4>
<pre><code class="language-python">from djangfo.db import models
#创建一个模型，对应表中的的一张表
class Book(models.Model):
	#创建模型中的一个属性，对应表中的一个字段，id可有可无，AutoField是自动增长，可以设置为主键
	id=models.Autofield(primary_key=True)
	#当属性是CharField时，必须制定最大长度
	name=models.CharField(max_length=100,null=Flase)
	author=models.CharField(max_length=100)
	price = models.FloatField()
#一个模型的对象，对应数据库表中的一条数据
book =Book(name=&quot;三国演义&quot;，author=&quot;罗贯中&quot;，price=100)
book.save()
book.delete()
</code></pre>
<h4 id="3数据库迁移的两条命令">3.数据库迁移的两条命令</h4>
<pre><code class="language-bash">python manage.py makemigrations
python manage.py migrate
</code></pre>
<h4 id="4向数据库中插入数据">4.向数据库中插入数据</h4>
<pre><code class="language-python">#views.py
from .models import Book
from django.http import HttpResponse
def index(request):
    #使用ORM添加一条数据到数据库中
    book=Book(name=&quot;三国演义&quot;,author=&quot;罗贯中&quot;,price=100)
    book.save()
    return HttpResponse(&quot;图书添加成功&quot;)
</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
#将普通的类映射为数据库中的ORM模型
#必须将父类设置为models.Model类，或其子类
class Book(models.Model):
    #AutoField代表是自动增长
    id=models.AutoField(primary_key=True)
    #设置CharField时必须设置最大长度，Null=False不能为空
    name=models.CharField(max_length=100,null=False)
    author=models.CharField(max_length=100,null=False)
    price=models.FloatField(null=False,default=0)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200407091940656.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/2020040709195160.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="5查找数据一">5.查找数据（一）</h4>
<pre><code class="language-python">#views.py
from .models import Book
from django.http import HttpResponse
def index(request):
    #使用主键查找
    Book.objects.get(pk=1)
    return HttpResponse(&quot;图书查找成功&quot;)
</code></pre>
<pre><code class="language-python">#models.py
from django.db import models
#将普通的类映射为数据库中的ORM模型
#必须将父类设置为models.Model类，或其子类
class Book(models.Model):
    #AutoField代表是自动增长
    id=models.AutoField(primary_key=True)
    #设置CharField时必须设置最大长度，Null=False不能为空
    name=models.CharField(max_length=100,null=False)
    author=models.CharField(max_length=100,null=False)
    price=models.FloatField(null=False,default=0)
</code></pre>
<h4 id="6查找数据二">6.查找数据（二）</h4>
<pre><code class="language-python">#models.py
from django.db import models
#将普通的类映射为数据库中的ORM模型
#必须将父类设置为models.Model类，或其子类
class Book(models.Model):
    #AutoField代表是自动增长
    id=models.AutoField(primary_key=True)
    #设置CharField时必须设置最大长度，Null=False不能为空
    name=models.CharField(max_length=100,null=False)
    author=models.CharField(max_length=100,null=False)
    price=models.FloatField(null=False,default=0)
    #将以这种形式返回
    def __str__(self):
        return &quot;&lt;Book:({name},{author},{price})&gt;&quot;.format(name=self.name,author=self.author,price=self.price)
</code></pre>
<pre><code class="language-python">#views.py
from .models import Book
from django.http import HttpResponse
def index(request):
    #使用ORM添加一条数据到数据库中
    # book=Book(name=&quot;三国演义&quot;,author=&quot;罗贯中&quot;,price=100)
    # book.save()
    book=Book.objects.get(pk=1)
    print(book)
    return HttpResponse(book)
</code></pre>
<h4 id="7过滤查找">7.过滤查找</h4>
<pre><code class="language-python">#views.py
#.first返回第一条
def index(request):
    #使用ORM添加一条数据到数据库中
    # book=Book(name=&quot;三国演义&quot;,author=&quot;罗贯中&quot;,price=100)
    # book.save()
    # book=Book.objects.get(pk=1)
    # print(book)
    books=Book.objects.filter(name=&quot;三国演义&quot;).first()
    print(books)
    return HttpResponse(&quot;查找成功&quot;)
</code></pre>
<p>第一条为不加first，第二条为加.first<br>
<img src="https://img-blog.csdnimg.cn/20200407093859633.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="8删除数据">8.删除数据</h4>
<pre><code class="language-python">def index(request):    
	book=Book.objects.get(pk=1)
    book.delete()
    return HttpResponse(&quot;删除成功&quot;)
</code></pre>
<h4 id="9修改数据">9.修改数据</h4>
<pre><code class="language-python">def index(request):    
	book=Book.objects.get(pk=1)
	book.price=90
    book.save()
    return HttpResponse(&quot;修改成功&quot;)
</code></pre>
<h4 id="10field详解">10.field详解</h4>
<pre><code class="language-python">#必须设置primary_key，否则为一个普通的字段
id=models.BigAutoField(primary_key=true)
#如果删除则不显示
removed=models.NullBooleanField()
同时在views.py中如下设置
article=Article(removed=False)
article.save()
</code></pre>
<h4 id="python中的时区转换">python中的时区转换</h4>
<p>pytz库是专门用来处理时区的库</p>
<pre><code class="language-python">&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; now=datetime.now()
&gt;&gt;&gt; now
datetime.datetime(2020, 4, 7, 2, 27, 35, 710567)
&gt;&gt;&gt; import patz
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ModuleNotFoundError: No module named 'patz'
&gt;&gt;&gt; import pytz
&gt;&gt;&gt; utc_timezone=pytz.timezone('UTC')
&gt;&gt;&gt; now.astimezone(utc_timezone)
datetime.datetime(2020, 4, 7, 9, 27, 35, 710567, tzinfo=&lt;UTC&gt;)
&gt;&gt;&gt; now
datetime.datetime(2020, 4, 7, 2, 27, 35, 710567)

</code></pre>
<h1 id="常用field笔记">常用Field笔记：</h1>
<h2 id="navie时间和aware时间">navie时间和aware时间：</h2>
<h3 id="什么是navie时间什么是aware时间">什么是navie时间？什么是aware时间？</h3>
<ol>
<li>navie时间：不知道自己的时间表示的是哪个时区的。也就是不知道自己几斤几两。比较幼稚。</li>
<li>aware时间：知道自己的时间表示的是哪个时区的。也就是比较清醒。</li>
</ol>
<h3 id="pytz库">pytz库：</h3>
<p>专门用来处理时区的库。这个库会经常更新一些时区的数据，不需要我们担心。并且这个库在安装Django的时候会默认的安装。如果没有安装，那么可以通过<code>pip install pytz</code>的方式进行安装。</p>
<h3 id="astimezone方法">astimezone方法：</h3>
<p>将一个时区的时间转换为另外一个时区的时间。这个方法只能被<code>aware</code>类型的时间调用。不能被<code>navie</code>类型的时间调用。<br>
示例代码如下：</p>
<pre><code class="language-python">import pytz
from datetime import datetime
now = datetime.now() # 这是一个navie类型的时间
utc_timezone = pytz.timezone(&quot;UTC&quot;) # 定义UTC的时区对象
utc_now = now.astimezone(utc_timezone) # 将当前的时间转换为UTC时区的时间
&gt;&gt; ValueError: astimezone() cannot be applied to a naive datetime # 会抛出一个异常，原因就是因为navie类型的时间不能调用astimezone方法


now = now.replace(tzinfo=pytz.timezone('Asia/Shanghai'))
utc_now = now.astimezone(utc_timezone)
# 这时候就可以正确的转换。
</code></pre>
<h3 id="replace方法">replace方法：</h3>
<p>可以将一个时间的某些属性进行更改。</p>
<h3 id="djangoutilstimezonenow方法">django.utils.timezone.now方法：</h3>
<p>会根据<code>settings.py</code>中是否设置了<code>USE_TZ=True</code>获取当前的时间。如果设置了，那么就获取一个<code>aware</code>类型的<code>UTC</code>时间。如果没有设置，那么就会获取一个<code>navie</code>类型的时间。</p>
<pre><code class="language-python">#models.py
create_time=models.DateTimeField(default=timezone.now())
#views.py
book=Book(create_time=now())
book.save()
</code></pre>
<p>和本地时间差8个小时<br>
<img src="https://img-blog.csdnimg.cn/20200407180926600.png" alt="在这里插入图片描述" loading="lazy"><br>
在本地显示时间时：<br>
<img src="https://img-blog.csdnimg.cn/20200407182550898.png" alt="在这里插入图片描述" loading="lazy"></p>
<pre><code class="language-python">#models.py
create_time=models.DateTimeField(default=timezone.now())
#auto_now_add第一次保存进数据库时
create_time=models.DateTimeField(auto_now_add=True)
</code></pre>
<pre><code class="language-python"> #views.py
def index()request:
     book=Book.objects.get(pk=3)
     create_time=book.create_time
     return render(request,&quot;inde.html&quot;,context={'create_time':create_time})
</code></pre>
<pre><code class="language-html">#在头部引入
{% load tz %}
#在合适的地方，不加localtime也可以正确显示
{{ create_time|localtime }}
</code></pre>
<h3 id="djangoutilstimezonelocaltime方法">django.utils.timezone.localtime方法：</h3>
<p>会根据<code>setting.py</code>中的<code>TIME_ZONE</code>来将一个<code>aware</code>类型的时间转换为<code>TIME_ZONE</code>指定时区的时间。</p>
<h2 id="datefield">DateField：</h2>
<p>日期类型。在<code>Python</code>中是<code>datetime.date</code>类型，可以记录年月日。在映射到数据库中也是<code>date</code>类型。使用这个<code>Field</code>可以传递以下几个参数：</p>
<ol>
<li><code>auto_now</code>：在每次这个数据保存的时候，都使用当前的时间。比如作为一个记录修改日期的字段，可以将这个属性设置为<code>True</code>。更新时间</li>
<li><code>auto_now_add</code>：在每次数据第一次被添加进去的时候，都使用当前的时间。比如作为一个记录第一次入库的字段，可以将这个属性设置为<code>True</code>。创建时间</li>
</ol>
<h2 id="datetimefield">DateTimeField：</h2>
<p>日期时间类型，类似于<code>DateField</code>。不仅仅可以存储日期，还可以存储时间。映射到数据库中是<code>datetime</code>类型。这个<code>Field</code>也可以使用<code>auto_now</code>和<code>auto_now_add</code>两个属性。</p>
<h2 id="timefield">TimeField：</h2>
<p>时间类型。在数据库中是<code>time</code>类型。在<code>Python</code>中是<code>datetime.time</code>类型。</p>
<h3 id="navie和aware介绍以及在django中的用法">navie和aware介绍以及在django中的用法：</h3>
<p>https://docs.djangoproject.com/en/2.0/topics/i18n/timezones/</p>
<h2 id="emailfield">EmailField：</h2>
<p>类似于<code>CharField</code>。在数据库底层也是一个<code>varchar</code>类型。最大长度是254个字符。</p>
<h2 id="filefield">FileField：</h2>
<p>用来存储文件的。这个请参考后面的文件上传章节部分。</p>
<h3 id="imagefield">ImageField：</h3>
<p>用来存储图片文件的。这个请参考后面的图片上传章节部分。</p>
<h3 id="floatfield">FloatField：</h3>
<p>浮点类型。映射到数据库中是<code>float</code>类型。</p>
<h3 id="integerfield">IntegerField：</h3>
<p>整形。值的区间是<code>-2147483648——2147483647</code>。</p>
<h3 id="bigintegerfield">BigIntegerField：</h3>
<p>大整形。值的区间是<code>-9223372036854775808——9223372036854775807</code>。</p>
<h3 id="positiveintegerfield">PositiveIntegerField：</h3>
<p>正整形。值的区间是<code>0——2147483647</code>。</p>
<h3 id="smallintegerfield">SmallIntegerField：</h3>
<p>小整形。值的区间是<code>-32768——32767</code>。</p>
<h3 id="positivesmallintegerfield">PositiveSmallIntegerField：</h3>
<p>正小整形。值的区间是<code>0——32767</code>。</p>
<h3 id="textfield">TextField：</h3>
<p>大量的文本类型。映射到数据库中是longtext类型。</p>
<h3 id="uuidfield">UUIDField：</h3>
<p>只能存储<code>uuid</code>格式的字符串。<code>uuid</code>是一个32位的全球唯一的字符串，一般用来作为主键。</p>
<h3 id="urlfield">URLField：</h3>
<p>类似于<code>CharField</code>，只不过只能用来存储<code>url</code>格式的字符串。并且默认的<code>max_length</code>是200。</p>
<h2 id="field常用的参数">Field常用的参数</h2>
<h3 id="null">null：</h3>
<p>如果设置为<code>True</code>，<code>Django</code>将会在映射表的时候指定是否为空。默认是为<code>False</code>。在使用字符串相关的<code>Field</code>（CharField/TextField）的时候，官方推荐尽量不要使用这个参数，也就是保持默认值<code>False</code>。因为<code>Django</code>在处理字符串相关的<code>Field</code>的时候，即使这个<code>Field</code>的<code>null=False</code>，如果你没有给这个<code>Field</code>传递任何值，那么<code>Django</code>也会使用一个空的字符串<code>&quot;&quot;</code>来作为默认值存储进去。因此如果再使用<code>null=True</code>，<code>Django</code>会产生两种空值的情形（NULL或者空字符串）。如果想要在表单验证的时候允许这个字符串为空，那么建议使用<code>blank=True</code>。如果你的<code>Field</code>是<code>BooleanField</code>，那么对应的可空的字段则为<code>NullBooleanField</code>。</p>
<h3 id="blank">blank：</h3>
<p>标识这个字段在表单验证的时候是否可以为空。默认是<code>False</code>。<br>
这个和<code>null</code>是有区别的，<code>null</code>是一个纯数据库级别的。而<code>blank</code>是<code>表单验证</code>级别的。</p>
<h3 id="db_column">db_column：</h3>
<p>这个字段在数据库中的名字。如果没有设置这个参数，那么将会使用模型中属性的名字。</p>
<h3 id="default">default：</h3>
<p>默认值。可以为一个值，或者是一个函数，但是不支持<code>lambda</code>表达式。并且不支持列表/字典/集合等可变的数据结构。</p>
<h3 id="primary_key">primary_key：</h3>
<p>是否为主键。默认是<code>False</code>。</p>
<h3 id="unique">unique：</h3>
<p>在表中这个字段的值是否唯一。一般是设置手机号码/邮箱等。</p>
<p>更多<code>Field</code>参数请参考官方文档：<a href="https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/">https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/</a></p>
<h2 id="模型中meta配置">模型中<code>Meta</code>配置：</h2>
<p>对于一些模型级别的配置。我们可以在模型中定义一个类，叫做<code>Meta</code>。然后在这个类中添加一些类属性来控制模型的作用。比如我们想要在数据库映射的时候使用自己指定的表名，而不是使用模型的名称。那么我们可以在<code>Meta</code>类中添加一个<code>db_table</code>的属性。示例代码如下：</p>
<pre><code class="language-python">class Book(models.Model):
    name = models.CharField(max_length=20,null=False)
    desc = models.CharField(max_length=100,name='description',db_column=&quot;description1&quot;)

class Meta:
    db_table = 'book_model'
</code></pre>
<p>以下将对<code>Meta</code>类中的一些常用配置进行解释。</p>
<h3 id="db_table">db_table：</h3>
<p>这个模型映射到数据库中的表名。如果没有指定这个参数，那么在映射的时候将会使用模型名来作为默认的表名。</p>
<h3 id="ordering">ordering：</h3>
<p>设置在提取数据的排序方式。后面章节会讲到如何查找数据。比如我想在查找数据的时候根据添加的时间排序，那么示例代码如下：</p>
<pre><code class="language-python">class Book(models.Model):
	name = models.CharField(max_length=20,null=False)
	desc = models.CharField(max_length=100,name='description',db_column=&quot;description1&quot;)
	pub_date = models.DateTimeField(auto_now_add=True)

	class Meta:
		db_table = 'book_model'
		#-号表示相反排序
		ordering = ['-pub_date']
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用JavaScript实时获取系统时间]]></title>
        <id>https://906571331.github.io/yx.github.io/post/shi-yong-javascript-shi-shi-huo-qu-xi-tong-shi-jian/</id>
        <link href="https://906571331.github.io/yx.github.io/post/shi-yong-javascript-shi-shi-huo-qu-xi-tong-shi-jian/">
        </link>
        <updated>2020-04-08T02:15:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="本案例实现了使用js代码实时获取系统时间">本案例实现了使用js代码实时获取系统时间</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;meta charset=&quot;utf-8&quot;&gt;
		&lt;title&gt;实时获取系统时间&lt;/title&gt;
		&lt;script language=&quot;JavaScript&quot;&gt;
			function realSystime(clock){
				var now=new Date();//创建Date对象
				var year=now.getFullYear();//获取年份
				var month=now.getMonth();//获取月份
				var date=now.getDate();//获取日期
				var day=now.getDay();//获取星期
				var hour=now.getHours();//获取小时
				var minu=now.getMinutes();//获取分钟
				var sec=now.getSeconds();//获取秒
				month=month+1;
				var arr_week=new Array(&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;);
				var week=arr_week[day];//获取中文格式的星期，是个数组
				var time=year+&quot;年&quot;+month+&quot;月&quot;+date+&quot;日&quot; +week+&quot; &quot;+hour+&quot;:&quot;+minu+&quot;:&quot;+sec;//组合系统时间
				clock.innerHTML=&quot;当前时间：&quot;+time;//显示系统时间
			}
			window.onload=function(){
				window.setInterval(&quot;realSystime(clock)&quot;,1000);//实时获取并显示系统时间
			}
		&lt;/script&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div id=&quot;clock&quot;&gt;&lt;/div&gt;
	&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django学习模板篇]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-xue-xi-mo-ban-pian/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-xue-xi-mo-ban-pian/">
        </link>
        <updated>2020-04-05T13:28:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="本篇博客是django学习中的模板篇">本篇博客是Django学习中的模板篇</h3>
<h4 id="1最简单的返回一个页面">1.最简单的返回一个页面</h4>
<p>settings.py中的设置</p>
<pre><code class="language-python">TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,&quot;templates&quot;)],
        'APP_DIRS':True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
#使用绝对路径
#'DIRS':[r&quot;C:\templates&quot;]
</code></pre>
<p>urls.py</p>
<pre><code class="language-python">path(&quot;index111/&quot;,index111),
</code></pre>
<p>views.py</p>
<pre><code class="language-python">from django.shortcuts import render
def index111(request):
    return render(request,&quot;denglu.html&quot;)
</code></pre>
<h4 id="2如果settingspy中appdirstrue则可以从app中的templates中寻找文件并且注册此appapp中的templates文件夹的名字固定否则找不到">2.如果settings.py中APP—DIRS=True，则可以从app中的templates中寻找文件,并且注册此app,app中的templates文件夹的名字固定，否则找不到</h4>
<p>views.py</p>
<pre><code class="language-python">def index222(request):
    return render(request,&quot;index222.html&quot;)
</code></pre>
<p>urls.py</p>
<pre><code class="language-python">path(&quot;index222/&quot;,index222),
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200403085633682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200403085645959.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="3测试从数据库中拿到数据">3.测试从数据库中拿到数据</h4>
<p>views.py</p>
<pre><code class="language-python">from user.models import User
def test(request):
    username=User.objects.all()
    usrss=username[0]
    print(usrss)
    return render(request,&quot;test.html&quot;,context={&quot;username&quot;:usrss})
</code></pre>
<p>urls.py</p>
<pre><code class="language-python">path(&quot;test/&quot;,test),
</code></pre>
<p>models.py</p>
<pre><code class="language-python">from django.db import models
class User(models.Model):
    name = models.CharField(max_length=50, null=False, verbose_name=&quot;姓名&quot;)
</code></pre>
<h4 id="4从views中设定一个类从类的字典中读取数据模型或者类使用keyvalue来获取">4.从views中设定一个类，从类的字典中读取数据,模型或者类使用key.value来获取</h4>
<p>viesw.py</p>
<pre><code class="language-python">class Person(object):
    def __init__(self,username11):
        self.username11=username11
def test3(request):
    p=Person(&quot;王总&quot;)
    context={
        &quot;username11&quot;:p
    }
    return render(request,&quot;test.html&quot;,context)

</code></pre>
<p>urls.py</p>
<pre><code class="language-python">path(&quot;test3/&quot;,test3),
</code></pre>
<p>test.html</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;2020年4月3号的一个测试文件&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
这个是一个测试文件，测试数据中拿到数据
{{ username11.username11}}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200403093742681.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="5如果是一个字典">5.如果是一个字典</h4>
<p>views.py</p>
<pre><code class="language-python">def test3(request):
    # p=Person(&quot;王总&quot;)
    context={
        &quot;persons&quot;:[
            '鲁班一号',
            '程咬金',
            '后羿',
        ]
    }
    return render(request,&quot;test.html&quot;,context)
</code></pre>
<p>test.html</p>
<pre><code class="language-python">{{ persons.0}}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200403094936537.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="6总结笔记">6.总结笔记</h4>
<p>1.在模板中如果要使用变量，则使用{{变量}}访问<br>
2.在模板中如果要访问对象的属性，则使用{{对象.属性名}}来进行访问</p>
<pre><code class="language-python">class Person(object):
    def __init__(self,username11):
        self.username11=username11
def test3(request):
    p=Person(&quot;王总&quot;)
    context={
        &quot;username11&quot;:p
    }
    return render(request,&quot;test.html&quot;,context)

</code></pre>
<p>访问</p>
<pre><code class="language-html">{{ persons.username}}
</code></pre>
<p>3.如果要访问字典key对应的value，则使用{{字典.key}}的方式进行访问，不能通过有[]的形式进行访问。</p>
<pre><code class="language-python">    context = {
        &quot;person&quot;:{
            &quot;username&quot;:&quot;zhihu&quot;,
        }
    }
</code></pre>
<pre><code class="language-html">{{ person.username}}
</code></pre>
<p>4.因为在访问字典key也是使用·点·的方式，因此不能在字典中定义字典本身就有的属性名当做key，否则字典中的属性就变成字典中的key</p>
<pre><code class="language-python">    context = {
        &quot;person&quot;:{
            &quot;username&quot;:&quot;zhihu&quot;,
            &quot;keys&quot;:&quot;asd&quot;
        }
    }
</code></pre>
<p>以上因为将keys作为Python字典的key，如果使用person.keys返回的是key对应的值<br>
5.如果想要访问字典或者元组，那么通过·点·的方式进行访问 ，不能通过【】进行访问，如：</p>
<pre><code class="language-html">{{ persons.0}}
</code></pre>
<h4 id="7if标签的使用">7.if标签的使用</h4>
<p>可以使用{% elif %}和{% else %}</p>
<pre><code class="language-html">{%  if &quot;张三&quot; in persons %}
&lt;p&gt;张三&lt;/p&gt;
{% else %}
&lt;p&gt;李四&lt;/p&gt;
{% endif %}
</code></pre>
<p>views.py</p>
<pre><code class="language-python">def test3(request):
    context={
        &quot;persons&quot;:[
            '鲁班一号',
            '程咬金',
            '后羿',
        ]
    }
    return render(request,&quot;test.html&quot;,context)
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200403101201778.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="8for标签">8.for标签</h4>
<pre><code class="language-html">&lt;ul&gt;
{% for person in  persons%}
{{ person }}
{% endfor %}
&lt;/ul&gt;
</code></pre>
<pre><code class="language-html">&lt;ul&gt;
{% for person in  persons%}
&lt;li&gt;
{{ person }}
&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200403184320608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
反向遍历</p>
<pre><code class="language-html">&lt;ul&gt;
{% for person in  persons reversed %}
&lt;li&gt;
{{ person }}
&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</code></pre>
<h4 id="9for循环读取key">9.for循环读取key</h4>
<p>keys可以改为value,items</p>
<pre><code class="language-html">&lt;ul&gt;
    {% for foo in book.keys %}        
        &lt;li&gt;{{ foo }}&lt;/li&gt;
    {% endfor %}
 &lt;/ul&gt;
</code></pre>
<p>views.py</p>
<pre><code class="language-python">def test3(request):
    # p=Person(&quot;王总&quot;)
    context={
        &quot;persons&quot;:[
            '鲁班一号',
            '程咬金',
            '后羿',
        ],
        &quot;book&quot;:{
            &quot;name&quot;:&quot;shuji&quot;,
            &quot;prices&quot;:&quot;21&quot;,
        }
    }
    return render(request,&quot;test.html&quot;,context)
</code></pre>
<p>改为items时</p>
<pre><code class="language-html">&lt;ul&gt;
    {% for key,value in book.items %}        
        &lt;li&gt;{{ key }}/{{ value }}&lt;/li&gt;
    {% endfor %}
 &lt;/ul&gt;
</code></pre>
<h3 id="10">10.</h3>
<p>views.py</p>
<pre><code class="language-python">class Person(object):
    def __init__(self,username11):
        self.username11=username11
def test3(request):
    # p=Person(&quot;王总&quot;)
    context={
        &quot;persons&quot;:[
            '鲁班一号',
            '程咬金',
            '后羿',
        ],
        &quot;book&quot;:{
            &quot;name&quot;:&quot;shuji&quot;,
            &quot;prices&quot;:&quot;21&quot;,
        },
        &quot;movies&quot;:[
            {
               &quot;name&quot;:&quot;西游记&quot;,
               &quot;author&quot;:&quot;施耐庵&quot;,
                &quot;price&quot;:100,
            },
            {
                &quot;name&quot;:&quot;水浒传&quot;,
                &quot;author&quot;:&quot;罗贯中&quot;,
                &quot;price&quot;:900,
            },
            {
                &quot;name&quot;: &quot;西you&quot;,
                &quot;author&quot;: &quot;施耐&quot;,
                &quot;price&quot;: 10,
            },
            {
                &quot;name&quot;: &quot;西&quot;,
                &quot;author&quot;: &quot;施&quot;,
                &quot;price&quot;: 1,
            },
        ],
    }

    return render(request,&quot;test.html&quot;,context)
</code></pre>
<p>html</p>
<pre><code class="language-html">&lt;table&gt;
    &lt;thead&gt;
    &lt;tr&gt;
        &lt;td&gt;书籍名&lt;/td&gt;
        &lt;td&gt;作者&lt;/td&gt;
        &lt;td&gt;价格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    {% for movie in movies %}
        &lt;tr&gt;
        &lt;td&gt;{{ movie.name }}&lt;/td&gt;
        &lt;td&gt;{{ movie.author }}&lt;/td&gt;
        &lt;td&gt;{{ movie.price }}&lt;/td&gt;
        &lt;/tr&gt;
    {% endfor %}
    &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200403191237320.png" alt="在这里插入图片描述" loading="lazy"><br>
加个 <td>{{ forloop.counter }}</td>,效果为在前面加了序号，forloop.counter0则序号是从0开始，recounter是反向的，recounter0则最后一个是0，first为是否是第一次遍历，last为是否是最后一次遍历<br>
html</p>
<pre><code class="language-html">&lt;table&gt;
    &lt;thead&gt;
    &lt;tr&gt;
        &lt;td&gt;书籍名&lt;/td&gt;
        &lt;td&gt;作者&lt;/td&gt;
        &lt;td&gt;价格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    {% for movie in movies %}
        &lt;tr&gt;
         &lt;td&gt;{{ forloop.counter }}&lt;/td&gt;,
        &lt;td&gt;{{ movie.name }}&lt;/td&gt;
        &lt;td&gt;{{ movie.author }}&lt;/td&gt;
        &lt;td&gt;{{ movie.price }}&lt;/td&gt;
        &lt;/tr&gt;
    {% endfor %}
    &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200403191605778.png" alt="在这里插入图片描述" loading="lazy"><br>
实现表格中的不同颜色</p>
<pre><code class="language-html">&lt;table&gt;
    &lt;thead&gt;
    &lt;tr&gt;
        &lt;td&gt;书籍名&lt;/td&gt;
        &lt;td&gt;作者&lt;/td&gt;
        &lt;td&gt;价格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    {% for movie in movies %}
        {% if forloop.first %}
        &lt;tr style=&quot;background: red;&quot;&gt;
            {% elif forloop.last %}
            &lt;tr style=&quot;background: black;&quot;&gt;
            {% else %}
            &lt;tr style=&quot;background: pink;&quot;&gt;
        {% endif %}
        &lt;td&gt;{{ forloop.first }}&lt;/td&gt;
        &lt;td&gt;{{ movie.name }}&lt;/td&gt;
        &lt;td&gt;{{ movie.author }}&lt;/td&gt;
        &lt;td&gt;{{ movie.price }}&lt;/td&gt;
        &lt;/tr&gt;
    {% endfor %}

    &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200403192556136.png" alt="在这里插入图片描述" loading="lazy"><br>
views.py</p>
<pre><code class="language-python">def test3(request):
    # p=Person(&quot;王总&quot;)
    context={
        &quot;persons&quot;:[
            '鲁班一号',
            '程咬金',
            '后羿',
        ],
        &quot;book&quot;:{
            &quot;name&quot;:&quot;shuji&quot;,
            &quot;prices&quot;:&quot;21&quot;,
        },
        &quot;movies&quot;:[
            {
               &quot;name&quot;:&quot;西游记&quot;,
               &quot;author&quot;:&quot;施耐庵&quot;,
                &quot;price&quot;:100,
            },
            {
                &quot;name&quot;:&quot;水浒传&quot;,
                &quot;author&quot;:&quot;罗贯中&quot;,
                &quot;price&quot;:900,
            },
            {
                &quot;name&quot;: &quot;西you&quot;,
                &quot;author&quot;: &quot;施耐&quot;,
                &quot;price&quot;: 10,
            },
            {
                &quot;name&quot;: &quot;西&quot;,
                &quot;author&quot;: &quot;施&quot;,
                &quot;price&quot;: 1,
            },
        ],
        &quot;comments&quot;:[
            &quot;文章真好&quot;,
            &quot;不错&quot;,
            &quot;还行&quot;
        ],
    }

    return render(request,&quot;test.html&quot;,context)
</code></pre>
<pre><code class="language-html">&lt;ul&gt;
    {% for foo in comments %}
        &lt;li&gt;{{ foo }}&lt;/li&gt;
        {% empty %}
        &lt;li&gt;没有任何评论&lt;/li&gt;
    {% endfor %}
&lt;/ul&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020040319342385.png" alt="在这里插入图片描述" loading="lazy"><br>
若为空，则显示：没有任何评论</p>
<h4 id="11with标签">11.with标签</h4>
<p>with相当于取了一个别名</p>
<pre><code class="language-python">{% with zs=persons.0  %}
{{ zs }}{{ zs }}
{% endwith %}
</code></pre>
<p>使用as的话，应该反过来写</p>
<pre><code class="language-Python">{% with persons.0 as zs  %}
{{ zs }}{{ zs }}
{% endwith %}
</code></pre>
<h4 id="12url标签">12.url标签</h4>
<pre><code class="language-html">&lt;a href=&quot;{% static 'index.html'  %}&quot;&gt;首页&lt;/a&gt;
&lt;a href=&quot;{% url 'denglu' %}&quot;&gt;登录&lt;/a&gt;
&lt;a href=&quot;{% url 'tushu' tushu_id='1' %}&quot;&gt;图书的页面&lt;/a&gt;
</code></pre>
<p>views.py</p>
<pre><code class="language-python">def tushu(request,tushu_id):
    text = &quot;您的图书的id为：%s&quot; % tushu_id
    return HttpResponse(text)
def denglu(request):
    return render(request,&quot;denglu.html&quot;)
</code></pre>
<h4 id="13自动转义">13.自动转义</h4>
<p>views.py</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;info&quot;:&quot;&lt;a href='http://www.baidu.com'&gt;百度&lt;/a&gt;&quot;
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">{% autoescape off %}
    {{ info }}
{% endautoescape %}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200403214106732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="14verbatim">14.verbatim</h4>
<pre><code class="language-html">{% verbatim %}
{{ hello }}
{% endverbatim %}
</code></pre>
<p>显示时不会自动转义，将显示原字符{{hello}}</p>
<h4 id="15返回函数值">15.返回函数值</h4>
<p>views.py</p>
<pre><code class="language-python">def greet():
    return &quot;你好&quot;
def tiaozhuan(request):
    context={
        &quot;greet&quot;:greet
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">{{ greet }}
</code></pre>
<h4 id="16dtl过滤器add添加">16.DTL过滤器add：添加</h4>
<p>单独在html文件中这样写</p>
<pre><code class="language-html">#返回结果为3
{{&quot;1&quot;|add &quot;2&quot;}}
#返回结果是个字符串
{{ &quot;1&quot; |add:&quot;2sdasdsa&quot; }}
</code></pre>
<p>传递参数时：</p>
<pre><code class="language-python">#views.py
def tiaozhuan(request):
    context={
        &quot;value1&quot;:&quot;value1&quot;,
        &quot;value2&quot;:&quot;value2&quot;,
    }
    return render(request,&quot;test.html&quot;,context=context)
#或者：
def tiaozhuan(request):
    context={
        &quot;value1&quot;:[&quot;1&quot;,2,3],
        &quot;value2&quot;:[&quot;4&quot;,&quot;5&quot;,6]
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">{{ value1 |add:value2 }}
#第一种情况显示 value1 value2
#第二种情况显示  ['1', 2, 3, '4', '5', 6]
</code></pre>
<h4 id="17dtl过滤器cut剪掉">17.DTL过滤器cut:剪掉</h4>
<pre><code class="language-html">{{value|cut:&quot;被剪掉的字符串&quot;}}
##例如
{{&quot;hello word&quot;|cut:&quot; &quot;}}
#显示 helloword
</code></pre>
<p>显示日期</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;birthday&quot;:datetime.now()
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">{{ birthday|date:&quot;Y-m-d H:i:s&quot;  }}
</code></pre>
<h4 id="18dtl过滤器defalut若判断为false则使用后面的值代替">18.DTL过滤器defalut:若判断为false，则使用后面的值代替</h4>
<p>default:</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:0
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">{{ a|default:&quot;传入的参数错误&quot; }}
#显示为传入的参数错误
</code></pre>
<p>default_if_none:</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:None
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#显示为nothing
{{ a|default_if_none:&quot;nothing&quot; }}
</code></pre>
<h4 id="19dtl过滤器last显示最后一个值-first显示第一个值">19.DTL过滤器last：显示最后一个值。first:显示第一个值</h4>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:&quot;asdfg&quot;
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#以下代码显示为g
{{ a|last }}
#以下代码显示a
{{a|first}}
</code></pre>
<h4 id="20dtl过滤器floatformat">20.DTL过滤器floatformat</h4>
<p>无参数时，显示一位小数，若四舍五入后小数点后面全为0，则默认省去小数点后面的值（用途：对评分等进行格式化）</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:&quot;90.8927655
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#以下代码显示为90.9
{{ a|floatformat }}
#以下代码显示3位小数
{{ a|floatformat：3 }}
</code></pre>
<h4 id="21dtl过滤器join">21.DTL过滤器join</h4>
<p>join,对给定的参数进行分割</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:&quot;jjjj&quot;
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#以下代码显示为j/j/j/j
{{ a|join:&quot;/&quot; }}
</code></pre>
<h4 id="22dtl过滤器length">22.DTL过滤器length</h4>
<p>lower,将全部转换为小写,upper全部转换为大写<br>
length:统计字典，数组，字符串的长度<br>
random从字典，数组，字符中随机选择一个值(点名系统)<br>
safe:关闭自动转义，可以用来执行写好的js代码</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:&quot;JJJJ&quot;,
        &quot;b&quot;:[&quot;a&quot;,&quot;2&quot;,&quot;&quot;3],
        &quot;c&quot;:{
        	&quot;a&quot;:&quot;s&quot;,
        	&quot;d&quot;:&quot;f&quot;
        },
        &quot;d&quot;:&quot;&lt;script&gt;alert('这是一个警示框')&lt;/script&gt;&quot;
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#以下代码显示为4,3,2,jjjj,弹出警示框
{{ a|length }}
{{ b|length }}
{{ c|length }}
{{a|lower}}
{{b|random}}
{{d|safe}}
</code></pre>
<h4 id="23dtl过滤器slice切片过滤器">23.DTL过滤器slice，切片过滤器</h4>
<p>striptags，清除所有html标签<br>
truncatechars，超过制定数字，则进行切割，并显示....（用于做摘要）,算上....一共的字符<br>
truncatechars_html：切割html中的字符</p>
<pre><code class="language-python">def tiaozhuan(request):
    context={
        &quot;a&quot;:[1,2,3,4,5,6,7],
        &quot;b&quot;:&quot;&lt;script&gt;alert('这是一个警示框')&lt;/script&gt;&quot;,
        &quot;c&quot;:&quot;asdfghjkl&quot;，
        &quot;d&quot;:&quot;&lt;p&gt;北京欢迎你&lt;/p&gt;&quot;,
    }
    return render(request,&quot;test.html&quot;,context=context)
</code></pre>
<pre><code class="language-html">#以下代码显示为[1] [2, 3, 4, 5, 6, 7] [2, 3, 4] [2, 4, 6],alert('这是一个警示框')，
{{a|slice:&quot;1&quot;}}
{{a|slice:&quot;1:&quot;}}
{{a|slice:&quot;1:4&quot;}}
{{a|slice:&quot;1:2&quot;}}
{{b|striptags}}
#as...
{{a|truncatechars:5}}
#&lt;p&gt;北...&lt;/p&gt;
{{ d|truncatechars_html:4}}
</code></pre>
<p>查看Django中有哪些默认的标签</p>
<pre><code class="language-python">from django.template import defaultfilters,defaulttags
</code></pre>
<h4 id="24自定义过滤器">24.自定义过滤器</h4>
<p>在app下新建Python package包，名字叫templatetags,在此文件夹下新建my_filter.py，并注册此app</p>
<pre><code class="language-html">#indexs.html
{% load my_filter %}
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{{ value |greet:&quot;word&quot;}}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<pre><code class="language-python">#my_fliter.py
#过滤器最多有两个参数
#过滤器的第一个参数永远为被过滤的参数，也就是|左边的值
from django import template
register=template.Library()
def greet(value,word):
    return value+word
register.filter(&quot;greet&quot;,greet)
#或者可以写成这样，效果是一样的
from django import template
register=template.Library()
@register.filter
def greet(value,word):
    return value+word
register.filter(&quot;greet&quot;,greet)
#当在@register.filter传入参数时，如：@register.filter(&quot;my_greet&quot;),则在html文件中也应该使用这个名字
</code></pre>
<pre><code class="language-python">#views.py
def index(request):
    context ={
        &quot;value&quot;:&quot;张三&quot;,
    }
    return render(request,&quot;indexs.html&quot;,context=context)
</code></pre>
<h4 id="25自定义过滤器实战时间过滤器">25.自定义过滤器实战:时间过滤器</h4>
<pre><code class="language-python">#views.py
from django.shortcuts import render
from datetime import datetime
def index(request):
    context ={
        &quot;value&quot;:&quot;张三&quot;,
        &quot;mytime&quot;:datetime(year=2020,month=3,day=8,hour=13,minute=34)
    }
    return render(request,&quot;indexs.html&quot;,context=context)
</code></pre>
<pre><code class="language-python">#my_filter.py
@register.filter
def time_since(value):
    if not isinstance(value,datetime):
        return value
    now= datetime.now()
    #timedelay.total_seconds
    timestamp=(now - value).total_seconds()
    if timestamp&lt;60:
        return &quot;刚刚&quot;
    elif timestamp&gt;=60 and timestamp &lt;60*60:
        minutes=int(timestamp/60)
        return &quot;%s分钟前&quot; %minutes
    elif timestamp&gt;=60*60 and timestamp&lt;24*60*60:
        hour=int(timestamp/60/60)
        return &quot;%s小时前&quot; %hour
    elif timestamp&gt;=60*60*24 and timestamp&lt;24*60*60*30:
        days=int(timestamp/60/60/24)
        return &quot;%s天前&quot; %days
    else:
        return value.strftime(&quot;%Y/%m/%d %H:%M&quot;)
</code></pre>
<pre><code class="language-html">{{ mytime|time_since }}
</code></pre>
<h4 id="26模板中的include详解">26.模板中的include详解</h4>
<pre><code class="language-python">#views.py
def indexsss(request):
    context={
        &quot;username&quot;:&quot;用户名&quot;
    }
    return render(request,&quot;indexsss.html&quot;,context=context)
def company(request):
    return render(request,&quot;company.html&quot;)
def xiaoyuan(request):
    return render(request,&quot;xiaoyuan.html&quot;)
</code></pre>
<pre><code class="language-html">#indexsss.html
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{% include &quot;header.html&quot; with username=&quot;用户名2&quot;%}
&lt;div class=&quot;content&quot;&gt;
    这是中间的部分{{ username }}
&lt;/div&gt;
{% include &quot;footer.html&quot;  %}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<pre><code class="language-html">#header.html
&lt;header&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;{% url &quot;company&quot; %}&quot;&gt;公司&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;{% url &quot;xiaoyuan&quot; %}&quot;&gt;校园&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;{{ username }}&lt;/li&gt;
    &lt;/ul&gt;
&lt;/header&gt;
</code></pre>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;这是公司的首页&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{% include &quot;header.html&quot; %}
这是公司的页面
{% include &quot;footer.html&quot; %}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="27继承父模板">27.继承父模板</h4>
<pre><code class="language-html">#必须放在第一行
{% extends &quot;base.html&quot; %}
</code></pre>
<p>在base.html中开个口子</p>
<pre><code class="language-html">#base.html
    {% block content %}
    想要继承这一段，需要在index.html中添加相关内容
    {% endblock %}
</code></pre>
<p>同时在index.html中填充口子</p>
<pre><code class="language-html">#index.html
    {% block content %}
    这是首页啊
    {{ block .super}}
    {% endblock %}
</code></pre>
<h4 id="18加载静态文件">18.加载静态文件</h4>
<pre><code class="language-html">#开头加上这个标签
{% load staticfiles %}
src=&quot;{% static 'js/echarts.min.js' %}&quot;
</code></pre>
<p>在settings.py中设置如下</p>
<pre><code class="language-python">STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # 用于存放静态文件
]
</code></pre>
<p>在settiings.py中若设置为如下,则在html文件中可以不用加载{% load staticfiles %}，把static设置为一个内置的标签，如if</p>
<pre><code class="language-python">#settings.py
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,&quot;templates&quot;)],
        'APP_DIRS':True,#如果为True,则也可以到app中寻找htnl文件
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'builtins':['django.templatetags.static'],
        },
    },
]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django学习笔记URL篇]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-xue-xi-bi-ji-url-pian/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-xue-xi-bi-ji-url-pian/">
        </link>
        <updated>2020-04-02T14:33:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="本篇博客记录了博主平时django的一些学习笔记">本篇博客记录了博主平时Django的一些学习笔记：</h3>
<h4 id="1在urlpy中使用httpresponse">1.在Url.py中使用HttpResponse</h4>
<p>urls.py</p>
<pre><code class="language-bash">from django.http import HttpResponse
from django.urls import path, include
def index1(request):
    return HttpResponse(&quot;这才是首页&quot;)
def book(request):
	return HttpResponse(&quot;书籍首页&quot;)
urlpatterns = [
    path(&quot;&quot;,index1),
    path(&quot;book/&quot;,book),
]
</code></pre>
<p>开启debug模式可以在访问错误页面的时候发现运行中的错误，<br>
当Debug设置为False时，必须设置能够访问本网站的主机地址<br>
同时，在本页面出现错误时会返回Server Error (500)<br>
在生产环境中一定要关闭Debug模式，否则可能造成信息泄露<br>
<img src="https://img-blog.csdnimg.cn/20200401181539431.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="2project与app分开写视图函数">2.project与app分开写视图函数</h4>
<p>projetc/url.py</p>
<pre><code class="language-python">from book.views import book
urlpatterns = [
    path(&quot;book/&quot;,book),
]
</code></pre>
<p>book/views.py</p>
<pre><code class="language-python">from django.http import HttpResponse
def book(request):
	return HttpResponse(&quot;这是book首页&quot;)
</code></pre>
<h4 id="3url传递参数给视图函数">3.URL传递参数给视图函数</h4>
<p>一个参数views.py</p>
<pre><code class="language-python">def booklist(request,book_id):
    #可以根据数据库中的数据提取book的信息
    text = &quot;您获取的图书的id是：%s&quot; % book_id
    return HttpResponse(text)
</code></pre>
<p>一个参数urls.py</p>
<pre><code class="language-python">from book import booklist
urlpatterns = [
	path(&quot;book/&lt;book_id&gt;&quot;,booklist),
]
</code></pre>
<p>两个参数views.py</p>
<pre><code class="language-python">def booklist(request,book_id,book_name):
    #可以根据数据库中的数据提取book的信息
    text = &quot;您获取的图书的id是：%s ,您的图书的名字是：%s&quot; % (book_id,book_name)
    return HttpResponse(text)
</code></pre>
<p>两个参数urls.py</p>
<pre><code class="language-python">from book import booklist
urlpatterns = [
	path(&quot;book/&lt;book_id&gt;/&lt;book_name&gt;&quot;,booklist),
]
</code></pre>
<h4 id="4查询">4.查询</h4>
<p>views.py</p>
<pre><code class="language-python">def author(request):
	author_id=request.Get.get(&quot;id&quot;)
	text = &quot;作者的id为%s &quot; % author_id
	return HttpResponse(text)
</code></pre>
<p>urls.py</p>
<pre><code class="language-python">	path(&quot;author/&quot;,author)
</code></pre>
<p>查询时<br>
http://192.168.168.141:8000/author/?id=2<br>
<img src="https://img-blog.csdnimg.cn/2020040121074461.png" alt="在这里插入图片描述" loading="lazy"><br>
因为查询字符串使用的是GET请求，所以我们使用request.GET来获取参数，且因为GET是一个类似于字典的数类型，所以获取值跟字典的方式都是一样的</p>
<h4 id="5uuid的使用">5.uuid的使用</h4>
<p>uuid根据实际情况也可以换成int,或者str</p>
<pre><code class="language-python">from book import booklist
urlpatterns = [
	path(&quot;book/&lt;uuid:book_id&gt;&quot;,booklist),
]
</code></pre>
<p>使用uuid，只能访问uuid类型的字符串，其他的都是错误的<br>
在Python环境中导入一个uuid</p>
<pre><code class="language-python">import uuid
print(uuid.uuid4())
</code></pre>
<p>from django.urls import converters<br>
str不能加/，但是改为path就可以显示斜杠，具体使用看converters.py</p>
<h4 id="6url参数的转化器">6.url参数的转化器</h4>
<pre><code class="language-bash">str: 除了/以外的所有字符
int：阿拉伯数字
path:所有字符
uuid:uuid.uuid4()函数返回的格式
slug:英文字母、数字、横杠、下划线
</code></pre>
<h4 id="7url的模块化管理">7.url的模块化管理</h4>
<p>project/urls.py</p>
<pre><code class="language-python">from django.urls import path, include
urlpatterns = [
	path(&quot;book/&gt;&quot;,include(&quot;book.urls&quot;)),
]
</code></pre>
<p>book/urls.py</p>
<pre><code class="language-python">from django.urls import path
from .views import booklist
urlpatterns = [
	path(&quot;&lt;book_id&gt;/&quot;,booklist),
]
</code></pre>
<p>book/views.py</p>
<pre><code class="language-bash">from django.http import HttpResponse
def booklist(request,book_id):
	text = &quot;图书的id为%s &quot; % book_id
	return HttpResponse(text)
</code></pre>
<h4 id="8url命名与反转">8.url命名与反转</h4>
<p>在app的urls.py中添加app_name（应用命名空间），防止每个app的url重复，造成url找不到的情况<br>
front/views.py</p>
<pre><code class="language-python">from django.shortcuts import render,redirect,reverse
from django.http import HttpResponse

def index(request):
    username=request.GET.get(&quot;username&quot;)
    if username:
        return HttpResponse(&quot;这是前台首页&quot;)
    else:
        return redirect(reverse(&quot;front:login&quot;))
def login(request):
    return HttpResponse(&quot;这是前台的登录页面&quot;)
</code></pre>
<p>front/urls.py</p>
<pre><code class="language-python">from django.urls import path
from .views import index,login
app_name=&quot;front&quot;
urlpatterns=[
    path(&quot;&quot;,index),
    path(&quot;signin/&quot;,login,name=&quot;login&quot;),
]
</code></pre>
<h4 id="9应用实例命名空间">9.应用实例命名空间</h4>
<p>不能只制定实例命名空间，没有应用命名空间<br>
project/urls.py</p>
<pre><code class="language-bash">    path(&quot;cms1/&quot;,include(&quot;cms.urls&quot;,namespace=&quot;cms1&quot;)),
    path(&quot;cms2/&quot;,include(&quot;cms.urls&quot;,namespace=&quot;cms2&quot;)),
</code></pre>
<p>app/urls.py</p>
<pre><code class="language-bash">from django.shortcuts import render,reverse,redirect
from django.http import HttpResponse
def index(request):
    username=request.GET.get(&quot;username&quot;)
    if username:
        return HttpResponse(&quot;这是后台首页&quot;)
    else:
        current_namespace=request.resolver_match.namespace
        return redirect(reverse(&quot;%s:login&quot; %current_namespace))
def login(request):
    return HttpResponse(&quot;这是后台的登录页面&quot;)
</code></pre>
<h4 id="10re_path">10.re_path</h4>
<p>urls.py</p>
<pre><code class="language-python">    #P为参数的名字，&lt;year&gt;为类型，\d表示为日期型，{4}表示有4个数字
    #w:0-9,a-z,A-Z
    re_path(r&quot;^list/(?P&lt;year&gt;\d{4}/)&quot;,article_list),
    re_path(r&quot;^list/(?P&lt;year&gt;\d{4})/(?P&lt;month&gt;\d{4})&quot;,article_list_month),
</code></pre>
<p>views.py</p>
<pre><code class="language-python">def article_list(request,year):
    text = &quot;您输入的是第%s年的文章&quot; % year
    return HttpResponse(text)
</code></pre>
<p>此时list后面只能是四位数字<br>
<img src="https://img-blog.csdnimg.cn/20200402191129108.png" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="11跳转到指定的页面">11.跳转到指定的页面</h4>
<pre><code class="language-python">return redirect(reverse(&quot;&lt;article&gt;/&quot;,kwargs={&quot;article_id&quot;:1}))
</code></pre>
<h4 id="12添加多个标签">12.添加多个标签</h4>
<p>urls.py</p>
<pre><code class="language-python">    re_path(r&quot;list/(?P&lt;catagries&gt;\w+|(\w+\+\w+)+)/&quot;,article_list_lll),
</code></pre>
<p>views.py</p>
<pre><code class="language-python">def article_list_lll(request,catagries):
    text = &quot;您输入的是第%s的文章hhhh &quot; % catagries
    return HttpResponse(text)
</code></pre>
<h4 id="13自定义path">13.自定义path</h4>
<pre><code class="language-bash">from django.urls import converters,register_converter
class CategoryConverter(object):
    regex =r'\w+|(\w+\+\w+)+'
    def to_python(self,value):
        #python+django+flask
        #['python','django','flask']
        result=value.split(&quot;+&quot;)
        return result
    def to_url(self,value):
        #['python','django','flask']
        # python+django+flask
        if isinstance(value,list):
            result = &quot;+&quot;.join(value)
            return result
        else:
            raise RuntimeError(&quot;转换url的时候，分类参数必须为列表&quot;)
#应用命名空间
register_converter(CategoryConverter,'cate')

path(&quot;list/&lt;cate:catagries&gt;&quot;,article_list_lll),

</code></pre>
<p>views.py</p>
<pre><code class="language-bash">def article_list_lll(request,catagries):
    text = &quot;您输入的是第%s的文章hhhh &quot; % catagries
    return HttpResponse(text)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020040221085428.png" alt="在这里插入图片描述" loading="lazy"><br>
如果converters.py是另外的，则需要在init文件中导入converters<br>
<strong>init</strong>.py</p>
<pre><code class="language-python">from . import converters
</code></pre>
<h4 id="14自定义参数">14.自定义参数</h4>
<p>urls.py</p>
<pre><code class="language-bash">    path(&quot;&quot;,movies),
    path(&quot;page/&lt;int:page&gt;&quot;,movies),
</code></pre>
<p>views.py</p>
<pre><code class="language-bash">book_list=[
    &quot;三国演义&quot;,
    &quot;红楼梦&quot;,
    &quot;西游记&quot;,
    &quot;水浒传&quot;,
]
# Create your views here.
# def movie(request,movie_id):
#     text = &quot;电影的id为：%s&quot; % movie_id
#     return HttpResponse(text)

def movies(request,page=0):
    return HttpResponse(book_list[page])
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200402221341463.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200402221414385.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决Django开发中pycharm连接不到虚拟机的问题]]></title>
        <id>https://906571331.github.io/yx.github.io/post/jie-jue-django-kai-fa-zhong-pycharm-lian-jie-bu-dao-xu-ni-ji-de-wen-ti/</id>
        <link href="https://906571331.github.io/yx.github.io/post/jie-jue-django-kai-fa-zhong-pycharm-lian-jie-bu-dao-xu-ni-ji-de-wen-ti/">
        </link>
        <updated>2020-04-02T02:18:36.000Z</updated>
        <content type="html"><![CDATA[<h4 id="出现的问题">出现的问题</h4>
<p>在pycharm连接ubuntu时，出现了：</p>
<pre><code class="language-bash">Connection to '192.168.168.141' failed.
Session.connect：java.netConnectException: Connection timed out connect
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200402101036518.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="解决的方法">解决的方法</h4>
<p>查看虚拟机的ip时，发现虚拟机的ip已经更换，所以在pycharm中，点击工具----&gt;Deployment----&gt;Configuration，以下三处分别改为虚拟机新的ip地址，（我的是从192.168.168.141改为192.168.168.145），点击Test SFTP connection，即可解决连接超时的问题<br>
<img src="https://img-blog.csdnimg.cn/20200402101531809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/2020040210172163.png" alt="在这里插入图片描述" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django常用学习网站]]></title>
        <id>https://906571331.github.io/yx.github.io/post/django-chang-yong-xue-xi-wang-zhan/</id>
        <link href="https://906571331.github.io/yx.github.io/post/django-chang-yong-xue-xi-wang-zhan/">
        </link>
        <updated>2020-03-31T02:33:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="本篇博客总结了一些django常用的一些学习网站欢迎留言补充">本篇博客总结了一些Django常用的一些学习网站，欢迎留言补充</h3>
<h4 id="1django中文网">1.<a href="https://www.django.cn/">Django中文网</a></h4>
<p>Django中文社区,是一个Django开发者和Django爱好者交流的社区,这里有很多django教程和django技术文档,欢迎广大喜欢Django的朋友加入！django,django教程,django,django社区,django文档,django中文<br>
<img src="https://img-blog.csdnimg.cn/20200331092025348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200331092120796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="2django-rest-framework">2.<a href="https://www.django-rest-framework.org/">django-rest-framework</a></h4>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200331100915981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="3django文档">3.<a href="https://docs.djangoproject.com/zh-hans/2.0/">Django文档</a></h4>
<p>Django 有丰富的文档。一份高度概述的文档会告诉你在哪里找到特定的东西<br>
<img src="https://img-blog.csdnimg.cn/20200331101207485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<h4 id="4菜鸟教程">4.<a href="https://www.runoob.com/django/django-tutorial.html">菜鸟教程</a></h4>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20200331101412255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="5刘江的django教程">5.<a href="https://www.liujiangblog.com/course/django/84">刘江的Django教程</a></h4>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200331101728234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="6w3cschool">6.<a href="https://www.w3cschool.cn/django/">W3Cschool</a></h4>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20200331121714837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDkyMDc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决Django与echarts结合出现Uncaught SyntaxError: Unexpected token &和&#39;的问题]]></title>
        <id>https://906571331.github.io/yx.github.io/post/jie-jue-django-yu-echarts-jie-he-chu-xian-uncaught-syntaxerror-unexpected-token-andhe-and39de-wen-ti/</id>
        <link href="https://906571331.github.io/yx.github.io/post/jie-jue-django-yu-echarts-jie-he-chu-xian-uncaught-syntaxerror-unexpected-token-andhe-and39de-wen-ti/">
        </link>
        <updated>2020-03-30T13:52:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="出现的问题">出现的问题</h3>
<p>在Django与echarts结合中，出现了<br>
data:[&amp;#39];和Uncaught SyntaxError: Unexpected token &amp;的问题<br>
<img src="https://img-blog.csdnimg.cn/20200330214902150.png" alt="在这里插入图片描述" loading="lazy"><br>
<img src="https://img-blog.csdnimg.cn/20200330214925997.png" alt="在这里插入图片描述" loading="lazy"></p>
<h3 id="出错的代码">出错的代码</h3>
<pre><code class="language-bash">    xAxis: {
        type: 'category',
        boundaryGap: false,
        data: {{ name_list}}
    },
</code></pre>
<p>原因是前端页面echarts接收数据时，没有添加|safe</p>
<h3 id="解决的方法">解决的方法</h3>
<p>在echarts页面data接收来自views.py的数据时，加上|safe,具体效果如下：</p>
<pre><code class="language-bash">    xAxis: {
        type: 'category',
        boundaryGap: false,
        data: {{ name_list|safe }}
    },
</code></pre>
<p>重启Django应用即可正确显示echarts图表</p>
]]></content>
    </entry>
</feed>